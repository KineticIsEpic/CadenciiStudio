<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadencii</name>
    </assembly>
    <members>
        <member name="P:cadencii.AttachedCurve.Curves">
            <summary>
            XML保存用
            </summary>
        </member>
        <member name="M:cadencii.BezierChain.getStart">
            <summary>
            このベジエ曲線の開始位置を取得します。データ点が1つも無い場合はdouble.NaNを返します
            </summary>
        </member>
        <member name="M:cadencii.BezierChain.getEnd">
            <summary>
            このベジエ曲線の終了位置を取得します。データ点が1つも無い場合はdouble.NaNを返します
            </summary>
        </member>
        <member name="M:cadencii.BezierChain.cutUnitBezier(cadencii.PointD,cadencii.PointD,cadencii.PointD,cadencii.PointD,System.Double)">
            <summary>
            4つの点X0, C0, C1, X1から構成されるベジエ曲線を、位置xで2つに分割することで出来る7個の新しい点の座標を計算します。
            X0, X1がデータ点、C0, C1が制御点となります。xがX0.X &lt; x &lt; X1.Xでない場合ArgumentOutOfRangeExceptionを投げます。
            </summary>
            <param name="X0"></param>
            <param name="C0"></param>
            <param name="C1"></param>
            <param name="X1"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.BezierChain.getMidPoint(cadencii.PointD,cadencii.PointD,System.Double)">
            <summary>
            点p0, p1を結ぶ線分をt : 1 - tに分割する点の座標を計算します
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.BezierChain.clear">
            <summary>
            登録されているデータ点を消去します
            </summary>
        </member>
        <member name="M:cadencii.BezierChain.isBezierImplicit(cadencii.BezierChain)">
            <summary>
            与えられたBezierChainがx軸について陰かどうかを判定する
            </summary>
            <param name="chain"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.BezierChain.isUnitBezierImplicit(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            4つの制御点からなるベジエ曲線が、x軸について陰かどうかを判定する
            </summary>
            <param name="pt1">始点</param>
            <param name="pt2">制御点1</param>
            <param name="pt3">制御点2</param>
            <param name="pt4">終点</param>
            <returns></returns>
        </member>
        <member name="M:cadencii.BezierChain.solveCubicEquation(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            3次方程式a3*x^3 + a2*x^2 + a1*x + a0 = ansの解をニュートン法を使って計算します。ただし、単調増加である必要がある。
            </summary>
            <param name="a3"></param>
            <param name="a2"></param>
            <param name="a1"></param>
            <param name="a0"></param>
            <param name="ans"></param>
            <returns></returns>
        </member>
        <member name="T:cadencii.BezierControlType">
            <summary>
            （互換性維持のため、None->NONE等とリファクタしていない）
            </summary>
        </member>
        <member name="F:cadencii.BezierControlType.None">
            <summary>
            制御点無し
            </summary>
        </member>
        <member name="F:cadencii.BezierControlType.Normal">
            <summary>
            このタイプの制御点を移動させると、逆サイドの制御点も自動的に移動する
            </summary>
        </member>
        <member name="F:cadencii.BezierControlType.Master">
            <summary>
            このタイプの制御点を移動させても、逆サイドの制御点には影響しない
            </summary>
        </member>
        <member name="T:cadencii.BezierCurves">
            <summary>
            AtatchedCurveをXMLシリアライズするためのクラス
            であると同時に，各トラックに付随する情報を格納するためのクラス←New!
            </summary>
        </member>
        <member name="M:cadencii.BezierCurves.mergeBezierChain(cadencii.CurveType,cadencii.BezierChain)">
            <summary>
            指定した種類のコントロールカーブにベジエ曲線を追加します。
            AddBezierChainとの違い、オーバーラップする部分があれば自動的に結合されます。
            chainには2個以上のデータ点が含まれている必要がある
            </summary>
            <param name="curve"></param>
            <param name="chain"></param>
        </member>
        <member name="M:cadencii.BezierCurves.insertBlank(System.Int32,System.Int32)">
            <summary>
            指定した位置に，指定した量の空白を挿入します
            </summary>
            <param name="clock_start">空白を挿入する位置</param>
            <param name="clock_amount">挿入する空白の量</param>
        </member>
        <member name="M:cadencii.BezierCurves.removePart(System.Int32,System.Int32)">
            <summary>
            全種類のカーブの指定した範囲を削除します．
            削除範囲以降の部分は，操作後には(clock_end - clock_start)だけシフトされます．
            </summary>
            <param name="clock_start"></param>
            <param name="clock_end"></param>
        </member>
        <member name="M:cadencii.BezierCurves.deleteBeziers(cadencii.java.util.Vector{cadencii.CurveType},System.Int32,System.Int32)">
            <summary>
            指定したカーブ種類のベジエ曲線の，指定した範囲を削除します．
            削除はclock_startからclock_endの範囲について行われ，clock_end以降のシフト操作は行われません．
            つまり，操作後にclock_end以降のイベントが(clock_end - clock_start)だけ前方にシフトしてくることはありません．
            </summary>
            <param name="target_curve"></param>
            <param name="clock_start"></param>
            <param name="clock_end"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.BezierCurves.addBezierChain(cadencii.CurveType,cadencii.BezierChain,System.Int32)">
            <summary>
            指定したコントロールカーブにベジエ曲線を追加します。
            </summary>
            <param name="curve_type"></param>
            <param name="chain"></param>
        </member>
        <member name="T:cadencii.BezierPickedSide">
            <summary>
            ベジエ曲線のデータ点や制御点を選択したとき，どの種類の点を選択したかを表現するための列挙型
            </summary>
        </member>
        <member name="F:cadencii.BezierPickedSide.RIGHT">
            <summary>
            データ点の右側にある制御点を選択したことを表す
            </summary>
        </member>
        <member name="F:cadencii.BezierPickedSide.BASE">
            <summary>
            データ点そのものを選択したことを表す
            </summary>
        </member>
        <member name="F:cadencii.BezierPickedSide.LEFT">
            <summary>
            データ点の左側にある制御点を選択したことを表す
            </summary>
        </member>
        <member name="T:cadencii.BezierPoint">
            <summary>
            ベジエ曲線を構成するデータ点。
            </summary>
        </member>
        <member name="P:cadencii.BezierPoint.Base">
            <summary>
            XmlSerialize用
            </summary>
        </member>
        <member name="P:cadencii.BezierPoint.ControlLeft">
            <summary>
            XmlSerialize用
            </summary>
        </member>
        <member name="P:cadencii.BezierPoint.ControlRight">
            <summary>
            XmlSerialize用
            </summary>
        </member>
        <member name="P:cadencii.BezierPoint.ControlLeftType">
            <summary>
            XmlSerializer用
            </summary>
        </member>
        <member name="P:cadencii.BezierPoint.ControlRightType">
            <summary>
            XmlSerializer用
            </summary>
        </member>
        <member name="M:cadencii.BgmMenuItem.getBgmIndex">
            <summary>
            このメニューアイテムが担当しているBGMのインデックスを取得します
            </summary>
            <returns>BGMのインデックス</returns>
        </member>
        <member name="T:cadencii.BooleanEnum">
            <summary>
            ブール値をOn，Offで表現するための列挙型
            </summary>
        </member>
        <member name="F:cadencii.BooleanEnum.Off">
            <summary>
            ブール値falseを表す
            </summary>
        </member>
        <member name="F:cadencii.BooleanEnum.On">
            <summary>
            ブール値trueを表す
            </summary>
        </member>
        <member name="M:cadencii.Cadencii.parseArguments(System.String[])">
            <summary>
            起動時に渡されたコマンドライン引数を評価します。
            戻り値は、コマンドライン引数のうちVSQ,またはXVSQファイルとして指定された引数、または空文字です。
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:cadencii.Cadencii.getExceptionText(System.Exception,System.Int32)">
            <summary>
            内部例外を含めた例外テキストを再帰的に取得します。
            </summary>
            <param name="ex"></param>
            <param name="depth_count"></param>
            <returns></returns>
        </member>
        <member name="T:cadencii.CadenciiCommand">
            <summary>
            Undo/Redoを実現するためのコマンド。
            Boare.Lib.Vsq.VsqFileレベルのコマンドは、Type=VsqCommandとして取り扱う。
            Boare.Cadencii.VsqFileExレベルのコマンドは、Argsに処理内容を格納して取り扱う。
            </summary>
        </member>
        <member name="M:cadencii.ICommand.getChild">
            <summary>
            子コマンドのリスト
            </summary>
        </member>
        <member name="M:cadencii.ICommand.getParent">
            <summary>
            親コマンドへの参照
            </summary>
        </member>
        <member name="T:cadencii.CadenciiCommandType">
            <summary>
            VsqFileExクラスのための編集コマンドの種類を表す列挙型
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.VSQ_COMMAND">
            <summary>
            org.kbinani.vsqネイティブの編集コマンド
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.BEZIER_CHAIN_ADD">
            <summary>
            ベジエ曲線の追加
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.BEZIER_CHAIN_DELETE">
            <summary>
            ベジエ曲線の削除
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.BEZIER_CHAIN_REPLACE">
            <summary>
            ベジエ曲線の置換
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.REPLACE">
            <summary>
            VsqFileEx全体の置換
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.ATTACHED_CURVE_REPLACE_RANGE">
            <summary>
            ベジエ曲線の一括置換
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.TRACK_ADD">
            <summary>
            トラックの追加
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.TRACK_DELETE">
            <summary>
            トラックの削除
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.TRACK_REPLACE">
            <summary>
            トラックの置換
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.BGM_UPDATE">
            <summary>
            BGMの編集
            </summary>
        </member>
        <member name="F:cadencii.CadenciiCommandType.CHANGE_SEQUENCE_CONFIG">
            <summary>
            シーケンスの設定を
            </summary>
        </member>
        <member name="F:cadencii.ClipboardEntry.tempo">
            <summary>
            コピーorカットで複製されたテンポ
            </summary>
        </member>
        <member name="F:cadencii.ClipboardEntry.timesig">
            <summary>
            コピーorカットで複製された拍子
            </summary>
        </member>
        <member name="F:cadencii.ClipboardEntry.points">
            <summary>
            コピーorカットで複製されたカーブ
            </summary>
        </member>
        <member name="F:cadencii.ClipboardEntry.beziers">
            <summary>
            コピーorカットで複製されたベジエ曲線
            </summary>
        </member>
        <member name="F:cadencii.ClipboardEntry.copyStartedClock">
            <summary>
            コピーの開始位置。貼付け時に、この値をもとにクロックのシフトを行う
            </summary>
        </member>
        <member name="T:cadencii.ClipboardModel">
            <summary>
            クリップボードを管理するクラスです．
            </summary>
        </member>
        <member name="M:cadencii.ClipboardModel.setClipboard(cadencii.ClipboardEntry)">
            <summary>
            クリップボードにオブジェクトを貼り付けます．
            </summary>
            <param name="item">貼り付けるオブジェクトを格納したClipboardEntryのインスタンス</param>
        </member>
        <member name="M:cadencii.ClipboardModel.setClipboard(cadencii.java.util.Vector{cadencii.vsq.VsqEvent},cadencii.java.util.Vector{cadencii.vsq.TempoTableEntry},cadencii.java.util.Vector{cadencii.vsq.TimeSigTableEntry},cadencii.java.util.TreeMap{cadencii.CurveType,cadencii.vsq.VsqBPList},cadencii.java.util.TreeMap{cadencii.CurveType,cadencii.java.util.Vector{cadencii.BezierChain}},System.Int32)">
            <summary>
            クリップボードにオブジェクトを貼り付けるためのユーティリティ．
            </summary>
            <param name="events"></param>
            <param name="tempo"></param>
            <param name="timesig"></param>
            <param name="curve"></param>
            <param name="bezier"></param>
            <param name="copy_started_clock"></param>
        </member>
        <member name="M:cadencii.ClipboardModel.getCopiedItems">
            <summary>
            クリップボードに貼り付けられたアイテムを取得します．
            </summary>
            <returns>クリップボードに貼り付けられたアイテムを格納したClipboardEntryのインスタンス</returns>
        </member>
        <member name="M:cadencii.ClipboardModel.setCopiedEvent(cadencii.java.util.Vector{cadencii.vsq.VsqEvent},System.Int32)">
            <summary>
            VsqEventのリストをクリップボードにセットします．
            </summary>
            <param name="item">セットするVsqEventのリスト</param>
            <param name="copy_started_clock"></param>
        </member>
        <member name="M:cadencii.ClipboardModel.setCopiedTempo(cadencii.java.util.Vector{cadencii.vsq.TempoTableEntry},System.Int32)">
            <summary>
            テンポ変更イベント(TempoTableEntry)のリストをクリップボードにセットします．
            </summary>
            <param name="item">セットするTempoTableEntryのリスト</param>
            <param name="copy_started_clock"></param>
        </member>
        <member name="M:cadencii.ClipboardModel.setCopiedTimesig(cadencii.java.util.Vector{cadencii.vsq.TimeSigTableEntry},System.Int32)">
            <summary>
            拍子変更イベント(TimeSigTableEntry)のリストをクリップボードにセットします．
            </summary>
            <param name="item">セットする拍子変更イベントのリスト</param>
            <param name="copy_started_clock"></param>
        </member>
        <member name="M:cadencii.ClipboardModel.setCopiedCurve(cadencii.java.util.TreeMap{cadencii.CurveType,cadencii.vsq.VsqBPList},System.Int32)">
            <summary>
            コントロールカーブをクリップボードにセットします．
            </summary>
            <param name="item">セットするコントロールカーブ</param>
            <param name="copy_started_clock"></param>
        </member>
        <member name="M:cadencii.ClipboardModel.setCopiedBezier(cadencii.java.util.TreeMap{cadencii.CurveType,cadencii.java.util.Vector{cadencii.BezierChain}},System.Int32)">
            <summary>
            ベジエ曲線をクリップボードにセットします．
            </summary>
            <param name="item">セットするベジエ曲線</param>
            <param name="copy_started_clock"></param>
        </member>
        <member name="T:cadencii.ControllerBase">
            <summary>
            コントローラーの基底となる抽象クラス．
            </summary>
        </member>
        <member name="T:cadencii.Amplifier">
            <summary>
            増幅器の実装
            </summary>
        </member>
        <member name="T:cadencii.WaveUnit">
            <summary>
            インターフェースWaveReceiver, WaveSender, WaveGeneratorを持つクラスの基底クラス．
            </summary>
        </member>
        <member name="F:cadencii.WaveUnit.BASE_WIDTH">
            <summary>
            このユニットを画面に描くときの、基本となる描画幅。単位はピクセル
            この値を使うかどうかは任意
            </summary>
        </member>
        <member name="F:cadencii.WaveUnit.BASE_HEIGHT_PER_PORTS">
            <summary>
            このユニットを画面に描くときの、入出力ポート1個分の描画高さの標準値。単位はピクセル
            この値を使うかどうかは任意
            </summary>
        </member>
        <member name="F:cadencii.WaveUnit.mConfig">
            <summary>
            エディターの設定値
            </summary>
        </member>
        <member name="F:cadencii.WaveUnit.mMainWindow">
            <summary>
            メインウィンドウへの参照
            </summary>
        </member>
        <member name="F:cadencii.WaveUnit.mStroke">
            <summary>
            描画用のストローク
            </summary>
        </member>
        <member name="F:cadencii.WaveUnit.mFont">
            <summary>
            描画用のフォント
            </summary>
        </member>
        <member name="F:cadencii.WaveUnit.mRoot">
            <summary>
            この波形処理ユニットが属している回路のルートにある波形合成器への参照を保持する
            </summary>
        </member>
        <member name="M:cadencii.WaveUnit.getVersion">
            <summary>
            バージョンを表す整数を返す．
            実装上，setConfigに渡す文字列の書式が変わったとき，バージョンを増やすようにする．
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveUnit.setConfig(System.String)">
            <summary>
            設定を行う．parameterの1字目は，parameterを分割するのに利用する文字を付ける．
            例えば，3個の整数を受け取る実装の場合，次の2つは同じ意味になる(そのように実装する)．
                1)    parameter = "\n1\n2\n3"
                2)    parameter = "\t1\t2\t3"
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:cadencii.WaveUnit.setRoot(cadencii.WaveGenerator)">
            <summary>
            この波形処理ユニットが属している回路のルートにある波形合成器を設定します
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:cadencii.WaveUnit.getRoot">
            <summary>
            この波形処理ユニットが属している回路のルートにある波形合成器を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveUnit.setGlobalConfig(cadencii.EditorConfig)">
            <summary>
            スコアエディタ全体の設定値を設定する．
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:cadencii.WaveUnit.setMainWindow(cadencii.FormMain)">
            <summary>
            メインウィンドウへの参照を設定します
            </summary>
        </member>
        <member name="M:cadencii.WaveUnit.paintTo(cadencii.java.awt.Graphics2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            このユニットを指定した位置に描画します。
            </summary>
            <param name="graphics">描画に使用するグラフィクス</param>
            <param name="x">描画する位置のx座標</param>
            <param name="y">描画する位置のy座標</param>
            <returns>描画された装置図に外接する四角形のサイズ</returns>
        </member>
        <member name="T:cadencii.WaveSender">
            <summary>
            音声波形を出力する受動的生成器．
            自分では音声波形を出力せず，pullが呼ばれて初めて波形を生成する．
            能動的生成器として利用するには，WaveSenderDriverクラスを用いる．
            </summary>
        </member>
        <member name="M:cadencii.WaveSender.pull(System.Double[],System.Double[],System.Int32)">
            <summary>
            音声波形の生成を要求するためのメソッド．
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <param name="length"></param>
        </member>
        <member name="M:cadencii.WaveSender.setSender(cadencii.WaveSender)">
            <summary>
            この生成器の1つ上流に配置する波形生成器を設定します．
            このクラスのインスタンスのpullが呼ばれると，1つ上流の生成器のpullを呼び出すことになる．
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:cadencii.WaveSender.end">
            <summary>
            波形の生成を終了します．
            </summary>
        </member>
        <member name="T:cadencii.WaveReceiver">
            <summary>
            音声波形の受信器のためのインターフェース．
            </summary>
        </member>
        <member name="M:cadencii.WaveReceiver.push(System.Double[],System.Double[],System.Int32)">
            <summary>
            波形を受信します
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="length"></param>
        </member>
        <member name="M:cadencii.WaveReceiver.setReceiver(cadencii.WaveReceiver)">
            <summary>
            音声波形の受信器を設定します．
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:cadencii.WaveReceiver.end">
            <summary>
            波形の受信を終了します．
            </summary>
        </member>
        <member name="M:cadencii.FileWaveReceiver.init(System.String)">
            <summary>
            初期化メソッド．
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:cadencii.AquesTone2WaveGenerator">
            <summary>
            AquesTone2 VSTi を使って歌声合成を行うクラス
            </summary>
        </member>
        <member name="T:cadencii.WaveGenerator">
            <summary>
            音声波形の生成器のためのインターフェース．
            このインターフェースを実装するクラスは，WaveUnitクラスを継承すること．
            このインターフェースのメソッドは全て同期的とすること
            </summary>
        </member>
        <member name="M:cadencii.WaveGenerator.getSampleRate">
            <summary>
            この波形生成器を親とする回路の，各波形ラインに流れる波形データのサンプリングレートを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveGenerator.begin(System.Int64,cadencii.WorkerState)">
            <summary>
            音声波形の合成を開始します．
            このメソッドの前には，setGlobalConfig, setConfig, initメソッドをこの順で呼び出して
            必要なパラメータを全て渡すようにしてください．
            (この順番に呼ばれることを前提とした実装をしなくてはならない)
            </summary>
            <param name="samples"></param>
            <param name="state"></param>
        </member>
        <member name="M:cadencii.WaveGenerator.setReceiver(cadencii.WaveReceiver)">
            <summary>
            この音声波形器が生成した波形を受け取る装置を設定します．
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:cadencii.WaveGenerator.init(cadencii.VsqFileEx,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            音声波形の合成に必要な引数を設定します．
            </summary>
            <param name="vsq"></param>
            <param name="track"></param>
            <param name="start_clock"></param>
            <param name="end_clock"></param>
            <param name="sample_rate">
            この波形生成器を親とする回路の，各波形ラインに流れる波形データのサンプリングレート．
            この波形生成器が生成するサンプリングレートを指定するのではないので注意
            </param>
        </member>
        <member name="M:cadencii.WaveGenerator.setGlobalConfig(cadencii.EditorConfig)">
            <summary>
            エディターの設定値を指定します
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:cadencii.WaveGenerator.getProgress">
            <summary>
            合成処理の進捗状況を取得します．
            戻り値は0から1までとなります
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveGenerator.getPosition">
            <summary>
            合成処理の進捗状況を取得します．
            単位はサンプル数です
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveGenerator.getTotalSamples">
            <summary>
            beginメソッドで指定された，合成処理を行う合計のサンプル数を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveGenerator.isRunning">
            <summary>
            合成処理が実行中かどうかを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveGenerator.setMainWindow(cadencii.FormMain)">
            <summary>
            メインウィンドウへの参照を設定します
            </summary>
            <param name="main_window"></param>
        </member>
        <member name="M:cadencii.AquesTone2WaveGenerator.generateMidiEvent(cadencii.VsqFileEx,System.Int32)">
            <summary>
            イベントキューを生成する
            </summary>
            <param name="vsq"></param>
            <param name="trackIndex"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AquesTone2WaveGenerator.appendPitchEvent(cadencii.vsq.VsqTrack,cadencii.EventQueueSequence)">
            <summary>
            ピッチとピッチベンドセンシティビティをイベントキューに追加する
            </summary>
            <param name="track"></param>
            <param name="sequence"></param>
        </member>
        <member name="M:cadencii.AquesTone2WaveGenerator.reflectNoteEventPitch(cadencii.vsq.VsqEvent,cadencii.vsq.VsqBPList,cadencii.vsq.VsqBPList,cadencii.vsq.TempoVector)">
            <summary>
            音符に付随するピッチベンドの情報を、PIT・PBS カーブに反映する
            </summary>
            <param name="item">音符</param>
            <param name="pitchBend">PIT カーブ</param>
            <param name="pitchBendSensitivity">PBS カーブ</param>
            <param name="tempoTable">テンポ情報</param>
        </member>
        <member name="M:cadencii.AquesTone2WaveGenerator.appendNoteEvent(cadencii.vsq.VsqTrack,cadencii.EventQueueSequence)">
            <summary>
            音符の note on/off のためのイベントを作成し、イベントキューに追加する
            </summary>
            <param name="track">生成元のトラック</param>
            <param name="result">生成したイベントの追加先</param>
        </member>
        <member name="F:cadencii.AquesToneWaveGeneratorBase.mTotalAppend">
            <summary>
            これまでに合成したサンプル数
            </summary>
        </member>
        <member name="M:cadencii.AquesToneWaveGeneratorBase.init(cadencii.VsqFileEx,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化メソッド
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:cadencii.AquesToneWaveGeneratorBase.exitBegin">
            <summary>
            beginメソッドを抜けるときの共通処理を行います
            </summary>
        </member>
        <member name="M:cadencii.AquesToneWaveGenerator.generateMidiEvent(cadencii.VsqFileEx,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="vsq"></param>
            <param name="track"></param>
            <param name="clock_start"></param>
            <param name="clock_end"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AquesToneWaveGenerator.addSingerEvents(cadencii.EventQueueSequence,cadencii.vsq.VsqTrack,System.Int32,System.Int32)">
            <summary>
            歌手変更イベントを、イベントキューに追加する
            </summary>
            <param name="queueSequence">追加対象のイベントキュー</param>
            <param name="track">歌手変更イベントを取り出すトラック</param>
            <param name="start">時間区間の開始位置</param>
            <param name="end">時間区間の終了位置</param>
        </member>
        <member name="T:cadencii.EmptyWaveGenerator">
            <summary>
            無音の波形を送信するWaveGenerator
            </summary>
        </member>
        <member name="T:cadencii.UtauWaveGenerator">
            <summary>
            UTAUの合成器(または互換合成器)を用いて波形を合成する波形生成器
            </summary>
        </member>
        <member name="F:cadencii.UtauWaveGenerator.mThisSampleRate">
            <summary>
            whdから読み込んだサンプリングレート．
            波形処理ラインのサンプリングレートと違う可能性がある
            </summary>
        </member>
        <member name="F:cadencii.UtauWaveGenerator.mIsQuiet">
            <summary>
            ログを出さない設定の時true
            </summary>
        </member>
        <member name="M:cadencii.UtauWaveGenerator.init(cadencii.VsqFileEx,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化メソッド．
            </summary>
            <param name="vsq"></param>
            <param name="track"></param>
            <param name="start_clock"></param>
            <param name="end_clock"></param>
        </member>
        <member name="M:cadencii.UtauWaveGenerator.exitBegin">
            <summary>
            beginメソッドを抜けるときの共通処理を行います
            </summary>
        </member>
        <member name="T:cadencii.VConnectWaveGenerator">
            <summary>
            vConnect-STANDを使って音声合成を行う波形生成器
            </summary>
        </member>
        <member name="F:cadencii.VConnectWaveGenerator.STRAIGHT_SYNTH">
            <summary>
            シンセサイザの実行ファイル名
            </summary>
        </member>
        <member name="F:cadencii.VConnectWaveGenerator.mTotalAppend">
            <summary>
            WaveIncomingで追加されたサンプル数
            </summary>
        </member>
        <member name="F:cadencii.VConnectWaveGenerator.mRunningRate">
            <summary>
            現在の処理速度．progress%/sec
            </summary>
        </member>
        <member name="M:cadencii.VConnectWaveGenerator.exitBegin">
            <summary>
            beginメソッドから抜ける直前に行う処理
            </summary>
        </member>
        <member name="M:cadencii.VConnectWaveGenerator.appendQueueCor(cadencii.VsqFileEx,System.Int32,cadencii.java.util.Vector{cadencii.vsq.VsqEvent},System.String)">
            <summary>
            連続した音符を元に，StraightRenderingQueueを作成
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:cadencii.VConnectWaveGenerator.prepareMetaText(cadencii.java.io.BufferedWriter,cadencii.vsq.VsqTrack,System.String,System.Int32)">
            <summary>
            合成用のメタテキストを生成します
            </summary>
            <param name="writer">テキストの出力先</param>
            <param name="vsq_track">出力対象のトラック</param>
            <param name="oto_ini">原音設定ファイルのパス</param>
            <param name="end_clock"></param>
        </member>
        <member name="M:cadencii.VConnectWaveGenerator.prepareMetaText(cadencii.java.io.BufferedWriter,cadencii.vsq.VsqTrack,System.String,System.Int32,System.Boolean)">
            <summary>
            合成用のメタテキストを生成します
            </summary>
            <param name="writer"></param>
            <param name="vsq_track"></param>
            <param name="oto_ini"></param>
            <param name="end_clock"></param>
            <param name="world_mode"></param>
        </member>
        <member name="M:cadencii.VConnectWaveGenerator.prepareMetaText(cadencii.java.io.BufferedWriter,cadencii.vsq.VsqTrack,cadencii.java.util.TreeMap{System.String,System.String},System.Int32,System.Boolean)">
            <summary>
            合成用のメタテキストを生成します
            </summary>
            <param name="writer"></param>
            <param name="vsq_track"></param>
            <param name="oto_ini"></param>
            <param name="end_clock"></param>
        </member>
        <member name="T:cadencii.IWaveIncoming">
            <summary>
            ドライバーからの波形を受け取るためのインターフェース
            </summary>
        </member>
        <member name="M:cadencii.IWaveIncoming.waveIncomingImpl(System.Double[],System.Double[],System.Int32,cadencii.WorkerState)">
            <summary>
            ドライバから波形を受け取るためのコールバック関数
            </summary>
            <param name="l">左チャンネルの波形データ</param>
            <param name="r">右チャンネルの波形データ</param>
            <param name="length">波形データの長さ。配列の長さよりも短い場合がある</param>
        </member>
        <member name="F:cadencii.VocaloidWaveGenerator.mSampleRate">
            <summary>
            波形処理ラインのサンプリング周波数
            </summary>
        </member>
        <member name="F:cadencii.VocaloidWaveGenerator.mDriverSampleRate">
            <summary>
            VOCALOID VSTiの実際のサンプリング周波数
            </summary>
        </member>
        <member name="F:cadencii.VocaloidWaveGenerator.mContext">
            <summary>
            サンプリング周波数変換器
            </summary>
        </member>
        <member name="M:cadencii.VocaloidWaveGenerator.init(cadencii.VsqFileEx,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化メソッド．
            </summary>
            <param name="vsq"></param>
            <param name="track"></param>
            <param name="start_clock"></param>
            <param name="end_clock"></param>
            <param name="sample_rate">波形処理ラインのサンプリング周波数</param>
        </member>
        <member name="M:cadencii.VocaloidWaveGenerator.waveIncomingImpl(System.Double[],System.Double[],System.Int32,cadencii.WorkerState)">
            <summary>
            VSTiドライバに呼んでもらう波形受け渡しのためのコールバック関数にして、IWaveIncomingインターフェースの実装。
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <param name="length"></param>
        </member>
        <member name="M:cadencii.VocaloidWaveGenerator.exitBegin">
            <summary>
            beginメソッドを抜けるときに共通する処理を行います
            </summary>
        </member>
        <member name="T:cadencii.WaveSenderDriver">
            <summary>
            WaveSenderをWaveGeneratorとして使うためのドライバー．
            WaveSenderは受動的波形生成器なので，自分では波形を作らない．
            </summary>
        </member>
        <member name="M:cadencii.WaveSenderDriver.init(cadencii.VsqFileEx,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初期化メソッド
            </summary>
            <param name="vsq"></param>
            <param name="track"></param>
            <param name="start_clock"></param>
            <param name="end_clock"></param>
        </member>
        <member name="T:cadencii.MonitorWaveReceiver">
            <summary>
            スピーカへの出力を行う波形受信器
            </summary>
        </member>
        <member name="T:cadencii.Separator">
            <summary>
            信号を分岐する装置
            </summary>
        </member>
        <member name="T:cadencii.EditHistoryModel">
            <summary>
            編集操作の履歴を管理するModel
            </summary>
        </member>
        <member name="M:cadencii.EditHistoryModel.register(cadencii.ICommand)">
            <summary>
            ヒストリーに編集履歴を登録する
            </summary>
            <param name="command">登録する履歴</param>
        </member>
        <member name="M:cadencii.EditHistoryModel.clear">
            <summary>
            編集履歴を消去する
            </summary>
        </member>
        <member name="M:cadencii.EditHistoryModel.hasUndoHistory">
            <summary>
            UNDO用のヒストリーを取得できるかどうか調べる
            </summary>
            <returns>UNDO用のヒストリーを取得できる場合trueを，そうでなければfalseを返す</returns>
        </member>
        <member name="M:cadencii.EditHistoryModel.hasRedoHistory">
            <summary>
            REDO用のヒストリーを取得できるかどうか調べる
            </summary>
            <returns>REDO用のヒストリーを取得できる場合trueを，そうでなければfalseを返す</returns>
        </member>
        <member name="M:cadencii.EditHistoryModel.getUndo">
            <summary>
            UNDO用のコマンドを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.EditHistoryModel.getRedo">
            <summary>
            REDO用のコマンドを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.EditHistoryModel.registerAfterUndo(cadencii.ICommand)">
            <summary>
            UNDO処理後に発生したコマンドを登録する
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:cadencii.EditHistoryModel.registerAfterRedo(cadencii.ICommand)">
            <summary>
            REDO処理後に発生したコマンドを登録する
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:cadencii.RendererKind">
            <summary>
            歌声合成システムの種類
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.VOCALOID1">
            <summary>
            VOCALOID1
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.VOCALOID1_100">
            <summary>
            Synthesize Engine 1.0のVOCALOID1．過去のバージョンとの互換性のために残存．
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.VOCALOID1_101">
            <summary>
            Synthesize Engine 1.1のVOCALOID1．過去のバージョンとの互換性のために残存．
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.VOCALOID2">
            <summary>
            VOCALOID2
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.AQUES_TONE">
            <summary>
            AquesTone
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.UTAU">
            <summary>
            UTAU
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.STRAIGHT_UTAU">
            <summary>
            STRAIGHT X UTAU
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.VCNT">
            <summary>
            vConnect-STAND
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.AQUES_TONE2">
            <summary>
            AquesTone2
            </summary>
        </member>
        <member name="F:cadencii.RendererKind.NULL">
            <summary>
            何もしない歌声合成システム(EmptyRenderingRunner)
            </summary>
        </member>
        <member name="T:cadencii.RendererKindUtil">
            <summary>
            歌声合成システムの種類
            </summary>
        </member>
        <member name="M:cadencii.RendererKindUtil.getString(cadencii.RendererKind)">
            <summary>
            画面にだす合成システム名を取得する
            </summary>
            <param name="value">合成システム</param>
            <returns>合成システム名。取得できない場合は空文字を返す</returns>
        </member>
        <member name="M:cadencii.RendererKindUtil.fromString(System.String)">
            <summary>
            画面表記から、合成システム種類を取得する
            </summary>
            <param name="value">画面表記</param>
            <returns>合成システムの種類。取得できない場合は RendererKind.NULL を返す</returns>
        </member>
        <member name="M:cadencii.RendererKindUtil.getVersionString(cadencii.RendererKind)">
            <summary>
            指定した音声合成システムを識別する文字列(DSB301, DSB202等)を取得します
            </summary>
            <param name="kind">歌声合成システムの種類</param>
            <returns>歌声合成システムを識別する文字列(VOCALOID2=DSB301, VOCALOID1[1.0,1.1]=DSB202, AquesTone=AQT000, Straight x UTAU=STR000, UTAU=UTAU000)</returns>
        </member>
        <member name="M:cadencii.RendererKindUtil.getPianorollBackground(cadencii.RendererKind)">
            <summary>
            ピアノロールの背景色を取得する
            </summary>
            <param name="kind">歌声合成システムの種類</param>
            <returns>背景色。取得できない場合はデフォルトの背景色を返す</returns>
        </member>
        <member name="M:cadencii.RendererKindUtil.getPianorollDarkBackground(cadencii.RendererKind)">
            <summary>
            ピアノロールの黒鍵部分の背景色を取得する
            </summary>
            <param name="kind">歌声合成システムの種類</param>
            <returns>背景色。取得できない場合はデフォルトの背景色を返す</returns>
        </member>
        <member name="M:cadencii.RendererKindUtil.getPianorollBar(cadencii.RendererKind)">
            <summary>
            ピアノロールの小節の区切り線の色を取得する
            </summary>
            <param name="kind">歌声合成システムの種類</param>
            <returns>区切り線の色。取得できない場合はデフォルトの色を返す</returns>
        </member>
        <member name="M:cadencii.RendererKindUtil.getPianorollBeat(cadencii.RendererKind)">
            <summary>
            ピアノロールの拍の区切り線の色を取得する
            </summary>
            <param name="kind">歌声合成システムの種類</param>
            <returns>区切り線の色。取得できない場合はデフォルトの色を返す</returns>
        </member>
        <member name="T:cadencii.RendererKindUtil.Config">
            <summary>
            歌声合成システム、ビューのための設定値を保持する
            </summary>
        </member>
        <member name="F:cadencii.RendererKindUtil.Config.display_">
            <summary>
            画面表記
            </summary>
        </member>
        <member name="F:cadencii.RendererKindUtil.Config.version_">
            <summary>
            VSQ に保存する際の、バージョン文字列
            </summary>
        </member>
        <member name="F:cadencii.RendererKindUtil.Config.background_">
            <summary>
            ピアノロールの背景色
            </summary>
        </member>
        <member name="F:cadencii.RendererKindUtil.Config.dark_background_">
            <summary>
            ピアノロールの黒鍵部分の背景色
            </summary>
        </member>
        <member name="F:cadencii.RendererKindUtil.Config.bar_">
            <summary>
            小節を区切る縦線の色
            </summary>
        </member>
        <member name="F:cadencii.RendererKindUtil.Config.beat_">
            <summary>
            拍を区切る縦線の色
            </summary>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormUiListener.sendButtonClick">
            <summary>
            例外情報を送信するボタンが押された
            </summary>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormUiListener.cancelButtonClick">
            <summary>
            キャンセルボタンが押された
            </summary>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormController.extractMessageString(System.Exception,System.Int32)">
            <summary>
            例外からその情報を再帰的に取り出す
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormController.getSystemInfo">
            <summary>
            システムの情報を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormUi.setTitle(System.String)">
            <summary>
            ウィンドウのタイトルを設定する
            </summary>
            <param name="vlaue"></param>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormUi.setDescription(System.String)">
            <summary>
            説明文を設定する
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormUi.setExceptionMessage(System.String)">
            <summary>
            例外情報を設定する
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormUi.close">
            <summary>
            ダイアログを閉じる
            </summary>
        </member>
        <member name="T:cadencii.FormAskKeySoundGenerationUi">
            <summary>
            FormAskKeySoundGenerationフォームのビューが実装すべきメソッドを規定します．
            </summary>
        </member>
        <member name="M:cadencii.FormAskKeySoundGenerationUi.close(System.Boolean)">
            <summary>
            フォームを閉じます．
            valueがtrueのときダイアログの結果をCancelに，それ以外の場合はOKとなるようにします．
            </summary>
        </member>
        <member name="M:cadencii.FormAskKeySoundGenerationUi.setMessageLabelText(System.String)">
            <summary>
            メッセージの文字列を設定します．
            </summary>
            <param name="value">設定する文字列．</param>
        </member>
        <member name="M:cadencii.FormAskKeySoundGenerationUi.setAlwaysPerformThisCheckCheckboxText(System.String)">
            <summary>
            チェックボックスの文字列を設定します．
            </summary>
            <param name="value">設定する文字列．</param>
        </member>
        <member name="M:cadencii.FormAskKeySoundGenerationUi.setYesButtonText(System.String)">
            <summary>
            「はい」ボタンの文字列を設定します．
            </summary>
            <param name="value">設定する文字列．</param>
        </member>
        <member name="M:cadencii.FormAskKeySoundGenerationUi.setNoButtonText(System.String)">
            <summary>
            「いいえ」ボタンの文字列を設定します．
            </summary>
            <param name="value">設定する文字列．</param>
        </member>
        <member name="F:cadencii.FormBezierPointEditController.m_last_mouse_global_location">
            <summary>
            移動ボタンでデータ点または制御点を動かすためにマウスを強制的に動かす直前の，スクリーン上のマウス位置
            </summary>
        </member>
        <member name="F:cadencii.FormBezierPointEditController.mScreenMouseDownLocation">
            <summary>
            移動ボタンでデータ点または制御点を動かすためにマウスを強制的に動かした直後の，スクリーン上のマウス位置
            </summary>
        </member>
        <member name="M:cadencii.FormBezierPointEditUi.setDialogResult(System.Boolean)">
            <summary>
            ダイアログの結果を設定する
            </summary>
            <param name="result">OKなら true を、そうでなければ false を設定する</param>
        </member>
        <member name="M:cadencii.FormCheckUnknownSingerAndResampler.#ctor(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            コンストラクタ．
            </summary>
            <param name="singer"></param>
            <param name="apply_singer"></param>
            <param name="resampler"></param>
            <param name="apply_resampler"></param>
        </member>
        <member name="M:cadencii.FormCheckUnknownSingerAndResampler.isSingerChecked">
            <summary>
            原音の項目にチェックが入れられたか
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormCheckUnknownSingerAndResampler.getSingerPath">
            <summary>
            原音のパスを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormCheckUnknownSingerAndResampler.isResamplerChecked">
            <summary>
            リサンプラーの項目にチェックが入れられたかどうか
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormCheckUnknownSingerAndResampler.getResamplerPath">
            <summary>
            リサンプラーのパスを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormCheckUnknownSingerAndResampler.registerEventHandlers">
            <summary>
            イベントハンドラを登録します
            </summary>
        </member>
        <member name="F:cadencii.FormCheckUnknownSingerAndResampler.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormCheckUnknownSingerAndResampler.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormCheckUnknownSingerAndResampler.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:cadencii.FormMainController">
            <summary>
            メイン画面のコントローラ
            </summary>
        </member>
        <member name="M:cadencii.FormMainUiListener.navigationPanelGotFocus">
            <summary>
            ナビゲーションパネルがフォーカスを得たときに呼ばれる
            </summary>
        </member>
        <member name="F:cadencii.FormMainController.mScaleX">
            <summary>
            x方向の表示倍率(pixel/clock)
            </summary>
        </member>
        <member name="F:cadencii.FormMainController.mInvScaleX">
            <summary>
            mScaleXの逆数
            </summary>
        </member>
        <member name="F:cadencii.FormMainController.mStartToDrawX">
            <summary>
            画面左端位置での、仮想画面上の画面左端から測ったピクセル数．
            FormMain.hScroll.ValueとFormMain.trackBar.Valueで決まる．
            </summary>
        </member>
        <member name="F:cadencii.FormMainController.mStartToDrawY">
            <summary>
            画面上端位置での、仮想画面上の画面上端から図ったピクセル数．
            FormMain.vScroll.Value，FormMain.vScroll.Height，FormMain.vScroll.Maximum,AppManager.editorConfig.PxTrackHeightによって決まる
            </summary>
        </member>
        <member name="F:cadencii.FormMainController.mStepSequencerEnabled">
            <summary>
            MIDIステップ入力モードがONかどうか
            </summary>
        </member>
        <member name="M:cadencii.FormMainController.isStepSequencerEnabled">
            <summary>
            MIDIステップ入力モードがONかどうかを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMainController.setStepSequencerEnabled(System.Boolean)">
            <summary>
            MIDIステップ入力モードがONかどうかを設定する
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.FormMainController.getScaleX">
            <summary>
            ピアノロールの，X方向のスケールを取得します(pixel/clock)
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMainController.getScaleXInv">
            <summary>
            ピアノロールの，X方向のスケールの逆数を取得します(clock/pixel)
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMainController.setScaleX(System.Single)">
            <summary>
            ピアノロールの，X方向のスケールを設定します
            </summary>
            <param name="scale_x"></param>
        </member>
        <member name="M:cadencii.FormMainController.getScaleY">
            <summary>
            ピアノロールの，Y方向のスケールを取得します(pixel/cent)
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMainController.getStartToDrawX">
            <summary>
            ピアノロール画面の，ビューポートと仮想スクリーンとの横方向のオフセットを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMainController.setStartToDrawX(System.Int32)">
            <summary>
            ピアノロール画面の，ビューポートと仮想スクリーンとの横方向のオフセットを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.FormMainController.getStartToDrawY">
            <summary>
            ピアノロール画面の，ビューポートと仮想スクリーンとの縦方向のオフセットを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMainController.setStartToDrawY(System.Int32)">
            <summary>
            ピアノロール画面の，ビューポートと仮想スクリーンとの縦方向のオフセットを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:cadencii.FormMainUi">
            <summary>
            メイン画面の実装クラスが持つべきメソッドを定義するインターフェース
            </summary>
        </member>
        <member name="M:cadencii.FormMainUi.focusPianoRoll">
            <summary>
            ピアノロールの部品にフォーカスを持たせる
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.addComponent(System.Object)">
            <summary>
            プロパティウィンドウのトップレベルコンポーネントを追加する
            </summary>
            <param name="c">追加するコンポーネント</param>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.isWindowMinimized">
            <summary>
            プロパティウィンドウが最小化された状態かどうかを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.deiconfyWindow">
            <summary>
            ウィンドウのサイズを標準状態に戻す
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.setTitle(System.String)">
            <summary>
            ウィンドウのタイトル文字列を設定する
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.setAlwaysOnTop(System.Boolean)">
            <summary>
            ウィンドウを常に最前面に表示するかどうかを設定する
            </summary>
            <param name="alwaysOnTop"></param>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.isAlwaysOnTop">
            <summary>
            ウィンドウを常に最前面に表示するかどうか
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.close">
            <summary>
            ウィンドウを閉じる
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.setMenuCloseAccelerator(System.Windows.Forms.Keys)">
            <summary>
            ウィンドウを閉じるメニューのショートカットキーを設定する
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.setVisible(System.Boolean)">
            <summary>
            ウィンドウが可視状態かどうかを設定する
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.isVisible">
            <summary>
            ウィンドウが可視状態かどうかを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.setBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ウィンドウの位置とサイズを設定する
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.getX">
            <summary>
            ウィンドウ位置のX座標を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.getY">
            <summary>
            ウィンドウ位置のY座標を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.getWidth">
            <summary>
            ウィンドウの幅を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.getHeight">
            <summary>
            ウィンドウの高を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.getWorkingAreaX">
            <summary>
            このウィンドウが含まれるスクリーンの位置のX座標を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.getWorkingAreaY">
            <summary>
            このウィンドウが含まれるスクリーンの位置のY座標を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.getWorkingAreaWidth">
            <summary>
            このウィンドウが含まれるスクリーンの幅を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.getWorkingAreaHeight">
            <summary>
            このウィンドウが含まれるスクリーンの高さを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormNotePropertyUi.hideWindow">
            <summary>
            ウィンドウを破棄することなく、非表示状態にする
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyUiListener.onLoad">
            <summary>
            ウィンドウの読み込みが完了したとき呼ばれる
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyUiListener.menuCloseClick">
            <summary>
            閉じるメニューが押されたとき呼ばれる
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyUiListener.windowStateChanged">
            <summary>
            ウィンドウの表示状態(最小化/通常)が変わったとき呼ばれる
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyUiListener.locationOrSizeChanged">
            <summary>
            ウィンドウの位置またはサイズが変わったとき呼ばれる
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyUiListener.formClosing">
            <summary>
            ウィンドウが閉じようとしているとき呼ばれる
            </summary>
        </member>
        <member name="M:cadencii.FormSequenceConfig.getPreMeasure">
            <summary>
            プリメジャーの設定値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormSequenceConfig.setPreMeasure(System.Int32)">
            <summary>
            プリメジャーの設定値を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.FormSequenceConfig.getSampleRate">
            <summary>
            サンプリングレートの設定値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormSequenceConfig.setSampleRate(System.Int32)">
            <summary>
            サンプリングレートの設定値を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:cadencii.FormSequenceConfig.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormSequenceConfig.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormSequenceConfig.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.MARGIN">
            <summary>
            プレビューの各グラフにおいて，上下に追加するマージンの高さ(ピクセル)
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.MIN_DELTA">
            <summary>
            折れ線の描画時に，描画するかどうかを決める閾値
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.mPreviousWidth">
            <summary>
            前回サイズ変更時の，フォームの幅
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.mPreviousHeight">
            <summary>
            前回サイズ変更時の，フォームの高さ
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.mHandles">
            <summary>
            AppManager.editorConfig.AutoVibratoCustomからコピーしてきた，
            ビブラートハンドルのリスト
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.mSelected">
            <summary>
            選択状態のビブラートハンドル
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.mDrawerRate">
            <summary>
            Rateカーブを描画するのに使う描画器
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.mDrawerDepth">
            <summary>
            Depthカーブを描画するのに使う描画器
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.mDrawerResulting">
            <summary>
            結果として得られるピッチベンドカーブを描画するのに使う描画器
            </summary>
        </member>
        <member name="M:cadencii.FormVibratoPreset.#ctor(cadencii.java.util.Vector{cadencii.vsq.VibratoHandle})">
            <summary>
            コンストラクタ．
            </summary>
            <param name="handles"></param>
        </member>
        <member name="M:cadencii.FormVibratoPreset.getResult">
            <summary>
            ダイアログによる設定結果を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormVibratoPreset.registerEventHandlers">
            <summary>
            イベントハンドラを登録します
            </summary>
        </member>
        <member name="M:cadencii.FormVibratoPreset.repaintPictures">
            <summary>
            Rate, Depth, Resulting pitchの各グラフを強制描画します
            </summary>
        </member>
        <member name="M:cadencii.FormVibratoPreset.drawVibratoCurve(cadencii.vsq.VibratoBPList,System.Int32,cadencii.LineGraphDrawer,System.Int32,System.Int32)">
            <summary>
            ビブラートのRateまたはDepthカーブを指定したサイズで描画します
            </summary>
            <param name="list">描画するカーブ</param>
            <param name="start_value"></param>
            <param name="drawer"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:cadencii.FormVibratoPreset.getDrawerRate">
            <summary>
            Rateカーブを描画するのに使う描画器を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormVibratoPreset.getDrawerDepth">
            <summary>
            Depthカーブを描画するのに使う描画器を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormVibratoPreset.getDrawerResulting">
            <summary>
            結果として得られるピッチベンドカーブを描画するのに使う描画器を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormVibratoPreset.updateStatus">
            <summary>
            画面の表示状態を更新します
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoPreset.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormVibratoPreset.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormVibratoPreset.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.setTitle(System.String)">
            <summary>
            ウィンドウのタイトル文字列を設定します
            </summary>
            <param name="value">設定する文字列</param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.setDialogResult(System.Boolean)">
            <summary>
            ダイアログの戻り値を設定します．
            </summary>
            <param name="value">ダイアログの戻り値を「キャンセル」にする場合はfalseを，それ以外はtreuを設定します．</param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.setSize(System.Int32,System.Int32)">
            <summary>
            TODO: comment
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.getWidth">
            <summary>
            ウィンドウの幅を取得します
            </summary>
            <returns>ウィンドウの幅(単位はピクセル)</returns>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.getHeight">
            <summary>
            ウィンドウの高さを取得します
            </summary>
            <returns>ウィンドウの高さ(単位はピクセル)</returns>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.setLocation(System.Int32,System.Int32)">
            <summary>
            ウィンドウの位置を設定します
            </summary>
            <param name="x">ウィンドウのx座標</param>
            <param name="y">ウィンドウのy座標</param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.close">
            <summary>
            ウィンドウを閉じます
            </summary>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesGetSelectedRow">
            <summary>
            TODO: comment
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesGetItemCountRow">
            <summary>
            リストに登録されたアイテムの個数を取得します
            </summary>
            <returns>アイテムの個数</returns>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesClear">
            <summary>
            TODO: comment
            </summary>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesGetItemAt(System.Int32)">
            <summary>
            TODO: comment
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesIsRowChecked(System.Int32)">
            <summary>
            TODO:
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesSetItemAt(System.Int32,System.String)">
            <summary>
            TODO:
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesSetRowChecked(System.Int32,System.Boolean)">
            <summary>
            TODO:
            </summary>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesSetSelectedRow(System.Int32)">
            <summary>
            TODO:
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesClearSelection">
            <summary>
            TODO: comment
            </summary>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.listDictionariesAddRow(System.String,System.Boolean)">
            <summary>
            TODO: comment
            </summary>
            <param name="value"></param>
            <param name="selected"></param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.labelAvailableDictionariesSetText(System.String)">
            <summary>
            「利用可能な辞書」という意味の説明文の文字列を設定します．
            </summary>
            <param name="value">設定する文字列</param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.buttonOkSetText(System.String)">
            <summary>
            OKボタンの表示文字列を設定します．
            </summary>
            <param name="value">設定する文字列</param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.buttonCancelSetText(System.String)">
            <summary>
            Cancelボタンの表示文字列を設定します．
            </summary>
            <param name="value">設定する文字列</param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.buttonUpSetText(System.String)">
            <summary>
            Upボタンの表示文字列を設定します．
            </summary>
            <param name="value">設定する文字列</param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUi.buttonDownSetText(System.String)">
            <summary>
            Downボタンの表示文字列を設定します．
            </summary>
            <param name="value">設定する文字列</param>
        </member>
        <member name="T:cadencii.WorkerState">
            <summary>
            FormWorkerに登録されている1個のジョブについての状態を表現します
            </summary>
        </member>
        <member name="M:cadencii.WorkerState.reportProgress(System.Double)">
            <summary>
            workerスレッドから呼び出し元に進捗を通知します
            </summary>
            <param name="processed_job">ジョブの処理済み量</param>
        </member>
        <member name="M:cadencii.WorkerState.reportComplete">
            <summary>
            workerスレッドから呼び出し元に，workerスレッドの処理が完了したことを通知します
            </summary>
        </member>
        <member name="M:cadencii.WorkerState.isCancelRequested">
            <summary>
            workerスレッドが，キャンセル要求の有無を呼び出し元に問い合せるためのメソッド
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WorkerState.requestCancel">
            <summary>
            呼び出し元が，workerスレッドにキャンセル要求を出すためのメソッド
            </summary>
        </member>
        <member name="M:cadencii.WorkerState.getProcessedAmount">
            <summary>
            ジョブの現在の処理量を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WorkerState.getJobAmount">
            <summary>
            ジョブの総処理量を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.FormWorker">
            <summary>
            複数のジョブを順に実行し，その進捗状況を表示するダイアログを表示します
            </summary>
        </member>
        <member name="M:cadencii.FormWorker.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cadencii.FormWorker.startJob">
            <summary>
            登録済みのジョブを開始します
            </summary>
        </member>
        <member name="M:cadencii.FormWorker.setupUi(cadencii.FormWorkerUi)">
            <summary>
            ビューのセットアップを行います
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.FormWorker.addJob(System.Object,System.String,System.String,System.Double,System.Object)">
            <summary>
            ジョブを追加します．objで指定したオブジェクトの，名前がnameであるメソッドを呼び出します．
            当該メソッドは，戻り値は任意，引数は( WorkerState, Object )である必要があります．
            また，当該メソッドは第一引数で渡されたWorkerStateのインスタンスのisCancelRequestedメソッドを
            監視し，その戻り値がtrueの場合速やかに処理を中止しなければなりません．その際，処理の中止後にreportCompleteの呼び出しを
            行ってはいけません．
            </summary>
            <param name="obj">メソッドの呼び出し元となるオブジェクト</param>
            <param name="method_name">メソッドの名前</param>
            <param name="job_description">ジョブの概要</param>
            <param name="job_amount">ジョブの処理量を表す，何らかの量．</param>
            <param name="argument">メソッドの第二引数</param>
        </member>
        <member name="M:cadencii.FormWorker.cancelJobSlot">
            <summary>
            ジョブをキャンセルします(非同期)
            </summary>
        </member>
        <member name="M:cadencii.FormWorker.getUi">
            <summary>
            ビューのインスタンスを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.IImageCachedComponentDrawer">
            <summary>
            ImageCachedComponentDrawerを使って描画するコンポーネントが実装しておかなければならないインターフェース
            </summary>
        </member>
        <member name="M:cadencii.IImageCachedComponentDrawer.draw(cadencii.java.awt.Graphics2D,System.Int32,System.Int32)">
            <summary>
            指定したサイズの範囲にコンポーネントを描画します
            </summary>
            <param name="g">描画に用いるグラフィックス</param>
            <param name="width">描画幅</param>
            <param name="height">描画高さ</param>
        </member>
        <member name="T:cadencii.ImageCachedComponentDrawer">
            <summary>
            高さが一定で，横方向に長く，横方向にスクロールして使用するタイプで，描画ループが重いコンポーネントを，比較的高速に描画します．
            </summary>
        </member>
        <member name="F:cadencii.ImageCachedComponentDrawer.WIDTH">
            <summary>
            1個の画像キャッシュの幅(単位はピクセル)
            </summary>
        </member>
        <member name="F:cadencii.ImageCachedComponentDrawer.mWidth">
            <summary>
            コンポーネントの総幅(単位はピクセル)
            </summary>
        </member>
        <member name="F:cadencii.ImageCachedComponentDrawer.mHeight">
            <summary>
            コンポーネントの高さ(単位はピクセル)
            </summary>
        </member>
        <member name="F:cadencii.ImageCachedComponentDrawer.mCache">
            <summary>
            コンポーネント画像のキャッシュ
            </summary>
        </member>
        <member name="M:cadencii.ImageCachedComponentDrawer.#ctor(System.Int32,System.Int32)">
            <summary>
            コンストラクタ
            初期のコンポーネントサイズを指定します。ここで指定した高さは変更できません。幅は後から変更可能です。
            </summary>
            <param name="width">コンポーネントの幅(単位はピクセル)</param>
            <param name="height">コンポーネントの高さ(単位はピクセル)</param>
        </member>
        <member name="M:cadencii.ImageCachedComponentDrawer.getWidth">
            <summary>
            コンポーネント画像の総横幅を取得します
            </summary>
            <returns>コンポーネント画像の総幅(単位はピクセル)</returns>
        </member>
        <member name="M:cadencii.ImageCachedComponentDrawer.setWidth(System.Int32)">
            <summary>
            コンポーネント画像の総横幅を設定します
            </summary>
            <param name="width">新しく設定する横幅(単位はピクセル)</param>
        </member>
        <member name="M:cadencii.ImageCachedComponentDrawer.draw(System.Int32,cadencii.java.awt.Graphics)">
            <summary>
            キャッシュされたコンポーネント画像を、指定したグラフィックスを使って描画します。
            </summary>
            <param name="x_offset">画像の左方向のシフト量(単位はピクセル)</param>
            <param name="g">描画対象のグラフィックス</param>
        </member>
        <member name="M:cadencii.ImageCachedComponentDrawer.updateCache(cadencii.IImageCachedComponentDrawer)">
            <summary>
            コンポーネント画像のキャッシュを再描画します
            </summary>
            <param name="component">再描画に使用するコンポーネント</param>
        </member>
        <member name="T:cadencii.ItemSelectionModel">
            <summary>
            アイテムの選択状態を管理するクラスです．
            </summary>
        </member>
        <member name="F:cadencii.ItemSelectionModel.mBezier">
            <summary>
            選択されているベジエ点のリスト
            </summary>
        </member>
        <member name="F:cadencii.ItemSelectionModel.mSelectedBezier">
            <summary>
            最後に選択されたベジエ点
            </summary>
        </member>
        <member name="F:cadencii.ItemSelectionModel.mTimesig">
            <summary>
            選択されている拍子変更イベントのリスト
            </summary>
        </member>
        <member name="F:cadencii.ItemSelectionModel.mTempo">
            <summary>
            選択されているテンポ変更イベントのリスト
            </summary>
        </member>
        <member name="F:cadencii.ItemSelectionModel.mEvents">
            <summary>
            選択されているイベントのリスト
            </summary>
        </member>
        <member name="F:cadencii.ItemSelectionModel.mPointCurveType">
            <summary>
            selectedPointIDsに格納されているデータ点の，CurveType
            </summary>
        </member>
        <member name="M:cadencii.ItemSelectionModel.getBezierIterator">
            <summary>
            選択されているベジエ曲線のデータ点を順に返す反復子を取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.ItemSelectionModel.getLastBezier">
            <summary>
            最後に選択状態となったベジエ曲線のデータ点を取得します。
            </summary>
            <returns>最後に選択状態となったベジエ曲線のデータ点を返します。選択状態となっているベジエ曲線がなければnullを返します。</returns>
        </member>
        <member name="M:cadencii.ItemSelectionModel.addBezier(cadencii.SelectedBezierPoint)">
            <summary>
            指定されたベジエ曲線のデータ点を選択状態にします。
            </summary>
            <param name="selected">選択状態にするデータ点。</param>
        </member>
        <member name="M:cadencii.ItemSelectionModel.clearBezier">
            <summary>
            すべてのベジエ曲線のデータ点の選択状態を解除します。
            </summary>
        </member>
        <member name="M:cadencii.ItemSelectionModel.getLastTimesig">
            <summary>
            最後に選択状態となった拍子変更設定を取得します。
            </summary>
            <returns>最後に選択状態となった拍子変更設定を返します。選択状態となっている拍子変更設定が無ければnullを返します。</returns>
        </member>
        <member name="M:cadencii.ItemSelectionModel.updateSelectedEventInstance">
            <summary>
            選択中のアイテムが編集された場合、編集にあわせてオブジェクトを更新する。
            </summary>
        </member>
        <member name="M:cadencii.ItemSelectionModel.checkSelectedItemExistence">
            <summary>
            現在選択されたアイテムが存在するかどうかを調べ，必要であればSelectedEventChangedイベントを発生させます
            </summary>
        </member>
        <member name="M:cadencii.ItemSelectionModel.invokeSelectedEventChangedEvent(System.Boolean)">
            <summary>
            SelectedEventChangedEventを発生させます．
            </summary>
            <param name="ret"></param>
        </member>
        <member name="E:cadencii.ItemSelectionModel.SelectedEventChanged">
            <summary>
            選択状態のアイテムが変化した時発生するイベント
            </summary>
        </member>
        <member name="T:cadencii.LineGraphDrawer">
            <summary>
            折れ線グラフを効率よく描く描画プラクシー。データ点描画の有無、グラフの塗りつぶしの有無を選べる
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.TYPE_STEP">
            <summary>
            描画する際、ステップ状のグラフを描きます
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.TYPE_LINEAR">
            <summary>
            描画する際、データ点を単に結んだだけのグラフを描きます
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.DOT_RECT">
            <summary>
            データ点を四角で描きます
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.DOT_CIRCLE">
            <summary>
            データ点を丸で描きます
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.DOTMODE_NO">
            <summary>
            データ点を描かないモード
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.DOTMODE_ALWAYS">
            <summary>
            データ点を常に描くモード
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.DOTMODE_NEAR">
            <summary>
            データ点がマウスと近い場合にのみ描くモード
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.NEAR_THRESHOLD">
            <summary>
            マウスに「近い」と判定する距離（ピクセル単位）
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.INV_NEAR_THRESHOLD">
            <summary>
            <see cref="F:cadencii.LineGraphDrawer.NEAR_THRESHOLD"/>の逆数
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mBaseLineY">
            <summary>
            X軸の描画位置
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mPoints">
            <summary>
            データ点のバッファ
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mMaxPoints">
            <summary>
            自動flushを行う時のmIndexの値。
            mIndex + 1 >= mMaxPointsの時、自動でflushが行われる
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mGraphType">
            <summary>
            グラフのタイプ。<see cref="F:cadencii.LineGraphDrawer.TYPE_LINEAR"/>または<see cref="!:TYPE_CIRCLE"/>のどちらか
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mFirst">
            <summary>
            flushの後、一度もappendされていない時にtrue。
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mFirstX">
            <summary>
            flushの後、最初にappendされてきたデータ点のx座標の値
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mGraphics">
            <summary>
            描画に使用するグラフィックス
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mFill">
            <summary>
            グラフの線とX軸との間隙を塗りつぶすかどうか
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mFillColor">
            <summary>
            グラフの線とX軸との間隙の塗りつぶしに使用する色
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mFillBrush">
            <summary>
            グラフの線とX軸との間隙の塗りつぶしに使用するブラシ
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mDot">
            <summary>
            データ点を描画するかどうか
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mDotSize">
            <summary>
            データ点の描画サイズ。
            mDotTypeがDOT_CIRCLEの場合は半径、DOT_RECTの場合は一辺の長さの半分の値を指定します
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mDotWidth">
            <summary>
            データ点の描画サイズ。mDotSizeに従属で、mDotSize変更時に自動的に計算される
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mDotType">
            <summary>
            データ点の描画タイプ。
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mDotColor">
            <summary>
            データ点の描画色
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mDotBrush">
            <summary>
            データ点の塗りつぶしに使用するブラシ
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mLineColor">
            <summary>
            線の描画色
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mLine">
            <summary>
            線を描画するかどうか
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mLineWidth">
            <summary>
            線の描画幅
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mLinePen">
            <summary>
            線の描画に使用するペン
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mIndex">
            <summary>
            次のappendでデータ点の座標を代入するmPointsのインデックス
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mLastX">
            <summary>
            前回appendされてきたデータ点のX座標
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mLastY">
            <summary>
            前回appendされてきたデータ点のY座標
            </summary>
        </member>
        <member name="F:cadencii.LineGraphDrawer.mMouseX">
            <summary>
            現在のマウスのX座標
            </summary>
        </member>
        <member name="M:cadencii.LineGraphDrawer.#ctor(System.Int32)">
            <summary>
            コンストラクタ。グラフのタイプを指定します
            </summary>
            <param name="graph_type">グラフのタイプを指定する整数値。<see cref="F:cadencii.LineGraphDrawer.TYPE_LINEAR"/>または<see cref="F:cadencii.LineGraphDrawer.TYPE_STEP"/>を指定する</param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setLineWidth(System.Int32)">
            <summary>
            グラフの線の幅を設定します．単位はピクセルです
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.getLineWidth">
            <summary>
            グラフの線の幅を取得します．単位はピクセルです
            </summary>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setMouseX(System.Int32)">
            <summary>
            マウスのX座標を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setLineColor(cadencii.java.awt.Color)">
            <summary>
            グラフの線の描画色を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.getLineColor">
            <summary>
            グラフの線の描画色を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setDrawLine(System.Boolean)">
            <summary>
            線を描画するかどうかを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.isDrawLine">
            <summary>
            線を描画するかどうかを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setDotColor(cadencii.java.awt.Color)">
            <summary>
            データ点の描画色を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.getDotColor">
            <summary>
            データ点の描画色を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setFill(System.Boolean)">
            <summary>
            グラフの線とX軸の間を塗りつぶすかどうかを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.isFill">
            <summary>
            グラフの線とX軸の間を塗りつぶすかどうかを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setFillColor(cadencii.java.awt.Color)">
            <summary>
            グラフの線とX軸の間を塗りつぶす場合の色を設定します
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.getFillColor">
            <summary>
            グラフの線とX軸の間を塗りつぶす場合の色を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setDotSize(System.Int32)">
            <summary>
            データ点の描画サイズを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.getDotSize">
            <summary>
            データ点の描画サイズを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setDotType(System.Int32)">
            <summary>
            データ点の描画タイプを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.getDotType">
            <summary>
            データ点の描画タイプを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setDotMode(System.Int32)">
            <summary>
            データ点の描画モードを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.getDotMode">
            <summary>
            データ点の描画モードを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LineGraphDrawer.append(System.Int32,System.Int32)">
            <summary>
            データ点を追加します。必要があれば、flushメソッドが自動で呼ばれます
            </summary>
            <param name="x">データ点のX座標</param>
            <param name="y">データ点のY座標</param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.flush">
            <summary>
            現在のデータ点のバッファの描画を行います
            </summary>
        </member>
        <member name="M:cadencii.LineGraphDrawer.clear">
            <summary>
            データ点のバッファをクリアします
            </summary>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setGraphics(cadencii.java.awt.Graphics)">
            <summary>
            描画に使用するグラフィックスを指定します
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.setBaseLineY(System.Int32)">
            <summary>
            X軸の描画位置を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LineGraphDrawer.getBaseLineY">
            <summary>
            X軸の描画位置を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.PatchWorkQueue">
            <summary>
            合成の範囲やトラック番号を指示するためのクラス
            </summary>
        </member>
        <member name="F:cadencii.PatchWorkQueue.track">
            <summary>
            合成対象のトラック番号
            </summary>
        </member>
        <member name="F:cadencii.PatchWorkQueue.clockStart">
            <summary>
            合成開始位置．単位はclock
            </summary>
        </member>
        <member name="F:cadencii.PatchWorkQueue.clockEnd">
            <summary>
            合成修了位置．単位はclock
            </summary>
        </member>
        <member name="F:cadencii.PatchWorkQueue.file">
            <summary>
            合成結果を出力するファイル名
            </summary>
        </member>
        <member name="F:cadencii.PatchWorkQueue.renderAll">
            <summary>
            トラック全体を合成する場合true，それ以外はfalse
            </summary>
        </member>
        <member name="F:cadencii.PatchWorkQueue.vsq">
            <summary>
            シーケンスのインスタンス
            </summary>
        </member>
        <member name="M:cadencii.PatchWorkQueue.getMessage">
            <summary>
            このキューの概要を記した文字列を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.PictOverview">
            <summary>
            ナビゲーションバーを描画するコンポーネント
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.OVERVIEW_SCROLL_SPEED">
            <summary>
            btnLeft, btnRightを押した時の、スクロール速度(px/sec)。
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewBtnDowned">
            <summary>
            btnLeftまたはbtnRightが下りた時刻
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewStartToDrawClock">
            <summary>
            ミニチュア・ピアノロール画面左端でのクロック
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewPixelPerClock">
            <summary>
            ミニチュア・ピアノロール画面の表示倍率
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewMouseDownMode">
            <summary>
            ミニチュア・ピアノロール画面でマウスが降りている状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewMouseDownedLocationX">
            <summary>
            ミニチュア・ピアノロール画面で、マウスが下りた位置のx座標
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewButtonLeft1MouseDowned">
            <summary>
            ミニチュアピアノロールの左側の第1ボタン上でマウスが下りている状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewButtonLeft2MouseDowned">
            <summary>
            ミニチュアピアノロールの左側の第2ボタン上でマウスが下りている状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewButtonRight1MouseDowned">
            <summary>
            ミニチュアピアノロールの右側の第1ボタン上でマウスが下りている状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewButtonRight2MouseDowned">
            <summary>
            ミニチュアピアノロールの右側の第2ボタン上でマウスが下りている状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewButtonZoomMouseDowned">
            <summary>
            ミニチュアピアノロールの拡大ボタン上でマウスが下りている状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.PictOverview.mOverviewButtonMoozMouseDowned">
            <summary>
            ミニチュアピアノロールの縮小ボタン上でマウスが下りている状態かどうか
            </summary>
        </member>
        <member name="M:cadencii.PictOverview.getButtonBoundsLeft1">
            <summary>
            btnLeft1の描画位置を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictOverview.getButtonBoundsLeft2">
            <summary>
            btnLeft2の描画位置を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictOverview.getButtonBoundsRight1">
            <summary>
            btnRight1の描画位置を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictOverview.getButtonBoundsRight2">
            <summary>
            btnRight2の描画位置を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictOverview.getButtonBoundsZoom">
            <summary>
            Zoomボタンの描画位置を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictOverview.getButtonBoundsMooz">
            <summary>
            Moozボタンの描画位置を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictOverview.getOverviewStartToDrawX(System.Int32)">
            <summary>
            ミニチュア・ピアノロール上のマウスの位置から、ピアノロールに設定するべきStartToDrawXの値を計算します。
            </summary>
            <param name="mouse_x"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictOverview.getStroke2px">
            <summary>
            幅が2ピクセルのストロークを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictOverview.getStrokeDefault">
            <summary>
            デフォルトのストロークを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="F:cadencii.AppManager.MIN_PRE_MEASURE">
            <summary>
            プリメジャーの最小値
            </summary>
        </member>
        <member name="F:cadencii.AppManager.MAX_PRE_MEASURE">
            <summary>
            プリメジャーの最大値
            </summary>
        </member>
        <member name="F:cadencii.AppManager.DYNAFF_ITEM_WIDTH">
            <summary>
            強弱記号の，ピアノロール画面上の表示幅（ピクセル）
            </summary>
        </member>
        <member name="F:cadencii.AppManager.keyOffset">
            <summary>
            keyWidth+keyOffsetの位置からが、0になってる
            </summary>
        </member>
        <member name="F:cadencii.AppManager.keyWidth">
            <summary>
            鍵盤の表示幅(pixel)
            </summary>
        </member>
        <member name="F:cadencii.AppManager.editorConfig">
            <summary>
            エディタの設定
            </summary>
        </member>
        <member name="F:cadencii.AppManager.xmlSerializerListBezierCurves">
            <summary>
            AttachedCurve用のシリアライザ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont8">
            <summary>
            画面描画に使用する共用のフォントオブジェクト
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont9">
            <summary>
            画面描画に使用する共用のフォントオブジェクト
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont10">
            <summary>
            画面描画に使用する共用のフォントオブジェクト
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont10Bold">
            <summary>
            画面描画に使用する共用のフォントオブジェクト
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont50Bold">
            <summary>
            画面描画に使用する共用のフォントオブジェクト
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont10OffsetHeight">
            <summary>
            歌詞を音符の（高さ方向の）真ん中に描画するためのオフセット。
            たとえば，文字列の中心軸がy_centerを通るように描画したい場合は，
            <code>g.drawString( ..., x, y_center - baseFont10OffsetHeight + 1 )</code>
            とすればよい
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont8OffsetHeight">
            <summary>
            歌詞を音符の（高さ方向の）真ん中に描画するためのオフセット。
            たとえば，文字列の中心軸がy_centerを通るように描画したい場合は，
            <code>g.drawString( ..., x, y_center - baseFont8OffsetHeight + 1 )</code>
            とすればよい
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont9OffsetHeight">
            <summary>
            歌詞を音符の（高さ方向の）真ん中に描画するためのオフセット。
            たとえば，文字列の中心軸がy_centerを通るように描画したい場合は，
            <code>g.drawString( ..., x, y_center - baseFont9OffsetHeight + 1 )</code>
            とすればよい
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont50OffsetHeight">
            <summary>
            歌詞を音符の（高さ方向の）真ん中に描画するためのオフセット。
            たとえば，文字列の中心軸がy_centerを通るように描画したい場合は，
            <code>g.drawString( ..., x, y_center - baseFont50OffsetHeight + 1 )</code>
            とすればよい
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont8Height">
            <summary>
            フォントオブジェクトbaseFont8の描画時の高さ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont9Height">
            <summary>
            フォントオブジェクトbaseFont9の描画時の高さ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont10Height">
            <summary>
            フォントオブジェクトbaseFont1-の描画時の高さ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.baseFont50Height">
            <summary>
            フォントオブジェクトbaseFont50の描画時の高さ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.propertyPanel">
            <summary>
            プロパティパネルのインスタンス
            </summary>
        </member>
        <member name="F:cadencii.AppManager.propertyWindow">
            <summary>
            プロパティウィンドウが分離した場合のプロパティウィンドウのインスタンス。
            メインウィンドウとプロパティウィンドウが分離している時、propertyPanelがpropertyWindowの子になる
            </summary>
        </member>
        <member name="F:cadencii.AppManager.iconPalette">
            <summary>
            アイコンパレット・ウィンドウのインスタンス
            </summary>
        </member>
        <member name="F:cadencii.AppManager.clipboard">
            <summary>
            クリップボード管理クラスのインスタンス
            </summary>
        </member>
        <member name="F:cadencii.AppManager.itemSelection">
            <summary>
            選択アイテムの管理クラスのインスタンス
            </summary>
        </member>
        <member name="F:cadencii.AppManager.editHistory">
            <summary>
            編集履歴を管理するmodel
            </summary>
        </member>
        <member name="F:cadencii.AppManager.HILIGHT">
            <summary>
            トラックの背景部分の塗りつぶし色。16トラックそれぞれで異なる
            </summary>
        </member>
        <member name="F:cadencii.AppManager.RENDER">
            <summary>
            トラックをレンダリングするためのボタンの背景色。16トラックそれぞれで異なる
            </summary>
        </member>
        <member name="F:cadencii.AppManager.usingS">
            <summary>
            スクリプトに前置されるusingのリスト
            </summary>
        </member>
        <member name="F:cadencii.AppManager.SHORTCUT_ACCEPTABLE">
            <summary>
            ショートカットキーとして受付可能なキーのリスト
            </summary>
        </member>
        <member name="F:cadencii.AppManager.TEXT_ENCODINGS_IN_UTAU">
            <summary>
            UTAU関連のテキストファイルで受け付けるエンコーディングの種類
            </summary>
        </member>
        <member name="F:cadencii.AppManager.COLOR_BORDER">
            <summary>
            よく使うボーダー線の色
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mWaveGenerator">
            <summary>
            現在稼働しているWaveGenerator．稼働していないときはnull
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mWaveGeneratorState">
            <summary>
            mWaveGeneratorの停止を行うためのコマンダー
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mPreviewThread">
            <summary>
            mWaveGeneratorを動かしているスレッド
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mOverlay">
            <summary>
            トラックのオーバーレイ表示
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mLockerPlayingProperty">
            <summary>
            Playingプロパティにロックをかけるためのオブジェクト
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mWholeSelectedIntervalEnabled">
            <summary>
            SelectedRegionが有効かどうかを表すフラグ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mWholeSelectedInterval">
            <summary>
            Ctrlキーを押しながらのマウスドラッグ操作による選択が行われた範囲(単位：クロック)
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mCurveSelectingRectangle">
            <summary>
            コントロールカーブ上で現在選択されている範囲（x:クロック、y:各コントロールカーブの単位に同じ）。マウスが動いているときのみ使用
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mCurveSelectedInterval">
            <summary>
            コントロールカーブ上で選択された範囲（単位：クロック）
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mCurveSelectedIntervalEnabled">
            <summary>
            選択範囲が有効かどうか。
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mWholeSelectedIntervalStartForMoving">
            <summary>
            範囲選択モードで音符を動かしている最中の、選択範囲の開始位置（クロック）。マウスが動いているときのみ使用
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mAutoNormalize">
            <summary>
            自動ノーマライズモードかどうかを表す値を取得、または設定します。
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mIsCurveMode">
            <summary>
            Bezierカーブ編集モードが有効かどうかを表す
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mAutoScroll">
            <summary>
            再生時に自動スクロールするかどうか
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mPreviewStartedTime">
            <summary>
            プレビュー再生が開始された時刻
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mSelectedPaletteTool">
            <summary>
            現在選択中のパレットアイテムの名前
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mID">
            <summary>
            このCadenciiのID。起動ごとにユニークな値が設定され、一時フォルダのフォルダ名等に使用する
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mShowingDialog">
            <summary>
            ダイアログを表示中かどうか
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mMainWindow">
            <summary>
            メインの編集画面のインスタンス
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mMainWindowController">
            <summary>
            メイン画面のコントローラ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mMixerWindow">
            <summary>
            ミキサーダイアログ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mDrawObjects">
            <summary>
            画面に描かれるエントリのリスト．trackBar.Valueの変更やエントリの編集などのたびに更新される
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mInputTextBox">
            <summary>
            歌詞入力に使用するテキストボックス
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mAddingEvent">
            <summary>
            音符の追加操作における，追加中の音符
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mDrawStartIndex">
            <summary>
            AppManager.m_draw_objectsを描く際の，最初に検索されるインデクス．
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mDrawIsUtau">
            <summary>
            各トラックがUTAUモードかどうか．mDrawObjectsと同じタイミングで更新される
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mIsPointerDowned">
            <summary>
            マウスが降りていて，かつ範囲選択をしているときに立つフラグ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mMouseDownLocation">
            <summary>
            マウスが降りた仮想スクリーン上の座標(ピクセル)
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mUtauVoiceDB">
            <summary>
            UTAUの原音設定のリスト。TreeMapのキーは、oto.iniのあるディレクトリ名になっている。
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mLastRenderedStatus">
            <summary>
            最後にレンダリングが行われた時の、トラックの情報が格納されている。
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mRenderingStatusSerializer">
            <summary>
            RenderingStatusをXMLシリアライズするためのシリアライザ
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mTempWaveDir">
            <summary>
            wavを出力するための一時ディレクトリのパス。
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mForbidFlipPlayingThresholdSeconds">
            <summary>
            再生開始からの経過時刻がこの秒数以下の場合、再生を止めることが禁止される。
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mCurveOnPianoroll">
            <summary>
            ピアノロール画面に，コントロールカーブをオーバーレイしているモード
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mDirectPlayShift">
            <summary>
            直接再生モード時の、再生開始した位置の曲頭からの秒数
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mPreviewEndingClock">
            <summary>
            プレビュー終了位置のクロック
            </summary>
        </member>
        <member name="F:cadencii.AppManager.mDebugLog">
            <summary>
            ログ出力用
            </summary>
        </member>
        <member name="F:cadencii.AppManager.skipDrawingWaveformWhenPlaying">
            <summary>
            再生中にWAVE波形の描画をスキップするかどうか（デフォルトはtrue）
            </summary>
        </member>
        <member name="F:cadencii.AppManager.drawItemBorderInControlCurveView">
            <summary>
            コントロールカーブに、音符の境界線を重ね描きするかどうか（デフォルトはtrue）
            </summary>
        </member>
        <member name="F:cadencii.AppManager.drawCurveDotInControlCurveView">
            <summary>
            コントロールカーブに、データ点を表す四角を描くかどうか（デフォルトはtrue）
            </summary>
        </member>
        <member name="F:cadencii.AppManager.drawOverSynthNameOnPianoroll">
            <summary>
            ピアノロール画面に、現在選択中の歌声合成エンジンの種類を描くかどうか
            </summary>
        </member>
        <member name="F:cadencii.AppManager.vibratoLengthEditingRule">
            <summary>
            音符の長さが変更されたとき、ビブラートの長さがどう影響を受けるかを決める因子
            </summary>
        </member>
        <member name="F:cadencii.AppManager.showContextMenuWhenRightClickedOnPianoroll">
            <summary>
            ピアノロール上で右クリックでコンテキストメニューを表示するかどうか
            </summary>
        </member>
        <member name="M:cadencii.AppManager.getWineProxyArgument">
            <summary>
            voacloidrv.shからwineを呼ぶために，ProcessBuilderに渡す
            引数リストの最初の部分を取得します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.previewStart(cadencii.FormMain)">
            <summary>
            プレビュー再生を開始します．
            合成処理などが途中でキャンセルされた場合にtrue，それ以外の場合にfalseを返します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.previewStop">
            <summary>
            プレビュー再生を停止します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.patchWorkToFreeze(cadencii.FormMain,cadencii.java.util.Vector{System.Int32})">
            <summary>
            指定したトラックのレンダリングが必要な部分を再レンダリングし，ツギハギすることでトラックのキャッシュを最新の状態にします．
            レンダリングが途中でキャンセルされた場合にtrue，そうでない場合にfalseを返します．
            </summary>
            <param name="tracks"></param>
        </member>
        <member name="M:cadencii.AppManager.patchWorkCreateQueue(cadencii.java.util.Vector{System.Int32})">
            <summary>
            指定したトラックについて，再合成が必要な範囲を抽出し，それらのリストを作成します
            </summary>
            <param name="tracks">リストを作成するトラック番号の一覧</param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.checkSerializedEvents(cadencii.EditedZone,cadencii.vsq.VsqTrack,cadencii.vsq.TempoVector,cadencii.EditedZoneUnit[])">
            <summary>
            指定されたトラックにあるイベントの内、配列areasで指定されたゲートタイム範囲とオーバーラップしているか、
            または連続している音符を抽出し、その範囲をzoneに追加します。
            </summary>
            <param name="zone"></param>
            <param name="vsq_track"></param>
            <param name="tempo_vector"></param>
            <param name="areas"></param>
        </member>
        <member name="M:cadencii.AppManager.isGeneratorRunning">
            <summary>
            波形生成器が実行中かどうかを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.stopGenerator">
            <summary>
            波形生成器を停止します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.setGenerator(cadencii.WaveGenerator)">
            <summary>
            波形生成器を設定します
            </summary>
            <param name="generator"></param>
        </member>
        <member name="M:cadencii.AppManager.runGenerator(System.Int64)">
            <summary>
            波形生成器を別スレッドで実行します
            </summary>
            <param name="samples">合成するサンプル数．波形合成器のbeginメソッドに渡される</param>
        </member>
        <member name="M:cadencii.AppManager.yCoordFromNote(System.Single)">
            <summary>
            音の高さを表すnoteから、画面に描くべきy座標を計算します
            </summary>
            <param name="note"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.yCoordFromNote(System.Single,System.Int32)">
            <summary>
            音の高さを表すnoteから、画面に描くべきy座標を計算します
            </summary>
            <param name="note"></param>
            <param name="start_to_draw_y"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.noteFromYCoord(System.Int32)">
            <summary>
            ピアノロール画面のy座標から、その位置における音の高さを取得します
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.noteFromYCoordDoublePrecision(System.Int32)">
            <summary>
            ピアノロール画面のy座標から、その位置における音の高さを取得します
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.getSingerListFromRendererKind(cadencii.RendererKind)">
            <summary>
            指定した音声合成システムが使用する歌手のリストを取得します
            </summary>
            <param name="kind">音声合成システムの種類</param>
            <returns>歌手のリスト</returns>
        </member>
        <member name="M:cadencii.AppManager.applyUtauParameter(cadencii.vsq.VsqTrack,cadencii.vsq.VsqEvent)">
            <summary>
            指定したトラックの，指定した音符イベントについて，UTAUのパラメータを適用します
            </summary>
            <param name="vsq_track"></param>
            <param name="item"></param>
        </member>
        <member name="M:cadencii.AppManager.deserializeRenderingStatus(System.String,System.Int32)">
            <summary>
            指定したディレクトリにある合成ステータスのxmlデータを読み込みます
            </summary>
            <param name="directory">読み込むxmlが保存されたディレクトリ</param>
            <param name="track">読み込みを行うトラックの番号</param>
        </member>
        <member name="M:cadencii.AppManager.serializeRenderingStatus(System.String,System.Int32)">
            <summary>
            指定したトラックの合成ステータスを，指定したxmlファイルに保存します．
            </summary>
            <param name="temppath"></param>
            <param name="track"></param>
        </member>
        <member name="M:cadencii.AppManager.xCoordFromClocks(System.Double)">
            <summary>
            クロック数から、画面に描くべきx座標の値を取得します。
            </summary>
            <param name="clocks"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.xCoordFromClocks(System.Double,System.Single,System.Int32)">
            <summary>
            クロック数から、画面に描くべきx座標の値を取得します。
            </summary>
            <param name="clocks"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.clockFromXCoord(System.Int32)">
            <summary>
            画面のx座標からクロック数を取得します
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.showModalDialog(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
            ダイアログを，メインウィンドウに対してモーダルに表示し，ダイアログの結果を取得します
            </summary>
            <param name="dialog"></param>
            <param name="main_form"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.showModalDialog(cadencii.UiBase,System.Windows.Forms.Form)">
            <summary>
            ダイアログを，メインウィンドウに対してモーダルに表示し，ダイアログの結果を取得します
            </summary>
            <param name="dialog"></param>
            <param name="main_form"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.showModalDialog(System.Windows.Forms.FolderBrowserDialog,System.Windows.Forms.Form)">
            <summary>
            ダイアログを，メインウィンドウに対してモーダルに表示し，ダイアログの結果を取得します
            </summary>
            <param name="dialog"></param>
            <param name="main_form"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.showModalDialog(System.Windows.Forms.FileDialog,System.Boolean,System.Windows.Forms.Form)">
            <summary>
            ダイアログを，メインウィンドウに対してモーダルに表示し，ダイアログの結果を取得します
            </summary>
            <param name="dialog"></param>
            <param name="open_mode"></param>
            <param name="main_form"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.isShowingDialog">
            <summary>
            beginShowDialogが呼ばれた後，endShowDialogがまだ呼ばれていないときにtrue
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.beginShowDialog">
            <summary>
            モーダルなダイアログを出すために，プロパティウィンドウとミキサーウィンドウの「最前面に表示」設定を一時的にOFFにします
            </summary>
        </member>
        <member name="M:cadencii.AppManager.endShowDialog">
            <summary>
            beginShowDialogで一時的にOFFにした「最前面に表示」設定を元に戻します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.getID">
            <summary>
            FormMainを識別するID
            </summary>
        </member>
        <member name="M:cadencii.AppManager._(System.String)">
            <summary>
            gettext
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.setTempWaveDir(System.String)">
            <summary>
            音声ファイルのキャッシュディレクトリのパスを設定します。
            このメソッドでは、キャッシュディレクトリの変更に伴う他の処理は実行されません。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.AppManager.getTempWaveDir">
            <summary>
            音声ファイルのキャッシュディレクトリのパスを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.getCadenciiTempDir">
            <summary>
            Cadenciiが使用する一時ディレクトリのパスを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.isCurveMode">
            <summary>
            ベジエ曲線を編集するモードかどうかを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.setCurveMode(System.Boolean)">
            <summary>
            ベジエ曲線を編集するモードかどうかを設定します。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.AppManager.undo">
            <summary>
            アンドゥ処理を行います。
            </summary>
        </member>
        <member name="M:cadencii.AppManager.redo">
            <summary>
            リドゥ処理を行います。
            </summary>
        </member>
        <member name="M:cadencii.AppManager.cleanupDeadSelection(cadencii.java.util.Vector{cadencii.ValuePair{System.Int32,System.Int32}})">
            <summary>
            「選択されている」と登録されているオブジェクトのうち、Undo, Redoなどによって存在しなくなったものを登録解除する
            </summary>
        </member>
        <member name="M:cadencii.AppManager.getSelectedTool">
            <summary>
            現在選択されているツールを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.setSelectedTool(cadencii.EditTool)">
            <summary>
            現在選択されているツールを設定します。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.AppManager.getEditMode">
            <summary>
            現在の編集モードを取得します．
            </summary>
        </member>
        <member name="M:cadencii.AppManager.setEditMode(cadencii.EditMode)">
            <summary>
            現在の編集モードを設定します．
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.AppManager.isGridVisible">
            <summary>
            グリッドを表示するか否かを表す値を取得します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.setGridVisible(System.Boolean)">
            <summary>
            グリッドを表示するか否かを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.AppManager.isRepeatMode">
            <summary>
            現在のプレビューがリピートモードであるかどうかを表す値を取得します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.setRepeatMode(System.Boolean)">
            <summary>
            現在のプレビューがリピートモードかどうかを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.AppManager.isPlaying">
            <summary>
            現在プレビュー中かどうかを示す値を取得します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.setPlaying(System.Boolean,cadencii.FormMain)">
            <summary>
            プレビュー再生中かどうかを設定します．このプロパティーを切り替えることで，再生の開始と停止を行います．
            </summary>
            <param name="value"></param>
            <param name="form"></param>
        </member>
        <member name="M:cadencii.AppManager.getFileName">
            <summary>
            _vsq_fileにセットされたvsqファイルの名前を取得します。
            </summary>
        </member>
        <member name="M:cadencii.AppManager.getCurrentClock">
            <summary>
            現在の演奏マーカーの位置を取得します。
            </summary>
        </member>
        <member name="M:cadencii.AppManager.setCurrentClock(System.Int32)">
            <summary>
            現在の演奏マーカーの位置を設定します。
            </summary>
        </member>
        <member name="M:cadencii.AppManager.getSelected">
            <summary>
            現在選択されているトラックを取得または設定します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.readVsq(System.String)">
            <summary>
            xvsqファイルを読込みます．キャッシュディレクトリの更新は行われません
            </summary>
            <param name="file"></param>
            <returns>ファイルの読み込みに成功した場合にtrueを，それ以外の場合はfalseを返します</returns>
        </member>
        <member name="M:cadencii.AppManager.getVsqFile">
            <summary>
            vsqファイル。
            </summary>
        </member>
        <member name="M:cadencii.AppManager.reloadUtauVoiceDB">
            <summary>
            utauVoiceDBフィールドのリストを一度クリアし，
            editorConfig.Utausingersの情報を元に最新の情報に更新します
            </summary>
        </member>
        <member name="M:cadencii.AppManager.getPositionQuantizeClock">
            <summary>
            位置クオンタイズ時の音符の最小単位を、クロック数に換算したものを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.getLengthQuantizeClock">
            <summary>
            音符長さクオンタイズ時の音符の最小単位を、クロック数に換算したものを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.saveConfig">
            <summary>
            現在の設定を設定ファイルに書き込みます。
            </summary>
        </member>
        <member name="M:cadencii.AppManager.loadConfig">
            <summary>
            設定ファイルを読み込みます。
            設定ファイルが壊れていたり存在しない場合、デフォルトの設定が使われます。
            </summary>
        </member>
        <member name="M:cadencii.AppManager.getSingerInfoAquesTone(System.Int32)">
            <summary>
            TODO: 廃止する。AquesToneDriver から取得するようにする
            </summary>
            <param name="program_change"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.getAlertColor">
            <summary>
            ピアノロール上の音符の警告色を取得します．
            音抜けの可能性がある音符の背景色として利用されます
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.AppManager.getAlertHilightColor">
            <summary>
            ピアノロール上の音符の警告色を取得します．
            音抜けの可能性のある音符であって，かつ現在選択されている音符の背景色として利用されます．
            </summary>
            <returns></returns>
        </member>
        <member name="E:cadencii.AppManager.GridVisibleChanged">
            <summary>
            メイン画面で、グリッド表示のOn/Offが切り替わった時発生するイベント
            </summary>
        </member>
        <member name="E:cadencii.AppManager.PreviewStarted">
            <summary>
            プレビュー再生が開始された時発生するイベント
            </summary>
        </member>
        <member name="E:cadencii.AppManager.PreviewAborted">
            <summary>
            プレビュー再生が終了した時発生するイベント
            </summary>
        </member>
        <member name="E:cadencii.AppManager.SelectedToolChanged">
            <summary>
            編集ツールが変化した時発生するイベント
            </summary>
        </member>
        <member name="E:cadencii.AppManager.UpdateBgmStatusRequired">
            <summary>
            BGMに何らかの変更があった時発生するイベント
            </summary>
        </member>
        <member name="E:cadencii.AppManager.MainWindowFocusRequired">
            <summary>
            メインウィンドウにフォーカスを当てる要求があった時発生するイベント
            </summary>
        </member>
        <member name="E:cadencii.AppManager.EditedStateChanged">
            <summary>
            編集されたかどうかを表す値に変更が要求されたときに発生するイベント
            </summary>
        </member>
        <member name="E:cadencii.AppManager.WaveViewReloadRequired">
            <summary>
            波形ビューのリロードが要求されたとき発生するイベント．
            GeneralEventArgsの引数は，トラック番号,waveファイル名,開始時刻(秒),終了時刻(秒)が格納されたObject[]配列
            開始時刻＞終了時刻の場合は，partialではなく全体のリロード要求
            </summary>
        </member>
        <member name="T:cadencii.PluginLoader">
            <summary>
            プラグインファイルを読み込み、コンパイルするクラス
            </summary>
        </member>
        <member name="F:cadencii.PluginLoader.usedAssemblyChache">
            <summary>
            使用中のアセンブリ・キャッシュのフルパス
            </summary>
        </member>
        <member name="M:cadencii.PluginLoader.isValidCachedAssembly(System.Reflection.Assembly)">
            <summary>
            キャシュから読み込んだアセンブリが、このバージョンの Cadencii で使えるかどうかを調べる
            </summary>
            <param name="assembly">対象のアセンブリ</param>
            <returns>使えるようであれば true</returns>
        </member>
        <member name="M:cadencii.PluginLoader.cleanupUnusedAssemblyCache">
            <summary>
            使用されていないアセンブリのキャッシュを削除します
            </summary>
        </member>
        <member name="M:cadencii.PluginLoader.loadScript(System.String)">
            <summary>
            指定されたファイルを読み込んでスクリプトをコンパイルします．
            </summary>
            <param name="file">スクリプトを発動するのに使用するコンテナを返します．</param>
            <returns></returns>
        </member>
        <member name="M:cadencii.PluginLoader.estimateVersionByCode(System.String)">
            <summary>
            プラグインのソースコード文面から、プラグインのバージョンを推定する
            </summary>
            <param name="code">プラグインのソースコード</param>
            <returns>推定されたプラグインのバージョン</returns>
        </member>
        <member name="M:cadencii.PluginLoader.createPluginCode(System.String)">
            <summary>
            ファイルから読み込んだプラグインのソースコードに適切な prefix, suffix コードを挿入したソースコードを作成する
            </summary>
            <param name="code">ファイルから読み込んだプラグインのソースコード</param>
            <returns>加工済みのソースコード</returns>
        </member>
        <member name="T:cadencii.PluginVersion">
            <summary>
            プラグインインターフェースのバージョン
            </summary>
        </member>
        <member name="T:cadencii.ProgressBarWithLabel">
            <summary>
            実行内容を表示するためのラベル付きのプログレスバー
            </summary>
        </member>
        <member name="M:cadencii.ProgressBarWithLabel.setupUi(cadencii.ProgressBarWithLabelUi)">
            <summary>
            UIのセットアップを行います
            </summary>
            <param name="ui"></param>
        </member>
        <member name="M:cadencii.ProgressBarWithLabel.getUi">
            <summary>
            セットアップされているUIを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.ProgressBarWithLabel.setText(System.String)">
            <summary>
            ラベルのテキストを設定します
            </summary>
            <param name="value">設定するテキスト</param>
        </member>
        <member name="M:cadencii.ProgressBarWithLabel.getText">
            <summary>
            ラベルのテキストを取得します
            </summary>
            <returns>ラベルのテキスト</returns>
        </member>
        <member name="M:cadencii.ProgressBarWithLabel.setProgress(System.Int32)">
            <summary>
            進捗状況をパーセントで設定します
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:cadencii.ProgressBarWithLabel.getProgress">
            <summary>
            進捗状況を表すパーセンテージを取得します
            </summary>
            <returns>進捗状況を表すパーセント値</returns>
        </member>
        <member name="T:cadencii.PureVirtualFunctionAttribute">
            <summary>
            メソッドが純粋仮想関数であることをpp_cs2javaに通知するための属性です．
            通知したいメソッドの直前の行にこの属性を記述してください．
            </summary>
            <example>
            C#のコードに以下のように記述したとします．
            <code>
            interface Foo{
                [PureVirtualFunction]
                void someMethod();
            }
            </code>
            すると，pp_cs2javaに--replace-cppオプションを付けて処理させると次のようになります．
            <code>
            interface Foo{
                virtual void someMethod() = 0;
            }
            </code>
            </example>
        </member>
        <member name="F:cadencii.SequenceConfig.WaveFileOutputChannel">
            <summary>
            waveファイル出力時のチャンネル数（1または2）
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.SequenceConfig.WaveFileOutputFromMasterTrack">
            <summary>
            waveファイル出力時に、全トラックをmixして出力するかどうか
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.SequenceConfig.StartMarker">
            <summary>
            スタートマーカーの位置(clock)
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.SequenceConfig.StartMarkerEnabled">
            <summary>
            スタートマーカーが有効かどうか
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.SequenceConfig.EndMarker">
            <summary>
            エンドマーカーの位置(clock)
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.SequenceConfig.EndMarkerEnabled">
            <summary>
            エンドマーカーが有効かどうか
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.ExceptionNotifyFormUiImpl.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormUiImpl.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.ExceptionNotifyFormUiImpl.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:cadencii.FormAskKeySoundGenerationUiImpl.setMessageLabelText(System.String)">
            <summary>
            メッセージの文字列を設定します．
            </summary>
            <param name="value">設定する文字列．</param>
        </member>
        <member name="M:cadencii.FormAskKeySoundGenerationUiImpl.close(System.Boolean)">
            <summary>
            フォームを閉じます．
            valueがtrueのときダイアログの結果をCancelに，それ以外の場合はOKとなるようにします．
            </summary>
        </member>
        <member name="F:cadencii.FormBeatConfigUiImpl.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormBeatConfigUiImpl.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormBeatConfigUiImpl.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormBezierPointEditUiImpl.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormBezierPointEditUiImpl.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormBezierPointEditUiImpl.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormNotePropertyUiImpl.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyUiImpl.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormNotePropertyUiImpl.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormWordDictionaryUiImpl.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormWordDictionaryUiImpl.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormWordDictionaryUiImpl.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormWorkerUi.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormWorkerUi.close(System.Boolean)">
            <summary>
            フォームを閉じます．
            valueがtrueのときダイアログの結果をCancelに，それ以外の場合はOKとなるようにします．
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.FormWorkerUi.close">
            <summary>
            フォームを閉じます
            </summary>
        </member>
        <member name="M:cadencii.FormWorkerUi.setTotalProgress(System.Int32)">
            <summary>
            全体の進捗状況の表示を更新します．
            </summary>
            <param name="percentage"></param>
        </member>
        <member name="M:cadencii.FormWorkerUi.removeProgressBar(cadencii.ProgressBarWithLabelUi)">
            <summary>
            追加されたプログレスバーをこのフォームから削除します
            </summary>
            <param name="ui"></param>
        </member>
        <member name="M:cadencii.FormWorkerUi.addProgressBar(cadencii.ProgressBarWithLabelUi)">
            <summary>
            プログレスバーをこのフォームに追加します．
            </summary>
            <param name="ui"></param>
        </member>
        <member name="M:cadencii.FormWorkerUi.setTitle(System.String)">
            <summary>
            フォームのタイトルを設定します
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:cadencii.FormWorkerUi.setText(System.String)">
            <summary>
            フォームのメッセージテキストを設定します
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:cadencii.FormWorkerUi.showDialogTo(cadencii.FormMain)">
            <summary>
            このフォームを指定したウィンドウに対してモーダルに表示します．
            フォームがキャンセルされた場合true，そうでない場合はfalseを返します
            </summary>
            <param name="main_window"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormWorkerUi.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormWorkerUi.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.ProgressBarWithLabelUi.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.ProgressBarWithLabelUi.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.ProgressBarWithLabelUi.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:cadencii.WaveformZoomUiImpl">
            <summary>
            波形表示の拡大・縮小を行うためのパネルです．
            </summary>
        </member>
        <member name="F:cadencii.WaveformZoomUiImpl.mListener">
            <summary>
            このビューのController
            </summary>
        </member>
        <member name="F:cadencii.ui.main._boutform.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:cadencii.ui.main._boutform.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:cadencii.ui.main._boutform.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:cadencii.FormMain">
            <summary>
            エディタのメイン画面クラス
            </summary>
        </member>
        <member name="F:cadencii.FormMain.MIN_BAR_ACTUAL_LENGTH">
            <summary>
            スクロールバーの最小サイズ(ピクセル)
            </summary>
        </member>
        <member name="F:cadencii.FormMain._EDIT_HANDLE_WIDTH">
            <summary>
            エントリの端を移動する時の、ハンドル許容範囲の幅
            </summary>
        </member>
        <member name="F:cadencii.FormMain._WAIT_LIMIT">
            <summary>
            単音プレビュー時に、wave生成完了を待つ最大の秒数
            </summary>
        </member>
        <member name="F:cadencii.FormMain._PX_ACCENT_HEADER">
            <summary>
            表情線の先頭部分のピクセル幅
            </summary>
        </member>
        <member name="F:cadencii.FormMain._SPL2_PANEL2_MIN_HEIGHT">
            <summary>
            splitContainer2.Panel2の最小サイズ
            </summary>
        </member>
        <member name="F:cadencii.FormMain._SPL_SPLITTER_WIDTH">
            <summary>
            splitContainer*で使用するSplitterWidthプロパティの値
            </summary>
        </member>
        <member name="F:cadencii.FormMain._OVERVIEW_HEIGHT">
            <summary>
            Overviewペインの高さ
            </summary>
        </member>
        <member name="F:cadencii.FormMain._PROPERTY_DOCK_MIN_WIDTH">
            <summary>
            splitContainerPropertyの最小幅
            </summary>
        </member>
        <member name="F:cadencii.FormMain.MAX_WAVE_MSEC_RESOLUTION">
            <summary>
            WAVE再生時のバッファーサイズの最大値
            </summary>
        </member>
        <member name="F:cadencii.FormMain.MIN_WAVE_MSEC_RESOLUTION">
            <summary>
            WAVE再生時のバッファーサイズの最小値
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mColorNoteFill">
            <summary>
            ピアノロールでの，音符の塗りつぶし色
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mIsRefreshing">
            <summary>
            refreshScreenが呼ばれている最中かどうか
            </summary>
        </member>
        <member name="F:cadencii.FormMain.s_modifier_key">
            <summary>
            CTRLキー。MacOSXの場合はMenu
            </summary>
        </member>
        <member name="F:cadencii.FormMain.controller">
            <summary>
            コントローラ
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mButtonInitial">
            <summary>
            ボタンがDownされた位置。(座標はpictureBox基準)
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mMiddleButtonVScroll">
            <summary>
            真ん中ボタンがダウンされたときのvscrollのvalue値
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mMiddleButtonHScroll">
            <summary>
            真ん中ボタンがダウンされたときのhscrollのvalue値
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mLastScreenRefreshedSec">
            <summary>
            最後にメイン画面が更新された時刻(秒単位)
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mEditCurveMode">
            <summary>
            カーブエディタの編集モード
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mContextMenuOpenedPosition">
            <summary>
            ピアノロールの右クリックが表示される直前のマウスの位置
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mTimerDragLastIgnitted">
            <summary>
            ピアノロールの画面外へのドラッグ時、前回自動スクロール操作を行った時刻
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mExtDragX">
            <summary>
            画面外への自動スクロールモード
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mMouseMoveInit">
            <summary>
            EditMode=MoveEntryで，移動を開始する直前のマウスの仮想スクリーン上の位置
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mMouseMoveOffset">
            <summary>
            EditMode=MoveEntryで，移動を開始する直前のマウスの位置と，音符の先頭との距離(ピクセル)
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mMouseDowned">
            <summary>
            マウスが降りているかどうかを表すフラグ．AppManager.isPointerDownedとは別なので注意
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mPencilMode">
            <summary>
            鉛筆のモード
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mVibratoEditingId">
            <summary>
            ビブラート範囲を編集中の音符のInternalID
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mFormActivated">
            <summary>
            このフォームがアクティブ化されているかどうか
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mLastEventProcessed">
            <summary>
            前回ゲームコントローラのイベントを処理した時刻
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mPositionIndicatorMouseDownMode">
            <summary>
            PositionIndicatorのマウスモード
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mKeyLengthSplitterMouseDowned">
            <summary>
            AppManager.keyWidthを調節するモードに入ったかどうか
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mKeyLengthSplitterInitialMouse">
            <summary>
            AppManager.keyWidthを調節するモードに入る直前での、マウスのスクリーン座標
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mKeyLengthInitValue">
            <summary>
            AppManager.keyWidthを調節するモードに入る直前での、keyWidthの値
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mKeyLengthTrackSelectorRowsPerColumn">
            <summary>
            AppManager.keyWidthを調節するモードに入る直前での、trackSelectorのgetRowsPerColumn()の値
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mKeyLengthSplitterDistance">
            <summary>
            AppManager.keyWidthを調節するモードに入る直前での、splitContainer1のSplitterLocationの値
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mIconPaletteOnceDragEntered">
            <summary>
            アイコンパレットのドラッグ＆ドロップ処理中，一度でもpictPianoRoll内にマウスが入ったかどうか
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mMtcLastReceived">
            <summary>
            MTCを最後に受信した時刻
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mSpecialShortcutHolders">
            <summary>
            特殊な取り扱いが必要なショートカットのキー列と、対応するメニューアイテムを保存しておくリスト。
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mDialogImportLyric">
            <summary>
            歌詞流し込み用のダイアログ
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mStrokeDefault">
            <summary>
            デフォルトのストローク
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mStroke2px">
            <summary>
            描画幅2pxのストローク
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mGraphicsPictureBox2">
            <summary>
            pictureBox2の描画ループで使うグラフィックス
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mPianoRollScaleYMouseStatus">
            <summary>
            ピアノロールの縦方向の拡大率を変更するパネル上でのマウスの状態。
            0がデフォルト、&gt;0は+ボタンにマウスが降りた状態、&lt;0は-ボタンにマウスが降りた状態
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mLastClock">
            <summary>
            再生中にソングポジションが前進だけしてほしいので，逆行を防ぐために前回のソングポジションを覚えておく
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mPositionIndicatorPopupShownClock">
            <summary>
            PositionIndicatorに表示しているポップアップのクロック位置
            </summary>
        </member>
        <member name="F:cadencii.FormMain.renderer_menu_handler_">
            <summary>
            合成器の種類のメニュー項目を管理するハンドラをまとめたリスト
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mFpsDrawTime">
            <summary>
            パフォーマンスカウンタ
            </summary>
        </member>
        <member name="F:cadencii.FormMain.mFps">
            <summary>
            パフォーマンスカウンタから算出される画面の更新速度
            </summary>
        </member>
        <member name="M:cadencii.FormMain.#ctor(cadencii.FormMainController,System.String)">
            <summary>
            コンストラクタ
            </summary>
            <param name="file">最初に開くxvsq，vsqファイルのパス</param>
        </member>
        <member name="M:cadencii.FormMain.initializeRendererMenuHandler">
            <summary>
            renderer_menu_handler_ を初期化する
            </summary>
        </member>
        <member name="M:cadencii.FormMain.checkUnknownResamplerAndSinger(cadencii.ByRef{System.String},cadencii.ByRef{System.String})">
            <summary>
            指定した歌手とリサンプラーについて，設定値に登録されていないものだったら登録する．
            </summary>
            <param name="resampler_path"></param>
            <param name="singer_path"></param>
        </member>
        <member name="M:cadencii.FormMain.zoomY(System.Int32)">
            <summary>
            ピアノロールの縦軸の拡大率をdelta段階上げます
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:cadencii.FormMain.getScaleXFromTrackBarValue(System.Int32)">
            <summary>
            ズームスライダの現在の値から，横方向の拡大率を計算します
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.updateVibratoPresetMenu">
            <summary>
            ユーザー定義のビブラートのプリセット関係のメニューの表示状態を更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.updateNoteLengthStepSequencer">
            <summary>
            MIDIステップ入力中に，ソングポジションが動いたときの処理を行います
            AppManager.mAddingEventが非nullの時，音符の先頭は決まっているので，
            ソングポジションと，音符の先頭との距離から音符の長さを算出し，更新する
            AppManager.mAddingEventがnullの時は何もしない
            </summary>
        </member>
        <member name="M:cadencii.FormMain.fixAddingEvent">
            <summary>
            現在追加しようとしている音符の内容(AppManager.mAddingEvent)をfixします
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.saveToolbarLocation">
            <summary>
            現在のツールバーの場所を保存します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.saveToolbarLocationCore(System.Collections.Generic.List{cadencii.windows.forms.RebarBand},cadencii.windows.forms.RebarBand,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            ツールバーの位置の順に並べ替えたリストの中の一つのツールバーに対して，その状態を検出して保存
            </summary>
            <param name="list"></param>
            <param name="band"></param>
            <param name="band_size"></param>
            <param name="new_row"></param>
        </member>
        <member name="M:cadencii.FormMain.getStrokeDefault">
            <summary>
            デフォルトのストロークを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.getStroke2px">
            <summary>
            描画幅が2pxのストロークを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.lengthenSelectedEvent(System.Int32)">
            <summary>
            選択された音符の長さを、指定したゲートタイム分長くします。
            </summary>
            <param name="delta_length"></param>
        </member>
        <member name="M:cadencii.FormMain.moveUpDownLeftRight(System.Int32,System.Int32)">
            <summary>
            選択された音符の音程とゲートタイムを、指定されたノートナンバーおよびゲートタイム分上下させます。
            </summary>
            <param name="delta_note"></param>
            <param name="delta_clock"></param>
        </member>
        <member name="M:cadencii.FormMain.getItemAtClickedPosition(cadencii.java.awt.Point,cadencii.ByRef{cadencii.java.awt.Rectangle})">
            <summary>
            マウス位置におけるIDを返します。該当するIDが無ければnullを返します
            rectには、該当するIDがあればその画面上での形状を、該当するIDがなければ、
            画面上で最も近かったIDの画面上での形状を返します
            </summary>
            <param name="mouse_position"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.computeVScrollValueForMiddleDrag(System.Int32)">
            <summary>
            真ん中ボタンで画面を移動させるときの、vScrollの値を計算します。
            計算には、mButtonInitial, mMiddleButtonVScrollの値が使われます。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.computeHScrollValueForMiddleDrag(System.Int32)">
            <summary>
            真ん中ボタンで画面を移動させるときの、hScrollの値を計算します。
            計算には、mButtonInitial, mMiddleButtonHScrollの値が使われます。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.calculateVScrollValueFromStartToDrawY(System.Int32)">
            <summary>
            仮想スクリーン上でみた時の，現在のピアノロール画面の上端のy座標が指定した値とするための，vScrollの値を計算します
            calculateStartToDrawYの逆関数です
            </summary>
        </member>
        <member name="M:cadencii.FormMain.calculateStartToDrawY(System.Int32)">
            <summary>
            現在表示されているピアノロール画面の右上の、仮想スクリーン上座標で見たときのy座標(pixel)を取得します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.downloadUpdateInfo">
            <summary>
            Downloads update information xml, and deserialize it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.showUpdateInformationAsync(System.Boolean)">
            <summary>
            Show update information async.
            </summary>
        </member>
        <member name="M:cadencii.FormMain.getDefaultShortcutKeys">
            <summary>
            デフォルトのショートカットキーを格納したリストを取得します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.isMouseMiddleButtonDowned(System.Windows.Forms.MouseButtons)">
            <summary>
            マウスの真ん中ボタンが押されたかどうかを調べます。
            スペースキー+左ボタンで真ん中ボタンとみなすかどうか、というオプションも考慮される。
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:cadencii.FormMain.refreshScreen(System.Boolean)" -->
        <member name="M:cadencii.FormMain.updateGameControlerStatus(System.Object,System.EventArgs)">
            <summary>
            現在のゲームコントローラのモードに応じてstripLblGameCtrlModeの表示状態を更新します。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.selectBackward">
            <summary>
            現在選択されている音符よりも1個前方の音符を選択しなおします。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.selectForward">
            <summary>
            現在選択されている音符よりも1個後方の音符を選択しなおします。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.searchMenuItemFromName(System.String,cadencii.ByRef{System.Object})">
            <summary>
            メインメニュー項目の中から，Nameプロパティがnameであるものを検索します．見つからなければnullを返す．
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.searchMenuItemRecurse(System.String,System.Object,cadencii.ByRef{System.Object})">
            <summary>
            指定されたメニューアイテムから，Nameプロパティがnameであるものを再帰的に検索します．見つからなければnullを返す
            </summary>
            <param name="name"></param>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.getFormPreferedLocation(System.Int32,System.Int32)">
            <summary>
            フォームをマウス位置に出す場合に推奨されるフォーム位置を計算します
            </summary>
            <param name="dlg"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.getFormPreferedLocation(System.Windows.Forms.Form)">
            <summary>
            フォームをマウス位置に出す場合に推奨されるフォーム位置を計算します
            </summary>
            <param name="dlg"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.updatePaletteTool">
            <summary>
            Palette Toolの表示を更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.clearExistingData">
            <summary>
            現在の編集データを全て破棄する。DirtyCheckは行われない。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.dirtyCheck">
            <summary>
            保存されていない編集内容があるかどうかチェックし、必要なら確認ダイアログを出す。
            </summary>
            <returns>保存されていない保存内容などない場合、または、保存する必要がある場合で（保存しなくてよいと指定された場合または保存が行われた場合）にtrueを返す</returns>
        </member>
        <member name="M:cadencii.FormMain.updateSplitContainer2Size(System.Boolean)">
            <summary>
            AppManager.editorConfig.ViewWaveformの値をもとに、splitterContainer2の表示状態を更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.getWindowMinimumSize">
            <summary>
            ウィンドウの表示内容に応じて、ウィンドウサイズの最小値を計算します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.executeLyricChangeCommand">
            <summary>
            現在のAppManager.mInputTextBoxの状態を元に、歌詞の変更を反映させるコマンドを実行します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.removeGameControler">
            <summary>
            識別済みのゲームコントローラを取り外します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.loadGameControler">
            <summary>
            PCに接続されているゲームコントローラを識別・接続します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.reloadMidiIn">
            <summary>
            MIDI入力句デバイスを再読込みします
            </summary>
        </member>
        <member name="M:cadencii.FormMain.updateScriptShortcut">
            <summary>
            スクリプトフォルダ中のスクリプトへのショートカットを作成する
            </summary>
        </member>
        <member name="M:cadencii.FormMain.ensureVisibleY(System.Int32)">
            <summary>
            指定したノートナンバーが可視状態となるよう、縦スクロールバーを移動させます。
            </summary>
            <param name="note"></param>
        </member>
        <member name="M:cadencii.FormMain.ensureVisible(System.Int32)">
            <summary>
            指定したゲートタイムがピアノロール上で可視状態となるよう、横スクロールバーを移動させます。
            </summary>
            <param name="clock"></param>
        </member>
        <member name="M:cadencii.FormMain.ensureCursorVisible">
            <summary>
            プレイカーソルが見えるようスクロールする
            </summary>
        </member>
        <member name="M:cadencii.FormMain.processSpecialShortcutKey(System.Windows.Forms.KeyEventArgs,System.Boolean)">
            <summary>
            特殊なショートカットキーを処理します。
            </summary>
            <param name="e"></param>
            <param name="onPreviewKeyDown">PreviewKeyDownイベントから送信されてきた場合、true（送る側が設定する）</param>
        </member>
        <member name="M:cadencii.FormMain.flipControlCurveVisible(System.Boolean)">
            <summary>
            コントロールトラックの表示・非表示状態を更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.flipMixerDialogVisible(System.Boolean)">
            <summary>
            ミキサーダイアログの表示・非表示状態を更新します
            </summary>
            <param name="visible">表示状態にする場合true，そうでなければfalse</param>
        </member>
        <member name="M:cadencii.FormMain.flipIconPaletteVisible(System.Boolean)">
            <summary>
            アイコンパレットの表示・非表示状態を更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.applyShortcut">
            <summary>
            メニューのショートカットキーを、AppManager.EditorConfig.ShorcutKeysの内容に応じて変更します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.applyMenuItemShortcut(cadencii.java.util.TreeMap{System.String,System.Windows.Forms.Keys[]},System.Object,System.String)">
            <summary>
            dictの中から
            </summary>
            <param name="dict"></param>
            <param name="item"></param>
            <param name="item_name"></param>
            <param name="default_shortcut"></param>
        </member>
        <member name="M:cadencii.FormMain.forward">
            <summary>
            ソングポジションを1小節進めます
            </summary>
        </member>
        <member name="M:cadencii.FormMain.rewind">
            <summary>
            ソングポジションを1小節戻します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.updateCMenuPianoFixed">
            <summary>
            cMenuPianoの固定長音符入力の各メニューのチェック状態をm_pencil_modeを元に更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.playPreviewSound(System.Int32)">
            <summary>
            鍵盤音キャッシュの中から指定したノートナンバーの音源を捜し、再生します。
            </summary>
            <param name="note">再生する音の高さを指定するノートナンバー</param>
        </member>
        <member name="M:cadencii.FormMain.applyLanguage">
            <summary>
            このコンポーネントの表示言語を、現在の言語設定に従って更新します。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.importLyric">
            <summary>
            歌詞の流し込みダイアログを開き，選択された音符を起点に歌詞を流し込みます
            </summary>
        </member>
        <member name="M:cadencii.FormMain.editNoteVibratoProperty">
            <summary>
            選択されている音符のビブラートを編集するためのダイアログを起動し、編集を行います。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.editNoteExpressionProperty">
            <summary>
            選択されている音符の表情を編集するためのダイアログを起動し、編集を行います。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.computeScrollValueFromWheelDelta(System.Int32)">
            <summary>
            マウスのスクロールによって受け取ったスクロール幅から、実際に縦スクロールバーに渡す値(候補値)を計算します。
            </summary>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.copyEvent">
            <summary>
            アイテムのコピーを行います
            </summary>
        </member>
        <member name="M:cadencii.FormMain.copyTrackCore">
            <summary>
            トラック全体のコピーを行います。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.changeTrackNameCore">
            <summary>
            トラックの名前変更を行います。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.deleteTrackCore">
            <summary>
            トラックの削除を行います。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.addTrackCore">
            <summary>
            トラックの追加を行います。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.applyQuantizeMode">
            <summary>
            length, positionの各Quantizeモードに応じて、
            関連する全てのメニュー・コンテキストメニューの表示状態を更新します。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.applySelectedTool">
            <summary>
            現在選択されている編集ツールに応じて、メニューのチェック状態を更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.updateDrawObjectList">
            <summary>
            描画すべきオブジェクトのリスト，AppManager.drawObjectsを更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.updateRecentFileMenu">
            <summary>
            editorConfigのRecentFilesを元に，menuFileRecentのドロップダウンアイテムを更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.isEdited">
            <summary>
            最後に保存したときから変更されているかどうかを取得または設定します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.showInputTextBox(System.String,System.String,cadencii.java.awt.Point,System.Boolean)">
            <summary>
            入力用のテキストボックスを初期化します
            </summary>
        </member>
        <member name="M:cadencii.FormMain.flipInputTextBoxMode">
            <summary>
            歌詞入力用テキストボックスのモード（歌詞/発音記号）を切り替えます
            </summary>
        </member>
        <member name="M:cadencii.FormMain.undo">
            <summary>
            アンドゥ処理を行います
            </summary>
        </member>
        <member name="M:cadencii.FormMain.redo">
            <summary>
            リドゥ処理を行います
            </summary>
        </member>
        <member name="M:cadencii.FormMain.openVsqCor(System.String)">
            <summary>
            xvsqファイルを開きます
            </summary>
            <returns>ファイルを開くのに成功した場合trueを，それ以外はfalseを返します</returns>
        </member>
        <member name="M:cadencii.FormMain.picturePositionIndicatorDrawTo(cadencii.java.awt.Graphics)">
            <summary>
            Some random code that is required to make this software work
            </summary>
            <param name="g1"></param>
        </member>
        <member name="M:cadencii.FormMain.registerEventHandlers">
            <summary>
            イベントハンドラを登録します。
            </summary>
        </member>
        <member name="M:cadencii.FormMain.pictPianoRoll_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            ピアノロールからマウスボタンが離れたときの処理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:cadencii.FormMain.handleDragOver(System.Int32,System.Int32)">
            <summary>
            アイテムがドラッグされている最中の処理を行います
            </summary>
        </member>
        <member name="M:cadencii.FormMain.handleDragDrop(cadencii.vsq.IconDynamicsHandle,System.Int32,System.Int32)">
            <summary>
            ピアノロールにドロップされたIconDynamicsHandleの受け入れ処理を行います
            </summary>
        </member>
        <member name="M:cadencii.FormMain.handleDragEnter">
            <summary>
            ドラッグの開始処理を行います
            </summary>
        </member>
        <member name="M:cadencii.FormMain.handleFormClosing">
            <summary>
            ウィンドウが閉じようとしているときの処理を行う
            戻り値がtrueの場合，ウィンドウが閉じるのをキャンセルする処理が必要
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.menuLyricApplyUtauParameters_Click(System.Object,System.EventArgs)">
            <summary>
            現在表示しているトラックの，選択状態の音符イベントについて，それぞれのイベントの
            時刻でのUTAU歌手に応じて，UTAUの各種パラメータを原音設定のものにリセットします
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:cadencii.FormMain.handleMenuMouseEnter(System.Object,System.EventArgs)">
            <summary>
            メニューの説明をステータスバーに表示するための共通のイベントハンドラ
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:cadencii.FormMain._(System.String)">
            <summary>
            文字列を、現在の言語設定に従って翻訳します。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMain.shiftClockToMatchWith(cadencii.VsqFileEx,cadencii.vsq.VsqFile,System.Double)">
            <summary>
            VsqEvent, VsqBPList, BezierCurvesの全てのクロックを、tempoに格納されているテンポテーブルに
            合致するようにシフトします．ただし，このメソッド内ではtargetのテンポテーブルは変更せず，クロック値だけが変更される．
            </summary>
            <param name="work"></param>
            <param name="tempo"></param>
        </member>
        <member name="M:cadencii.FormMain.getAppropriateDialogLocation(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            スクリーンに対して、ウィンドウの最適な位置を取得する
            </summary>
        </member>
        <member name="M:cadencii.FormMain.normalizeFormLocation(System.Windows.Forms.Form)">
            <summary>
            フォームのタイトルバーが画面内に入るよう、Locationを正規化します
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:cadencii.FormMain.toggleBigMenu">
            <summary>
            ☮ ☮ ☮ Peace out bro! ☮ ☮ ☮
            </summary>
        </member>
        <member name="M:cadencii.FormMain.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormMain.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:cadencii.FormMain.SpecialShortcutHolder">
            <summary>
            特殊なキーの組み合わせのショートカットと、メニューアイテムとの紐付けを保持するクラスです。
            </summary>
        </member>
        <member name="F:cadencii.FormMain.SpecialShortcutHolder.shortcut">
            <summary>
            ショートカットキーを表すKeyStrokeクラスのインスタンス
            </summary>
        </member>
        <member name="F:cadencii.FormMain.SpecialShortcutHolder.menu">
            <summary>
            ショートカットキーとの紐付けを行う相手先のメニューアイテム
            </summary>
        </member>
        <member name="M:cadencii.FormMain.SpecialShortcutHolder.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            ショートカットキーとメニューアイテムを指定したコンストラクタ
            </summary>
            <param name="shortcut">ショートカットキー</param>
            <param name="menu">ショートカットキーとの紐付けを行うメニューアイテム</param>
        </member>
        <member name="T:cadencii.FormMain.DelegateRefreshScreen">
            <summary>
            refreshScreenを呼び出す時に使うデリゲート
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:cadencii.FormMain.CurveEditMode">
            <summary>
            カーブエディタ画面の編集モード
            </summary>
        </member>
        <member name="F:cadencii.FormMain.CurveEditMode.NONE">
            <summary>
            何もしていない
            </summary>
        </member>
        <member name="F:cadencii.FormMain.CurveEditMode.EDIT">
            <summary>
            鉛筆ツールで編集するモード
            </summary>
        </member>
        <member name="F:cadencii.FormMain.CurveEditMode.LINE">
            <summary>
            ラインツールで編集するモード
            </summary>
        </member>
        <member name="F:cadencii.FormMain.CurveEditMode.EDIT_VEL">
            <summary>
            鉛筆ツールでVELを編集するモード
            </summary>
        </member>
        <member name="F:cadencii.FormMain.CurveEditMode.LINE_VEL">
            <summary>
            ラインツールでVELを編集するモード
            </summary>
        </member>
        <member name="F:cadencii.FormMain.CurveEditMode.MIDDLE_DRAG">
            <summary>
            真ん中ボタンでドラッグ中
            </summary>
        </member>
        <member name="T:cadencii.RendererMenuHandler">
            <summary>
            合成器のメニュー項目へのアクションに応答するハンドラ
            </summary>
        </member>
        <member name="M:cadencii.RendererMenuHandler.updateCheckedState(cadencii.RendererKind)">
            <summary>
            現在選択されている合成器を設定する。これにより、メニューのチェック状態が更新される
            </summary>
            <param name="kind">現在選択されている合成器の種類</param>
        </member>
        <member name="M:cadencii.RendererMenuHandler.updateRendererAvailability(cadencii.EditorConfig)">
            <summary>
            合成器が使用可能かどうかを元に、メニューのアイコンを更新する
            </summary>
            <param name="config">エディタの設定情報</param>
        </member>
        <member name="M:cadencii.Preference.isEnableWideCharacterWorkaround">
            <summary>
            UseWideCharacterWorkaroundに対する設定値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Preference.setEnableWideCharacterWorkaround(System.Boolean)">
            <summary>
            UseWideCharacterWorkaroundの設定値を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.Preference.getWinePrefix">
            <summary>
            WINEPREFIXの設定値を取得します
            </summary>
        </member>
        <member name="M:cadencii.Preference.setWinePrefix(System.String)">
            <summary>
            WINEPREFIXの設定値を設定します
            </summary>
        </member>
        <member name="M:cadencii.Preference.getWineTop">
            <summary>
            WINETOPの設定値を取得します
            </summary>
        </member>
        <member name="M:cadencii.Preference.setWineTop(System.String)">
            <summary>
            WINETOPの設定値を設定します
            </summary>
        </member>
        <member name="M:cadencii.Preference.isWineBuiltin">
            <summary>
            Cadencii付属のWineを使うかどうかを表す設定値を取得します
            </summary>
        </member>
        <member name="M:cadencii.Preference.setWineBuiltin(System.Boolean)">
            <summary>
            Cadencii付属のWineを使うかどうかを表す設定値を設定します
            </summary>        
        </member>
        <member name="M:cadencii.Preference.isUseUserDefinedAutoVibratoType">
            <summary>
            自動ビブラートを作成するとき，ユーザー定義タイプのビブラートを利用するかどうか，を表す値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Preference.setUseUserDefinedAutoVibratoType(System.Boolean)">
            <summary>
            自動ビブラートを作成するとき，ユーザー定義タイプのビブラートを利用するかどうか，を表す値を設定します
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Preference.setDefaultSynthesizer(cadencii.RendererKind)">
            <summary>
            デフォルトの音声合成システムを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.Preference.getDefaultSynthesizer">
            <summary>
            デフォルトの音声合成システムを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Preference.getBufferSize">
            <summary>
            バッファーサイズの設定値（単位：ミリ秒）を取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Preference.setBufferSize(System.Int32)">
            <summary>
            バッファーサイズの設定値（単位：ミリ秒）を設定します。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.Preference.isVocaloid1Required">
            <summary>
            VOCALOID1DLLを読み込むかどうかを表すブール値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Preference.setVocaloid1Required(System.Boolean)">
            <summary>
            VOCALOID1DLLを読み込むかどうかを表すブール値を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.Preference.isVocaloid2Required">
            <summary>
            VOCALOID2 DLLを読み込むかどうかを表すブール値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Preference.setVocaloid2Required(System.Boolean)">
            <summary>
            VOCALOID2 DLLを読み込むかどうかを表すブール値を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.Preference.isAquesToneRequired">
            <summary>
            AquesTone DLLを読み込むかどうかを表すブール値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Preference.setAquesToneRequired(System.Boolean)">
            <summary>
            AquesTone DLLを読み込むかどうかを表すブール値を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.Preference.getControlCurveResolution">
            <summary>
            コントロールカーブの時間解像度の設定値を取得します
            </summary>
            <returns>コントロールカーブの時間解像度の設定値</returns>
        </member>
        <member name="M:cadencii.Preference.setControlCurveResolution(cadencii.ClockResolution)">
            <summary>
            コントロールカーブの時間解像度の設定値を設定します
            </summary>
            <param name="value">設定する時間解像度</param>
        </member>
        <member name="M:cadencii.Preference.updateCustomVibrato">
            <summary>
            カスタムビブラートの選択肢の欄を更新します
            </summary>
        </member>
        <member name="M:cadencii.Preference.updateMidiDevice">
            <summary>
            MIDIデバイスの選択肢の欄を更新します
            </summary>
        </member>
        <member name="F:cadencii.Preference.components">
            <summary>
            •K—v‚ÈƒfƒUƒCƒi•Ï”‚Å‚·B
            </summary>
        </member>
        <member name="M:cadencii.Preference.Dispose(System.Boolean)">
            <summary>
            Žg—p’†‚ÌƒŠƒ\[ƒX‚ð‚·‚×‚ÄƒNƒŠ[ƒ“ƒAƒbƒv‚µ‚Ü‚·B
            </summary>
            <param name="disposing">ƒ}ƒl[ƒW ƒŠƒ\[ƒX‚ª”jŠü‚³‚ê‚éê‡ trueA”jŠü‚³‚ê‚È‚¢ê‡‚Í false ‚Å‚·B</param>
        </member>
        <member name="M:cadencii.Preference.InitializeComponent">
            <summary>
            ƒfƒUƒCƒi ƒTƒ|[ƒg‚É•K—v‚Èƒƒ\ƒbƒh‚Å‚·B‚±‚Ìƒƒ\ƒbƒh‚Ì“à—e‚ð
            ƒR[ƒh ƒGƒfƒBƒ^‚Å•ÏX‚µ‚È‚¢‚Å‚­‚¾‚³‚¢B
            </summary>
        </member>
        <member name="T:cadencii.utau.Oto">
            <summary>
            Represents oto.ini information.
            </summary>
        </member>
        <member name="M:cadencii.utau.Oto.#ctor(System.String,System.String)">
            <summary>
            コンストラクタ．
            </summary>
            <param name="oto_ini_file_path"></param>
        </member>
        <member name="M:cadencii.utau.Oto.readOtoIni(System.String,System.String,System.String)">
            <summary>
            原音設定ファイルを読み込みます．
            </summary>
            <param name="oto_ini">原音設定のパス</param>
        </member>
        <member name="M:cadencii.utau.Oto.attachFileNameFromLyric(System.String)">
            <summary>
            指定した歌詞に合致する、エイリアスを考慮した原音設定を取得します
            </summary>
            <param name="lyric"></param>
            <returns></returns>
        </member>
        <member name="T:cadencii.utau.OtoArgs">
            <summary>
            原音設定の引数．
            </summary>
        </member>
        <member name="T:cadencii.utau.PrefixMap">
            <summary>
            Represents prefix.map information.
            </summary>
        </member>
        <member name="T:cadencii.utau.UtauVoiceDB">
            <summary>
            UTAUの原音設定を表すクラス
            </summary>
        </member>
        <member name="M:cadencii.utau.UtauVoiceDB.#ctor(cadencii.vsq.SingerConfig)">
            <summary>
            コンストラクタ．
            </summary>
            <param name="singer_config"></param>
        </member>
        <member name="M:cadencii.utau.UtauVoiceDB.attachFileNameFromLyric(System.String,System.Int32)">
            <summary>
            指定した歌詞に合致する、エイリアスを考慮した原音設定を取得します
            </summary>
            <param name="lyric"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.utau.UtauVoiceDB.getName">
            <summary>
            この原音の名称を取得します．
            </summary>
            <returns>この原音の名称</returns>
        </member>
        <member name="F:cadencii.VConnectRenderingQueue.startSample">
            <summary>
            このキューのレンダリング結果のwavを、曲頭から何フレーム目にmixしたらよいかを表す
            </summary>
        </member>
        <member name="F:cadencii.VConnectRenderingQueue.oto_ini">
            <summary>
            音源のフォルダ
            </summary>
        </member>
        <member name="F:cadencii.VConnectRenderingQueue.abstractSamples">
            <summary>
            このキューのレンダリング結果の、おおよその長さ。正確な長さはレンダリング結果が出るまでは不明。
            </summary>
        </member>
        <member name="F:cadencii.VConnectRenderingQueue.track">
            <summary>
            メタテキストの生成に必要なトラックデータ
            </summary>
        </member>
        <member name="T:cadencii.VersionString">
            <summary>
            メジャー，マイナー，およびメンテナンス番号によるバージョン番号を表すクラス
            </summary>
        </member>
        <member name="F:cadencii.VersionString.major">
            <summary>
            メジャーバージョンを表す
            </summary>
        </member>
        <member name="F:cadencii.VersionString.minor">
            <summary>
            マイナーバージョンを表す
            </summary>
        </member>
        <member name="F:cadencii.VersionString.build">
            <summary>
            メンテナンス番号を表す
            </summary>
        </member>
        <member name="F:cadencii.VersionString.mRawString">
            <summary>
            コンストラクタに渡された文字列のキャッシュ
            </summary>
        </member>
        <member name="M:cadencii.VersionString.#ctor(System.String)">
            <summary>
            「メジャー.マイナー.メンテナンス」の記法に基づく文字列をパースし，新しいインスタンスを作成します
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:cadencii.VersionString.getRawString">
            <summary>
            このインスタンス生成時に渡された文字列を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.VersionString.toString">
            <summary>
            このインスタンスを文字列で表現したものを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.VersionString.compareTo(cadencii.VersionString)">
            <summary>
            このインスタンスと，指定したバージョンを比較します
            </summary>
            <param name="item"></param>
            <returns>このインスタンスの表すバージョンに対して，指定したバージョンが同じであれば0，新しければ正の値，それ以外は負の値を返します</returns>
        </member>
        <member name="T:cadencii.VSTiDllManager">
            <summary>
            VSTiのDLLを管理するクラス
            </summary>
        </member>
        <member name="F:cadencii.VSTiDllManager.MAX_VOCALO_VERSION">
            <summary>
            使用するボカロの最大バージョン．2までリリースされているので今は2
            </summary>
        </member>
        <member name="F:cadencii.VSTiDllManager.WineAquesToneDll">
            <summary>
            Wineでインストールされている（かもしれない）AquesToneのvsti dllのパス．windowsのパス区切り形式で代入すること
            </summary>
        </member>
        <member name="F:cadencii.VSTiDllManager.aquesToneDriver">
            <summary>
            AquesTone VSTi のドライバ
            </summary>
        </member>
        <member name="F:cadencii.VSTiDllManager.aquesTone2Driver">
            <summary>
            AquesTone2 VSTi のドライバ
            </summary>
        </member>
        <member name="M:cadencii.VSTiDllManager.getWaveGenerator(cadencii.RendererKind)">
            <summary>
            指定した合成器の種類に合致する合成器の新しいインスタンスを取得します
            </summary>
            <param name="kind">合成器の種類</param>
            <returns>指定した種類の合成器の新しいインスタンス</returns>
        </member>
        <member name="M:cadencii.VSTiDllManager.getAquesToneDriver">
            <summary>
            初期化した AquesTone ドライバを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.VSTiDllManager.getAquesTone2Driver">
            <summary>
            初期化した AquesTone2 ドライバを取得する
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.AquesTone2Driver">
            <summary>
            AquesTone2 用 VSTi ドライバ
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.BUFLEN">
            <summary>
            バッファ(bufferLeft, bufferRight)の長さ
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.ui">
            <summary>
            プラグインのUI
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.aEffect">
            <summary>
            読込んだdllから作成したVOCALOID2の本体。VOCALOID2への操作はs_aeffect->dispatcherで行う
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.dllHandle">
            <summary>
            読込んだdllのハンドル
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.blockSize">
            <summary>
            波形バッファのサイズ。
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.sampleRate">
            <summary>
            サンプリングレート。VOCALOID2 VSTiは限られたサンプリングレートしか受け付けない。たいてい44100Hzにする
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.bufferLeft">
            <summary>
            左チャンネル用バッファ
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.bufferRight">
            <summary>
            右チャンネル用バッファ
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.buffers">
            <summary>
            左右チャンネルバッファの配列(buffers={bufferLeft, bufferRight})
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.paramDefaults">
            <summary>
            パラメータの，ロード時のデフォルト値
            </summary>
        </member>
        <member name="F:cadencii.VSTiDriverBase.uiWindowRect">
            <summary>
            UIウィンドウのサイズ
            </summary>
        </member>
        <member name="M:cadencii.VSTiDriverBase.getRendererKind">
            <summary>
            このドライバが担当する、合成エンジンの種類を取得する
            </summary>
            <returns>合成エンジンの種類</returns>
        </member>
        <member name="M:cadencii.AquesToneDriverBase.#ctor(System.String)">
            <summary>
            AquesTone VSTi の DLL パスを指定して初期化する
            </summary>
            <param name="dllPath">AquesTone VSTi の DLL パス</param>
        </member>
        <member name="M:cadencii.AquesToneDriverBase.getConfigSectionKey">
            <summary>
            win.ini にて使用されるセクション名を取得する
            </summary>
            <returns>セクション名の文字列。両端の"[", "]"は含めない</returns>
        </member>
        <member name="M:cadencii.AquesToneDriverBase.getKoeConfigKey">
            <summary>
            win.ini にて使用される、Koe ファイルを指定するキー名
            </summary>
            <returns>キー名の文字列</returns>
        </member>
        <member name="M:cadencii.AquesToneDriverBase.getKoeFileContents">
            <summary>
            Koe ファイルに書き込むファイルの中身を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="F:cadencii.AquesTone2Driver.koeFileContents">
            <summary>
            koe ファイルに記録するデータ。1 行ずつのデータの配列となっている
            </summary>
        </member>
        <member name="F:cadencii.AquesTone2Driver.syllableMap">
            <summary>
            AquesTone の音素が、koe ファイルの何行目何カラムに保存されているかを保持したマップ
            キーが音素、値は行インデックス, カラムインデックスを保持した SyllablePosition
            </summary>
        </member>
        <member name="M:cadencii.AquesTone2Driver.#ctor(System.String)">
            <summary>
            AquesTone2 DLL のパスを指定してドライバを初期化する
            </summary>
            <param name="dllPath">AquesTone2 VSTi DLL のパス</param>
        </member>
        <member name="M:cadencii.AquesTone2Driver.getRendererKind">
            <summary>
            合成エンジンの種類を取得する
            </summary>
            <returns>合成エンジンの種類</returns>
        </member>
        <member name="M:cadencii.AquesTone2Driver.createNoteOnEvent(System.Int32,System.Int32,System.String)">
            <summary>
            Note On のための MIDI イベント列を作成する
            </summary>
            <param name="note">ノート番号</param>
            <param name="dynamics">Dynamics</param>
            <param name="phrase">歌詞</param>
            <returns>Note On のための MIDI イベント列</returns>
        </member>
        <member name="M:cadencii.AquesTone2Driver.createSingerEvent(System.Int32)">
            <summary>
            歌手変更のためのイベントを作成する
            </summary>
            <param name="program">プログラムチェンジ</param>
            <returns>イベント</returns>
        </member>
        <member name="M:cadencii.AquesTone2Driver.getSingerConfig(System.Int32)">
            <summary>
            プログラムチェンジの値から、該当する歌手設定を取得する
            </summary>
            <param name="program_change">プログラムチェンジ</param>
            <returns>歌手設定。該当する歌手設定がなければ null を返す</returns>
        </member>
        <member name="P:cadencii.AquesTone2Driver.Singers">
            <summary>
            歌手情報を列挙する
            </summary>
        </member>
        <member name="T:cadencii.AquesTone2Driver.SyllablePosition">
            <summary>
            koe ファイル内での、音素の格納位置を表すクラス
            </summary>
        </member>
        <member name="F:cadencii.AquesTone2Driver.SyllablePosition.lineIndex">
            <summary>
            行番号。0 から始まる
            </summary>
        </member>
        <member name="F:cadencii.AquesTone2Driver.SyllablePosition.columnIndex">
            <summary>
            カラム番号。0 から始まる
            </summary>
        </member>
        <member name="M:cadencii.AquesTone2Driver.SyllablePosition.#ctor(System.Int32,System.Int32)">
            <summary>
            行番号、カラム番号を指定して初期化する
            </summary>
            <param name="lineIndex">行番号</param>
            <param name="columnIndex">カラム番号</param>
        </member>
        <member name="M:cadencii.AquesToneDriver.createNoteOnEvent(System.Int32,System.Int32,System.String)">
            <summary>
            Note On のための MIDI イベント列を作成する
            </summary>
            <param name="note">ノート番号</param>
            <param name="dynamics">Dynamics</param>
            <param name="phrase">歌詞</param>
            <returns>Note On のための MIDI イベント列</returns>
        </member>
        <member name="M:cadencii.AquesToneDriver.createSingerEvent(System.Int32)">
            <summary>
            歌手変更のためのイベントを作成する
            </summary>
            <param name="program">プログラムチェンジ</param>
            <returns>イベント</returns>
        </member>
        <member name="M:cadencii.AquesToneDriver.getSingerConfig(System.Int32)">
            <summary>
            プログラムチェンジの値から、該当する歌手設定を取得する
            </summary>
            <param name="program_change">プログラムチェンジ</param>
            <returns>歌手設定。該当する歌手設定がなければ null を返す</returns>
        </member>
        <member name="P:cadencii.AquesToneDriver.Singers">
            <summary>
            歌手情報を列挙する
            </summary>
        </member>
        <member name="T:cadencii.EventQueueSequence">
            <summary>
            時刻(clock 単位)順に並べ替えられた、MidiEventQueue のリスト。
            各 clock に唯一つの MidiEventQueue が紐づくようになっている
            </summary>
        </member>
        <member name="M:cadencii.EventQueueSequence.get(System.Int32)">
            <summary>
            指定した時刻(clock 単位)での MidiEventQueue を取得する。指定した時刻に MidiEventQueue が
            まだ一つもなければ新たに作成したものをシーケンスに登録した上で、これを返す
            </summary>
            <param name="clock">時刻(clock 単位)</param>
            <returns>指定した時刻での MidiEventQueue</returns>
        </member>
        <member name="M:cadencii.EventQueueSequence.keyIterator">
            <summary>
            MidiEventQueue が登録されている時刻を小さい順に返す反復子を取得する
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.MidiEventQueue">
            <summary>
            ある時刻(clock)に送信すべきイベントを表すクラス
            </summary>
        </member>
        <member name="T:cadencii.ParameterEvent">
            <summary>
            AquesTone VSTi へパラメータの変更要求
            </summary>
        </member>
        <member name="F:cadencii.ParameterEvent.index">
            <summary>
            パラメータの番号
            </summary>
        </member>
        <member name="F:cadencii.ParameterEvent.value">
            <summary>
            値
            </summary>
        </member>
        <member name="T:cadencii.SyllableMatcher">
            <summary>
            AquesTone2 で利用できる音素を、歌詞文字列から検索するクラス
            </summary>
        </member>
        <member name="F:cadencii.SyllableMatcher.map">
            <summary>
            カタカナの音素と、AquesTone2 の音素を紐付けるマップ
            </summary>
        </member>
        <member name="M:cadencii.SyllableMatcher.find(System.String)">
            <summary>
            歌詞文字列から、音素を検索する。見つからなければ空文字列を返す
            </summary>
            <param name="phrase">歌詞文字列</param>
            <returns>AquesTone2 の音素</returns>
        </member>
        <member name="F:cadencii.VocaloidDriver.g_midiPrepared0">
            <summary>
            s_track_events[0]のmidiイベントを受信済みかどうかを表すフラグ
            </summary>
        </member>
        <member name="F:cadencii.VocaloidDriver.g_midiPrepared1">
            <summary>
            s_track_events[1]のmidiイベントを受信済みかどうかを表すフラグ
            </summary>
        </member>
        <member name="F:cadencii.VocaloidDriver.rendering">
            <summary>
            StartRenderingメソッドが回っている最中にtrue
            </summary>
        </member>
        <member name="M:cadencii.VocaloidDriver.msec_from_clock(System.Int32)">
            <summary>
            指定したタイムコードにおける，曲頭から測った時間を調べる
            </summary>
        </member>
        <member name="M:cadencii.VocaloidDriver.startRendering(System.Int64,System.Boolean,System.Int32,cadencii.IWaveIncoming,cadencii.WorkerState)">
            <summary>
            
            </summary>
            <param name="total_samples"></param>
            <param name="mode_infinite"></param>
            <param name="sample_rate"></param>
            <param name="runner">このドライバを駆動しているRenderingRunnerのオブジェクト</param>
            <returns></returns>
        </member>
        <member name="F:cadencii.TempoInfo.Clock">
            <summary>
            テンポが変更される時刻を表すクロック数
            </summary>
        </member>
        <member name="F:cadencii.TempoInfo.Tempo">
            <summary>
            テンポ
            </summary>
        </member>
        <member name="F:cadencii.TempoInfo.TotalSec">
            <summary>
            テンポが変更される時刻
            </summary>
        </member>
        <member name="F:cadencii.WaveformZoomController.SPACE">
            <summary>
            Wave表示部等のボタンと他のコンポーネントの間のスペース
            </summary>
        </member>
        <member name="F:cadencii.WaveformZoomController.mWaveViewButtonZoomMouseDowned">
            <summary>
            波形表示部の拡大ボタン上でマウスが下りた状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.WaveformZoomController.mWaveViewButtonAutoMaximizeMouseDowned">
            <summary>
            波形表示部のAutoMaximizeボタン上でマウスが下りた状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.WaveformZoomController.mWaveViewAutoMaximize">
            <summary>
            波形表示部の縦軸の拡大率を自動最大化するかどうか
            </summary>
        </member>
        <member name="F:cadencii.WaveformZoomController.mWaveViewMouseDownedLocationY">
            <summary>
            波形表示部分のズーム時に，マウスが下りた瞬間のY座標
            </summary>
        </member>
        <member name="F:cadencii.WaveformZoomController.mWaveViewInitScale">
            <summary>
            波形表示部の拡大ボタン上でマウスが下りた瞬間の，波形表示部の縦軸拡大率．
            </summary>
        </member>
        <member name="M:cadencii.WaveformZoomController.getButtonBoundsWaveViewZoom">
            <summary>
            波形表示部のズームボタンの形を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.Matrix2D`1">
            <summary>
            2次元の配列を格納します。XMLシリアライズ用
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:cadencii.DynaffComparisonContext">
            <summary>
            強弱記号を比較するための，比較用コンテキスト
            </summary>
        </member>
        <member name="T:cadencii.IComparisonContext">
            <summary>
            2つのタイムラインを比較するのに必要な機能を実装するためのインターフェース．
            </summary>
        </member>
        <member name="M:cadencii.EditedZone.normalize">
            <summary>
            重複している部分を統合する
            </summary>
        </member>
        <member name="F:cadencii.EditorStatus.renderRequired">
            <summary>
            トラックのレンダリングが必要かどうかを表すフラグ
            </summary>
        </member>
        <member name="F:cadencii.FormCurvePointEdit.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormCurvePointEdit.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormCurvePointEdit.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormGenerateKeySound.m_close_when_finished">
            <summary>
            処理が終わったら自動でフォームを閉じるかどうか。デフォルトではfalse（閉じない）
            </summary>
        </member>
        <member name="M:cadencii.FormIconPalette.getPreviousAlwaysOnTop">
            <summary>
            AlwaysOnTopが強制的にfalseにされる直前の，AlwaysOnTop値を取得します．
            </summary>
        </member>
        <member name="M:cadencii.FormIconPalette.setPreviousAlwaysOnTop(System.Boolean)">
            <summary>
            AlwaysOnTopが強制的にfalseにされる直前の，AlwaysOnTop値を設定しておきます．
            </summary>
        </member>
        <member name="F:cadencii.FormNoteExpressionConfig.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormNoteExpressionConfig.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormNoteExpressionConfig.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormRandomize.lockRequired">
            <summary>
            trueなら、numStartBar, numStartBeat, numEndBar, numEndBeatの値が変更されたときに、イベントハンドラを起動しない
            </summary>
        </member>
        <member name="M:cadencii.FormRandomize.validateNumRange">
            <summary>
            numStartBar, numStartBeat, numEndBar, numEndBeatの値の範囲の妥当性をチェックする
            </summary>
        </member>
        <member name="F:cadencii.FormRandomize.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormRandomize.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormRandomize.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:cadencii.FormSplash">
            <summary>
            起動時に表示されるスプラッシュウィンドウ
            </summary>
        </member>
        <member name="M:cadencii.FormSplash.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cadencii.FormSplash.addIconThreadSafe(System.String,System.String)">
            <summary>
            アイコンパレードの末尾にアイコンを追加します。デリゲートを使用し、スレッド・セーフな処理を行います。
            </summary>
            <param name="path_image"></param>
            <param name="singer_name"></param>
        </member>
        <member name="M:cadencii.FormSplash.addIcon(System.String,System.String)">
            <summary>
            アイコンパレードの末尾にアイコンを追加します
            </summary>
            <param name="path_image">イメージファイルへのパス</param>
            <param name="singer_name">歌手の名前</param>
        </member>
        <member name="M:cadencii.FormSplash.handleMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            このスプラッシュウィンドウに，MouseDownイベントを通知します
            </summary>
            <param name="screen_x"></param>
            <param name="screen_y"></param>
        </member>
        <member name="M:cadencii.FormSplash.handleMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            このスプラッシュウィンドウに，MouseUpイベントを通知します
            </summary>
        </member>
        <member name="M:cadencii.FormSplash.handleMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            このスプラッシュウィンドウに，MouseMoveイベントを通知します
            </summary>
        </member>
        <member name="T:cadencii.FormSplash.AddIconThreadSafeDelegate">
            <summary>
            addIconメソッドを呼び出すときに使うデリゲート
            </summary>
            <param name="path_image"></param>
            <param name="singer_name"></param>
        </member>
        <member name="T:cadencii.IconParader">
            <summary>
            起動時のスプラッシュウィンドウに表示されるアイコンパレードの、1個のアイコンを表現します
            </summary>
        </member>
        <member name="M:cadencii.IconParader.getBrush">
            <summary>
            アイコンの4隅を塗りつぶすためのブラシを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.IconParader.getGraphicsPath">
            <summary>
            角の丸い枠線を表すGraphicsPathを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.IconParader.getRegion">
            <summary>
            角の丸いアイコンの画像領域を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.IconParader.getInvRegion">
            <summary>
            アイコンの画像領域以外の領域(4隅)を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.LyricTextBox">
            <summary>
            歌詞入力用のテキストボックス
            </summary>
        </member>
        <member name="M:cadencii.LyricTextBox.isPhoneticSymbolEditMode">
            <summary>
            発音記号を編集するモードかどうかを表すブール値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LyricTextBox.setPhoneticSymbolEditMode(System.Boolean)">
            <summary>
            発音記号を編集するモードかどうかを表すブール値を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LyricTextBox.getBufferText">
            <summary>
            バッファーテキストを取得します
            (バッファーテキストには，発音記号モードでは歌詞，歌詞モードでは発音記号がそれぞれ格納される)
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.LyricTextBox.setBufferText(System.String)">
            <summary>
            バッファーテキストを設定します
            (バッファーテキストには，発音記号モードでは歌詞，歌詞モードでは発音記号がそれぞれ格納される)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.LyricTextBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            オーバーライド．(Tab)または(Tab+Shift)も入力キーとみなすようオーバーライドされている
            </summary>
            <param name="keyData">キーの値の一つ</param>
            <returns>指定されているキーが入力キーである場合は true．それ以外の場合は false．</returns>
        </member>
        <member name="T:cadencii.MemoryManager">
            <summary>
            アンマネージドなメモリーの確保・解放を行うマネージャです。
            </summary>
        </member>
        <member name="F:cadencii.MemoryManager.mList">
            <summary>
            確保したメモリーへのポインターの一覧
            </summary>
        </member>
        <member name="M:cadencii.MemoryManager.malloc(System.Int32)">
            <summary>
            メモリを確保します
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.MemoryManager.free(System.IntPtr)">
            <summary>
            メモリを開放します
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:cadencii.MemoryManager.dispose">
            <summary>
            このマネージャを使って確保されたメモリーのうち、未解放のものを全て解放します
            </summary>
        </member>
        <member name="M:cadencii.MemoryManager.Finalize">
            <summary>
            デストラクタ。内部でdisposeメソッドを呼びます
            </summary>
        </member>
        <member name="T:cadencii.MouseTracer">
            <summary>
            コントロールカーブの編集時などに，マウスの軌跡をトレースする処理をカプセル化？する
            </summary>
        </member>
        <member name="F:cadencii.MouseTracer.mTrace">
            <summary>
            マウスのトレース。配列の添え字が1進むと、1ピクセル右側
            </summary>
        </member>
        <member name="F:cadencii.MouseTracer.mXAt0">
            <summary>
            mTrace[0]が表してるx座標
            </summary>
        </member>
        <member name="F:cadencii.MouseTracer.mSize">
            <summary>
            mTrace[m_size - 1]までが有効だということを表す
            </summary>
        </member>
        <member name="F:cadencii.MouseTracer.mMouseTraceLastX">
            <summary>
            マウスのトレース時、前回リストに追加されたx座標の値
            </summary>
        </member>
        <member name="F:cadencii.MouseTracer.mMouseTraceLastY">
            <summary>
            マウスのトレース時、前回リストに追加されたy座標の値
            </summary>
        </member>
        <member name="M:cadencii.MouseTracer.iterator">
            <summary>
            軌跡の点を順に返す反復子を取得します．単純にデータ点を返すのではなく，x+1ごとの補間も含めた点が返される点に注意
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.MouseTracer.append(System.Int32,System.Int32)">
            <summary>
            軌跡に点を追加します
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:cadencii.MouseTracer.size">
            <summary>
            現在保持されているデータの個数を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.MouseTracer.clear">
            <summary>
            現在保持されている軌跡を破棄します
            </summary>
        </member>
        <member name="M:cadencii.MouseTracer.appendFirst(System.Int32,System.Int32)">
            <summary>
            現在保持している軌跡を破棄し，新しい点を追加します．
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:cadencii.MouseTracer.firstKey">
            <summary>
            現在登録されている軌跡の左端のX座標を調べます
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.MouseTracer.lastKey">
            <summary>
            現在登録されている軌跡の右端のX座標を調べます
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.MouseTracer.ensureLength(System.Int32)">
            <summary>
            mTraceの長さが指定された長さ以上に変更します
            </summary>
            <param name="new_length"></param>
        </member>
        <member name="P:cadencii.NumberTextBox.Type">
            <summary>
            IDEでのデザイン用
            </summary>
        </member>
        <member name="T:cadencii.PanelState">
            <summary>
            ドッキング可能なパネルの状態を表す列挙型
            </summary>
        </member>
        <member name="F:cadencii.PanelState.Hidden">
            <summary>
            非表示状態
            </summary>
        </member>
        <member name="F:cadencii.PanelState.Window">
            <summary>
            ウィンドウに分離された状態
            </summary>
        </member>
        <member name="F:cadencii.PanelState.Docked">
            <summary>
            ドッキングされた状態
            </summary>
        </member>
        <member name="T:cadencii.PictPianoRoll">
            <summary>
            ピアノロール用のコンポーネント
            </summary>
        </member>
        <member name="F:cadencii.PictPianoRoll.PX_ACCENT_HEADER">
            <summary>
            表情線の先頭部分のピクセル幅
            </summary>
        </member>
        <member name="F:cadencii.PictPianoRoll.mMouseTracer">
            <summary>
            ピアノ上のマウスのトレーサ
            </summary>
        </member>
        <member name="F:cadencii.PictPianoRoll.mStroke2px">
            <summary>
            幅が2ピクセルのストローク
            </summary>
        </member>
        <member name="F:cadencii.PictPianoRoll.mStrokeDefault">
            <summary>
            デフォルトのストローク
            </summary>
        </member>
        <member name="F:cadencii.PictPianoRoll.mStrokeDashed">
            <summary>
            破線を表すストローク
            </summary>
        </member>
        <member name="F:cadencii.PictPianoRoll.mCommonPolylineDrawer">
            <summary>
            共用の折れ線描画プラクシー
            </summary>
        </member>
        <member name="F:cadencii.PictPianoRoll.mMainForm">
            <summary>
            メイン画面への参照
            </summary>
        </member>
        <member name="M:cadencii.PictPianoRoll.setMainForm(cadencii.FormMain)">
            <summary>
            メイン画面への参照を設定します
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:cadencii.PictPianoRoll.getStroke2px">
            <summary>
            幅が2ピクセルのストロークを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictPianoRoll.getStrokeDefault">
            <summary>
            デフォルトのストロークを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictPianoRoll.getStrokeDashed">
            <summary>
            3ドット間隔の破線を表すストロークを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictPianoRoll.getCommonPolylineDrawer(cadencii.java.awt.Graphics2D)">
            <summary>
            折れ線の描画装置を取得します
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.PictPianoRoll.paint(cadencii.java.awt.Graphics)">
            <summary>
            描画ルーチン
            </summary>
            <param name="g1"></param>
        </member>
        <member name="M:cadencii.PictPianoRoll.drawAccentLine(cadencii.java.awt.Graphics,cadencii.java.awt.Point,System.Int32)">
            <summary>
            アクセントを表す表情線を、指定された位置を基準点として描き込みます
            </summary>
            <param name="g"></param>
            <param name="accent"></param>
        </member>
        <member name="M:cadencii.PictPianoRoll.drawVibratoPitchbend(cadencii.apputil.PolylineDrawer,cadencii.vsq.VibratoBPList,System.Int32,cadencii.vsq.VibratoBPList,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="g">描画に使用するグラフィクス</param>
            <param name="rate">Vibrato Rate</param>
            <param name="start_rate">Vibrato Rateの開始値</param>
            <param name="depth">Vibrato Depth</param>
            <param name="start_depth">Vibrato Depthの開始値</param>
            <param name="note">描画する音符のノートナンバー</param>
            <param name="clock_start">ビブラートが始まるクロック位置</param>
            <param name="clock_width">ビブラートのクロック長さ</param>
        </member>
        <member name="T:cadencii.PlatformEnum">
            <summary>
            プラットフォームを表す列挙型．
            （互換性のため，Javaの命名規則に基づくリファクタリングは未実施．）
            </summary>
        </member>
        <member name="P:cadencii.PointD.X">
            <summary>
            XMLシリアライズ用
            </summary>
        </member>
        <member name="P:cadencii.PointD.Y">
            <summary>
            XMLシリアライズ用
            </summary>
        </member>
        <member name="M:cadencii.QuantizeModeUtil.getQuantizeClock(cadencii.QuantizeMode,System.Boolean)">
            <summary>
            クオンタイズ時の音符の最小単位を、クロック数に換算したものを取得します
            </summary>
            <param name="qm"></param>
            <param name="triplet"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.RenderedStatus.#ctor(cadencii.vsq.VsqTrack,cadencii.vsq.TempoVector,cadencii.SequenceConfig)">
            <summary>
            コンストラクタ。trackはcloneされないが、tempoはcloneされる。
            </summary>
            <param name="track"></param>
            <param name="tempo"></param>
        </member>
        <member name="T:cadencii.NoteNumberExpressionType">
            <summary>
            音程を表現するときの表現形式を表す列挙型
            </summary>
        </member>
        <member name="F:cadencii.NoteNumberExpressionType.Numeric">
            <summary>
            数値で表現(ex. 61)
            </summary>
        </member>
        <member name="F:cadencii.NoteNumberExpressionType.International">
            <summary>
            一般的な表現(ex. C#3)
            </summary>
        </member>
        <member name="F:cadencii.NoteNumberExpressionType.Japanese">
            <summary>
            日本語表記(ex. 嬰ハ3)
            </summary>
        </member>
        <member name="F:cadencii.NoteNumberExpressionType.JapaneseFixedDo">
            <summary>
            日本語の固定ドレミ表記(ex. ド#3)
            </summary>
        </member>
        <member name="F:cadencii.NoteNumberExpressionType.Deutsche">
            <summary>
            ドイツ語表記(ex. Cis3)
            </summary>
        </member>
        <member name="M:cadencii.PropertyPanelContainer.panelMain_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            javaは自動レイアウトなのでいらない
            </summary>
        </member>
        <member name="F:cadencii.PropertyPanelContainer.components">
            <summary> 
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.PropertyPanelContainer.Dispose(System.Boolean)">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.PropertyPanelContainer.InitializeComponent">
            <summary> 
            デザイナ サポートに必要なメソッドです。このメソッドの内容を 
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:cadencii.PropertyPanelState">
            <summary>
            プロパティウィンドウの状態を表すクラス
            </summary>
        </member>
        <member name="F:cadencii.PropertyPanelState.State">
            <summary>
            プロパティパネルの状態を表す
            </summary>
        </member>
        <member name="F:cadencii.PropertyPanelState.Bounds">
            <summary>
            プロパティウィンドウの位置と大きさ
            </summary>
        </member>
        <member name="F:cadencii.PropertyPanelState.ExpandStatus">
            <summary>
            プロパティの表示項目の展開・縮小状態を格納したリスト
            </summary>
        </member>
        <member name="F:cadencii.PropertyPanelState.LastUsedNoteNumberExpression">
            <summary>
            音階の表現形式
            </summary>
        </member>
        <member name="F:cadencii.PropertyPanelState.WindowState">
            <summary>
            プロパティパネルがウィンドウに分離された状態における，ウィンドウの表示状態
            </summary>
        </member>
        <member name="F:cadencii.PropertyPanelState.DockWidth">
            <summary>
            プロパティパネルがドッキングされた状態における表示幅(ピクセル)
            </summary>
        </member>
        <member name="F:cadencii.RenderQueue.hashSource">
            <summary>
            MD5ハッシュによるファイル名の生成元となる文字列
            </summary>
        </member>
        <member name="M:cadencii.RenderQueue.appendArg(System.String)">
            <summary>
            このキューの引数リストに、引数を1つ追加します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.RenderQueue.appendArgRange(System.String[])">
            <summary>
            このキューの引数リストに、指定された引数をすべて追加します
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:cadencii.RenderQueue.getResamplerArg">
            <summary>
            このキューの引数リストを、文字列配列の形式で取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.RenderQueue.getResamplerArgString">
            <summary>
            このキューの引数リストを、スペースで繋げた文字列形式で取得します
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.ScriptReturnStatus">
            <summary>
            スクリプトの編集・実行結果を表すための列挙型
            </summary>
        </member>
        <member name="F:cadencii.ScriptReturnStatus.EDITED">
            <summary>
            スクリプトの実行が成功し、編集が行われた。
            </summary>
        </member>
        <member name="F:cadencii.ScriptReturnStatus.NOT_EDITED">
            <summary>
            スクリプトの実行が成功したが、編集は行われなかった（あるいは編集の必要は無かった、等）
            </summary>
        </member>
        <member name="F:cadencii.ScriptReturnStatus.ERROR">
            <summary>
            スクリプトの実行が失敗した、または中断された
            </summary>
        </member>
        <member name="T:cadencii.ScriptServer">
            <summary>
            スクリプトを管理するクラス
            </summary>
        </member>
        <member name="M:cadencii.ScriptServer.reload(System.String)">
            <summary>
            指定したIDのスクリプトを再読込みするか、または新規の場合読み込んで追加します。
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:cadencii.ScriptServer.reload">
            <summary>
            スクリプトを読み込み、コンパイルします。
            </summary>
        </member>
        <member name="M:cadencii.ScriptServer.invokeScript(System.String,cadencii.VsqFileEx)">
            <summary>
            スクリプトを実行します。
            </summary>
            <param name="evsd"></param>
        </member>
        <member name="M:cadencii.ScriptServer.configFileNameFromScriptFileName(System.String)">
            <summary>
            スクリプトのファイル名から、そのスクリプトの設定ファイルの名前を決定します。
            </summary>
            <param name="script_file"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.ScriptServer.getScriptIdIterator">
            <summary>
            読み込まれたスクリプトのIDを順に返す反復子を取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.ScriptServer.getDisplayName(System.String)">
            <summary>
            指定したIDが示すスクリプトの、表示上の名称を取得します。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.ScriptServer.getTimestamp(System.String)">
            <summary>
            指定したIDが示すスクリプトの、コンパイルした時点でのソースコードの更新日を取得します。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.ScriptServer.isAvailable(System.String)">
            <summary>
            指定したIDが示すスクリプトが利用可能かどうかを表すbool値を取得します。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.ScriptServer.getCompileMessage(System.String)">
            <summary>
            指定したIDが示すスクリプトの、コンパイル時のメッセージを取得します。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:cadencii.SingerEventComparisonContext">
            <summary>
            歌手変更イベントを比較するための，比較用コンテキスト．
            </summary>
        </member>
        <member name="T:cadencii.UpdateProgressEventHandler">
            <summary>
            進捗状況の報告を行うためのイベントハンドラ．
            </summary>
            <param name="sender">イベントの送信元</param>
            <param name="value">進捗状況を表す値</param>
        </member>
        <member name="M:cadencii.Utility.normalizePath(System.String)">
            <summary>
            vocaloid.shに渡すために，パス文字列を正規化します
            </summary>
        </member>
        <member name="M:cadencii.Utility.getExecutingUtau">
            <summary>
            実行中のUTAUがあれば，その実行ファイルのパスを調べます(Windowsのみ)
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.getSingerID(cadencii.RendererKind,System.Int32,System.Int32)">
            <summary>
            指定した歌声合成器の，指定したプログラムチェンジ，Language値を表現するVsqIDを作成します
            </summary>
            <param name="renderer_kind"></param>
            <param name="program"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.isInRect(cadencii.java.awt.Point,cadencii.java.awt.Rectangle)">
            <summary>
            pがrcの中にあるかどうかを判定します
            </summary>
            <param name="p"></param>
            <param name="rc"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.isInRect(System.Int32,System.Int32,cadencii.java.awt.Rectangle)">
            <summary>
            点がrcの中にあるかどうかを判定します
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="rc"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.isInRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            点が四角形の中にあるかどうかを判定します
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="rc_x"></param>
            <param name="rc_y"></param>
            <param name="rc_width"></param>
            <param name="rc_height"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.readUtauSingerConfig(System.String,cadencii.vsq.SingerConfig)">
            <summary>
            指定したディレクトリをUTAU音源のディレクトリとみなし，音源名と音源の保存パスを保持したSingerConfigを返します
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.editLengthOfVsqEvent(cadencii.vsq.VsqEvent,System.Int32,cadencii.VibratoLengthEditingRule)">
            <summary>
            VSQイベントの長さを変更すると同時に、ビブラートの長さを指定したルールに則って変更します。
            </summary>
            <param name="vsq_event"></param>
            <param name="new_length"></param>
            <param name="rule"></param>
        </member>
        <member name="M:cadencii.Utility.eval(System.Double,System.String)">
            <summary>
            与えられた式をC#の数式とみなし、評価します。
            equationに"x"という文字列がある場合、それを変数xとみなし、引数xの値が代入される。
            </summary>
            <param name="x"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.detectTrackDifference(cadencii.vsq.VsqTrack,cadencii.vsq.VsqTrack)">
            <summary>
            2つのトラック情報を比較し、違う部分を検出します
            </summary>
            <param name="track1"></param>
            <param name="track2"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.compareEvent(cadencii.vsq.VsqTrack,cadencii.vsq.VsqTrack,cadencii.EditedZone)">
            <summary>
            track1にあってtrack2に無い音符イベント，クレッシェンドイベントを検出し，引数retに記録します
            </summary>
            <param name="track1"></param>
            <param name="track2"></param>
            <param name="ret"></param>
        </member>
        <member name="M:cadencii.Utility.compareList(cadencii.IComparisonContext)">
            <summary>
            指定された比較用コンテキストを用いて2つのタイムラインを比較し，相違点を調べます．
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.compareList(cadencii.EditedZone,cadencii.IComparisonContext)">
            <summary>
            指定された比較用コンテキストを用いて2つのタイムラインを比較し，相違点を調べます．
            </summary>
            <param name="zone"></param>
            <param name="context"></param>
        </member>
        <member name="M:cadencii.Utility.getApplicationDataPath">
            <summary>
            アプリケーションデータの保存位置を取得します
            Gets the path for application data
            </summary>
        </member>
        <member name="M:cadencii.Utility.getConfigPath">
            <summary>
            設定ファイルを保存するディレクトリへのパスを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.trimString(System.String,cadencii.java.awt.Font,System.Int32)">
            <summary>
            文字列itemをfontを用いて描画したとき、幅widthピクセルに収まるようにitemを調節したものを返します。
            例えば"1 Voice"→"1 Voi..."ナド。
            </summary>
            <param name="item"></param>
            <param name="font"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.getScriptPath">
            <summary>
            スクリプトが格納されているディレクトリのパスを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.getCachedAssemblyPath">
            <summary>
            キャッシュされたアセンブリが保存されているディレクトリのパスを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.getToolPath">
            <summary>
            パレットツールが格納されているディレクトリのパスを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.Utility.getKeySoundPath">
            <summary>
            鍵盤用の音源が保存されているディレクトリへのパスを返します。
            </summary>
            <returns></returns>
        </member>
        <member name="T:cadencii.CurveType">
            <summary>
            vsqファイルで編集可能なカーブ・プロパティの種類
            </summary>
        </member>
        <member name="F:cadencii.CurveType.VEL">
            <summary>
            ベロシティ(index=-4)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.DYN">
            <summary>
            ダイナミクス　64(index=0)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.BRE">
            <summary>
            ブレシネス　0(index=1)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.BRI">
            <summary>
            ブライトネス　64(index=2)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.CLE">
            <summary>
            クリアネス　0(index=3)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.OPE">
            <summary>
            オープニング　127(index=4)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.GEN">
            <summary>
            ジェンダーファクター　64(index=5)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.POR">
            <summary>
            ポルタメントタイミング　64(index=6)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.VibratoRate">
            <summary>
            ビブラートの振動の速さ(index=9)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.VibratoDepth">
            <summary>
            ビブラートの振幅の大きさ(index=10)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.Accent">
            <summary>
            Accent(index=-3)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.Decay">
            <summary>
            Decay(index=-2)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.harmonics">
            <summary>
            Harmonics(index=11)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.fx2depth">
            <summary>
            FX2Depth(index=12)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso1freq">
            <summary>
            reso1freq(index=13)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso1bw">
            <summary>
            reso1bw(index=14)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso1amp">
            <summary>
            reso1amp(index=15)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso2freq">
            <summary>
            reso2freq(index=16)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso2bw">
            <summary>
            reso2bw(index=17)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso2amp">
            <summary>
            reso2amp(index=18)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso3freq">
            <summary>
            reso3freq(index=19)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso3bw">
            <summary>
            reso3bw(index=20)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso3amp">
            <summary>
            reso3amp(index=21)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso4freq">
            <summary>
            reso4freq(index=22)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso4bw">
            <summary>
            reso4bw(index=23)
            </summary>
        </member>
        <member name="F:cadencii.CurveType.reso4amp">
            <summary>
            reso4amp(index=24)
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyController.getPreviousAlwaysOnTop">
            <summary>
            AlwaysOnTopが強制的にfalseにされる直前の，AlwaysOnTop値を取得します．
            </summary>
        </member>
        <member name="M:cadencii.FormNotePropertyController.setPreviousAlwaysOnTop(System.Boolean)">
            <summary>
            AlwaysOnTopが強制的にfalseにされる直前の，AlwaysOnTop値を設定しておきます．
            </summary>
        </member>
        <member name="F:cadencii.FormShortcutKeys.mCategories">
            <summary>
            カテゴリーのリスト
            </summary>
        </member>
        <member name="M:cadencii.FormShortcutKeys.#ctor(cadencii.java.util.TreeMap{System.String,cadencii.ValuePair{System.String,System.Windows.Forms.Keys[]}},cadencii.FormMain)">
            <summary>
            コンストラクタ
            </summary>
            <param name="dict">メニューアイテムの表示文字列をキーとする，メニューアイテムのフィールド名とショートカットキーのペアを格納したマップ</param>
        </member>
        <member name="M:cadencii.FormShortcutKeys.updateList">
            <summary>
            リストを更新します
            </summary>
        </member>
        <member name="M:cadencii.FormShortcutKeys.updateColor">
            <summary>
            リストアイテムの背景色を更新します．
            2つ以上のメニューに対して同じショートカットが割り当てられた場合に警告色で表示する．
            </summary>
        </member>
        <member name="M:cadencii.FormShortcutKeys.updateSelectionKeys">
            <summary>
            現在選択中のコマンドのショートカットキーを，comboEditKey, 
            checkCommand, checkShift, checkControl, checkControlの状態にあわせて変更します．
            </summary>
        </member>
        <member name="F:cadencii.FormShortcutKeys.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormShortcutKeys.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormShortcutKeys.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:cadencii.KanaDeRomanization.hiragana2katakana(System.String)">
            <summary>
            ひらがなをカタカナに変換する
            </summary>
            <param name="maybe_katakana"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.PropertyPanel.findRootGridItem(System.Windows.Forms.GridItem)">
            <summary>
            itemが属しているGridItemツリーの基点にある親を探します
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.PropertyPanel.getGridItemIdentifier(System.Windows.Forms.GridItem)">
            <summary>
            itemが属しているGridItemツリーの中で，itemを特定するための文字列を取得します
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:cadencii.PropertyPanel.components">
            <summary> 
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.PropertyPanel.Dispose(System.Boolean)">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.PropertyPanel.InitializeComponent">
            <summary> 
            デザイナ サポートに必要なメソッドです。このメソッドの内容を 
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:cadencii.DrawObject">
            <summary>
            画面に描画するアイテムを表します
            </summary>
        </member>
        <member name="F:cadencii.DrawObject.mVibratoDelayInPixel">
            <summary>
            音符の先頭から，ビブラート開始位置までの長さ(単位：ピクセル)
            </summary>
        </member>
        <member name="F:cadencii.DrawObject.mIsOverlapped">
            <summary>
            このアイテムが他のアイテムと再生時にオーバーラップするかどうかを表すフラグ
            </summary>
        </member>
        <member name="F:cadencii.DrawObject.mLength">
            <summary>
            音符の長さ（クロック）
            </summary>
        </member>
        <member name="F:cadencii.DrawObject.mClock">
            <summary>
            アイテムの位置
            </summary>
        </member>
        <member name="F:cadencii.DrawObject.mIsValidForUtau">
            <summary>
            UTAUモードにて、歌詞から*.wavを引き当てられたかどうか。
            これがfalseのとき、ピアノロール上で警告色で描かれる
            </summary>
        </member>
        <member name="F:cadencii.DrawObject.mIsValidForStraight">
            <summary>
            Straight x UTAUモードにて、歌詞からanalyzed\*.stfを引き当てられたかどうか。
            これがfalseのとき、ピアノロール上で警告色で描かれる
            </summary>
        </member>
        <member name="F:cadencii.DrawObject.mVibratoPit">
            <summary>
            ビブラートによるピッチカーブ。
            単位はノート、配列のインデックスがクロックに相当する。
            </summary>
        </member>
        <member name="F:cadencii.DrawObject.mIntensity">
            <summary>
            UTAUの音量
            </summary>
        </member>
        <member name="T:cadencii.EditMode">
            <summary>
            ピアノロール画面の編集モード
            </summary>
        </member>
        <member name="F:cadencii.EditMode.NONE">
            <summary>
            何も編集して無い状態
            </summary>
        </member>
        <member name="F:cadencii.EditMode.MIDDLE_DRAG">
            <summary>
            真ん中ボタンでドラッグ中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.ADD_ENTRY">
            <summary>
            エントリを追加中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.MOVE_ENTRY">
            <summary>
            エントリを移動中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.MOVE_ENTRY_WAIT_MOVE">
            <summary>
            エントリ移動に向け、マウスが動くのを待機中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.MOVE_ENTRY_WHOLE">
            <summary>
            コントロールカーブも同時移動するモードで、エントリを移動中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.MOVE_ENTRY_WHOLE_WAIT_MOVE">
            <summary>
            コントロールカーブも同時移動するモードで、マウスが動くのを待機中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.EDIT_LEFT_EDGE">
            <summary>
            エントリの左端(開始時刻)を編集中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.EDIT_RIGHT_EDGE">
            <summary>
            エントリの右端(終了時刻)を編集中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.ADD_FIXED_LENGTH_ENTRY">
            <summary>
            固定長音符を追加
            </summary>
        </member>
        <member name="F:cadencii.EditMode.EDIT_VIBRATO_DELAY">
            <summary>
            ビブラートの有効範囲を編集中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.DRAG_DROP">
            <summary>
            アイコンパレットのアイテムをドラッグ＆ドロップ中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.REALTIME_MTC">
            <summary>
            MTCスレーブ状態で，同期再生中
            </summary>
        </member>
        <member name="F:cadencii.EditMode.CURVE_ON_PIANOROLL">
            <summary>
            ピアノロール上でカーブを描くモード
            </summary>
        </member>
        <member name="F:cadencii.EditMode.STEP_SEQUENCER">
            <summary>
            ステップ入力中
            </summary>
        </member>
        <member name="T:cadencii.EditorConfig">
            <summary>
            Cadenciiの環境設定
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.MAX_BUFFER_MILLISEC">
            <summary>
            バッファーサイズに設定できる最大値
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.MIN_BUFFER_MILLIXEC">
            <summary>
            バッファーサイズに設定できる最小値
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.MAX_PIANOROLL_SCALEY">
            <summary>
            ピアノロールの縦軸の拡大率を表す整数値の最大値
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.MIN_PIANOROLL_SCALEY">
            <summary>
            ピアノロールの縦軸の拡大率を表す整数値の最小値
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.DefaultSingerName">
            <summary>
            デフォルトで使用する歌手の名前
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.DefaultXScale">
            <summary>
            デフォルトの横軸方向のスケール
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.NumRecentFiles">
            <summary>
            RecentFilesに登録することの出来る最大のファイル数
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.RecentFiles">
            <summary>
            最近使用したファイルのリスト
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.ShowLyric">
            <summary>
            ピアノロール上に歌詞を表示するかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.ShowExpLine">
            <summary>
            ピアノロール上に，ビブラートとアタックの概略を表す波線を表示するかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__DefaultVibratoRate">
            <summary>
            デフォルトビブラートのRate
            バージョン3.3で廃止
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__DefaultVibratoDepth">
            <summary>
            デフォルトビブラートのDepth
            バージョン3.3で廃止
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.AutoVibratoThresholdLength">
            <summary>
            ビブラートの自動追加を行うかどうかを決める音符長さの閾値．単位はclock
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.AutoVibratoType1">
            <summary>
            VOCALOID1用のデフォルトビブラート設定
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.AutoVibratoType2">
            <summary>
            VOCALOID2用のデフォルトビブラート設定
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.AutoVibratoTypeCustom">
            <summary>
            カスタムのデフォルトビブラート設定
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.AutoVibratoCustom">
            <summary>
            ユーザー定義のビブラート設定．
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.EnableAutoVibrato">
            <summary>
            ビブラートの自動追加を行うかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PxTrackHeight">
            <summary>
            ピアノロール上での，音符の表示高さ(ピクセル)
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.MixerVisible">
            <summary>
            ミキサーウィンドウが表示された状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.IconPaletteVisible">
            <summary>
            アイコンパレットが表示された状態かどうか
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.Language">
            <summary>
            言語設定
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PxTolerance">
            <summary>
            マウスの操作などの許容範囲。プリメジャーにPxToleranceピクセルめり込んだ入力を行っても、エラーにならない。(補正はされる)
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.ScrollHorizontalOnWheel">
            <summary>
            マウスホイールでピアノロールを水平方向にスクロールするかどうか。
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.MaximumFrameRate">
            <summary>
            画面描画の最大フレームレート
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.UserDictionaries">
            <summary>
            ユーザー辞書のOn/Offと順序
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__Platform">
            <summary>
            実行環境
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.WindowMaximized">
            <summary>
            ウィンドウが最大化された状態かどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.WindowRect">
            <summary>
            ウィンドウの位置とサイズ．
            最小化された状態での値は，この変数に代入されない(ことになっている)
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.MinimumScrollHandleWidth">
            <summary>
            hScrollのスクロールボックスの最小幅(px)
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.KeepLyricInputMode">
            <summary>
            発音記号入力モードを，維持するかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PlayPreviewWhenRightClick">
            <summary>
            ピアノロールの何もないところをクリックした場合、右クリックでもプレビュー音を再生するかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlerMinimumEventInterval">
            <summary>
            ゲームコントローラで、異なるイベントと識別する最小の時間間隔(millisec)
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.CurveSelectingQuantized">
            <summary>
            カーブの選択範囲もクオンタイズするかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlerTriangle">
            <summary>
            Button index of "△"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlerCircle">
            <summary>
            Button index of "○"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlerCross">
            <summary>
            Button index of "×"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlerRectangle">
            <summary>
            Button index of "□"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlL1">
            <summary>
            Button index of "L1"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlR1">
            <summary>
            Button index of "R1"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlL2">
            <summary>
            Button index of "L2"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlR2">
            <summary>
            Button index of "R2"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlSelect">
            <summary>
            Button index of "SELECT"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlStart">
            <summary>
            Button index of "START"
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlStirckL">
            <summary>
            Button index of Left Stick
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.GameControlStirckR">
            <summary>
            Button index of Right Stick
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.ViewWaveform">
            <summary>
            wave波形を表示するかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.SplitContainer2LastDividerLocation">
            <summary>
            スプリットコンテナのディバイダの位置
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.MidiInPort">
            <summary>
            キーボードからの入力に使用するデバイス
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PathResampler">
            <summary>
            UTAU互換の合成器のパス(1個目)
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.ResamplerWithWine">
            <summary>
            UTAU互換の合成器の1個目を，wine経由で呼ぶかどうか
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PathResamplers">
            <summary>
            UTAU互換の合成器のパス(2個目以降)
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.ResamplersWithWine">
            <summary>
            UTAU互換の合成器を，wine経由で呼ぶかどうか
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PathWavtool">
            <summary>
            UTAU用のwave切り貼りツール
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.WavtoolWithWine">
            <summary>
            wavtoolをwine経由で呼ぶかどうか
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PxToleranceBezier">
            <summary>
            ベジエ制御点を掴む時の，掴んだと判定する際の誤差．制御点の外輪からPxToleranceBezierピクセルずれていても，掴んだと判定する．
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.SelfDeRomanization">
            <summary>
            歌詞入力においてローマ字が入力されたとき，Cadencii側でひらがなに変換するかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.LastUsedExtension">
            <summary>
            openMidiDialogで最後に選択された拡張子
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__MixerTopMost">
            <summary>
            ミキサーダイアログを常に手前に表示するかどうか
            3.3で廃止
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.OverviewEnabled">
            <summary>
            概観ペインが表示されているかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.AutoBackupIntervalMinutes">
            <summary>
            自動バックアップする間隔．単位は分
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.KeyWidth">
            <summary>
            鍵盤の表示幅、ピクセル,AppManager.keyWidthに代入。
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.UseSpaceKeyAsMiddleButtonModifier">
            <summary>
            スペースキーを押しながら左クリックで、中ボタンクリックとみなす動作をさせるかどうか。
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PathAquesTone">
            <summary>
            AquesToneのVSTi dllへのパス
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PathAquesTone2">
            <summary>
            AquesTone2 の VSTi dll へのパス
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.FormIconPaletteLocation">
            <summary>
            アイコンパレット・ウィンドウの位置
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__FormIconTopMost">
            <summary>
            アイコンパレット・ウィンドウを常に手前に表示するかどうか
            3.3で廃止
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.SpecialShortcutGoToFirst">
            <summary>
            最初に戻る、のショートカットキー
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__WaveFileOutputChannel">
            <summary>
            waveファイル出力時のチャンネル数（1または2）
            3.3で廃止
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__WaveFileOutputFromMasterTrack">
            <summary>
            waveファイル出力時に、全トラックをmixして出力するかどうか
            3.3で廃止
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.MidiInPortMtc">
            <summary>
            MTCスレーブ動作を行う際使用するMIDI INポートの設定
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.UseProjectCache">
            <summary>
            プロジェクトごとのキャッシュディレクトリを使うかどうか
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.DoNotAskKeySoundGeneration">
            <summary>
            鍵盤用のキャッシュが無いとき、FormGenerateKeySoundを表示しないかどうか。
            trueなら表示しない、falseなら表示する（デフォルト）
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__DoNotUseVocaloid100">
            <summary>
            VOCALOID1 (1.0)のDLLを読み込まない場合true。既定ではfalse
            3.3で廃止
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__DoNotUseVocaloid101">
            <summary>
            VOCALOID1 (1.1)のDLLを読み込まない場合true。既定ではfalse
            3.3で廃止
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.DoNotUseVocaloid2">
            <summary>
            VOCALOID2のDLLを読み込まない場合true。既定ではfalse
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.DoNotUseAquesTone">
            <summary>
            AquesToneのDLLを読み込まない場合true。既定ではfalse
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.DoNotUseAquesTone2">
            <summary>
            AquesTone2のDLLを読み込まない場合true。既定ではfalse
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.__revoked__LoadSecondaryVocaloid1Dll">
            <summary>
            2個目のVOCALOID1 DLLを読み込むかどうか。既定ではfalse
            3.3で廃止
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.DoNotUseVocaloid1">
            <summary>
            VOALOID1のDLLを読み込まない場合はtrue．既定ではfalse
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BufferSizeMilliSeconds">
            <summary>
            WAVE再生時のバッファーサイズ。既定では1000ms。
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.DefaultSynthesizer">
            <summary>
            トラックを新規作成するときのデフォルトの音声合成システム
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.UseUserDefinedAutoVibratoType">
            <summary>
            自動ビブラートを作成するとき，ユーザー定義タイプのビブラートを利用するかどうか．デフォルトではfalse
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.SkipDrawWhilePlaying">
            <summary>
            再生中に画面を描画するかどうか。デフォルトはfalse
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.PianoRollScaleY">
            <summary>
            ピアノロール画面の縦方向のスケール.
            <verssion>3.3+</verssion>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandSizeFile">
            <summary>
            ファイル・ツールバーのサイズ
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandSizeTool">
            <summary>
            ツール・ツールバーのサイズ
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandSizeMeasure">
            <summary>
            メジャー・ツールバーのサイズ
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandSizePosition">
            <summary>
            ポジション・ツールバーのサイズ
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandNewRowFile">
            <summary>
            ファイル・ツールバーを新しい行に追加するかどうか
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandNewRowTool">
            <summary>
            ツール・ツールバーを新しい行に追加するかどうか
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandNewRowMeasure">
            <summary>
            メジャー・ツールバーを新しい行に追加するかどうか
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandNewRowPosition">
            <summary>
            ポジション・ツールバーを新しい行に追加するかどうか
            <version>3.3+</version>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandOrderFile">
            <summary>
            ファイル・ツールバーの順番
            <remarks>version 3.3+</remarks>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandOrderTool">
            <summary>
            ツール・ツールバーの順番
            <remarks>version 3.3+</remarks>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandOrderMeasure">
            <summary>
            メジャー・ツールバーの順番
            <remarks>version 3.3+</remarks>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.BandOrderPosition">
            <summary>
            ポジション・ツールバーの順番
            <remarks>version 3.3+</remarks>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.ChevronWidth">
            <summary>
            ツールバーのChevronの幅．
            Winodws 7(Aero): 17px
            <remarks>version 3.3+</remarks>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.LastUsedPathIn">
            <summary>
            最後に入力したファイルパスのリスト
            リストに入る文字列は，拡張子+タブ文字+パスの形式にする
            拡張子はピリオドを含めない
            <remarks>version 3.3+</remarks>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.LastUsedPathOut">
            <summary>
            最後に出力したファイルパスのリスト
            リストに入る文字列は，拡張子+タブ文字+パスの形式にする
            拡張子はピリオドを含めない
            <remarks>version 3.3+</remarks>
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.WinePrefix">
            <summary>
            使用するWINEPREFIX
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.WineTop">
            <summary>
            wineのトップディレクトリ
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.WineTopBuiltin">
            <summary>
            Cadencii付属のWineを使う場合にtrue，そうでなければWineTopで指定されたWineが利用される
            version 3.3+
            </summary>
        </member>
        <member name="F:cadencii.EditorConfig.UseWideCharacterWorkaround">
            <summary>
            UTAUのresampler用に，ジャンクション機能を使うかどうか
            version 3.3+
            </summary>
        </member>
        <member name="M:cadencii.EditorConfig.#ctor">
            <summary>
            コンストラクタ．起動したOSによって動作を変える場合がある
            </summary>
        </member>
        <member name="M:cadencii.EditorConfig.getSerializer">
            <summary>
            EditorConfigのインスタンスをxmlシリアライズするためのシリアライザを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.EditorConfig.applyDefaultSingerStyle(cadencii.vsq.VsqID)">
            <summary>
            音符イベントに，デフォルトの歌唱スタイルを適用します
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:cadencii.EditorConfig.getWineTop">
            <summary>
            使用するWineのインストールディレクトリを取得します
            </summary>
        </member>
        <member name="M:cadencii.EditorConfig.getBuiltinWineTop(System.String)">
            <summary>
            指定した名前のバンドルの，Wineのインストールディレクトリを取得します
            </summary>
        </member>
        <member name="M:cadencii.EditorConfig.getBuiltinWineExecutable__">
            <summary>
            wineの実行ファイルのパスを取得します
            </summary>
        </member>
        <member name="M:cadencii.EditorConfig.getResamplerCount">
            <summary>
            登録されているUTAU互換合成器の個数を調べます
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.EditorConfig.clearResampler">
            <summary>
            登録されているUTAU互換合成器の登録を全て解除します
            </summary>
        </member>
        <member name="M:cadencii.EditorConfig.isResamplerWithWineAt(System.Int32)">
            <summary>
            第index番目に登録されているresamplerをwine経由で呼ぶかどうかを表す値を取得します
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.EditorConfig.setResamplerWithWineAt(System.Int32,System.Boolean)">
            <summary>
            第index番目に登録されているresamplerをwine経由で呼ぶかどうかを設定します
            </summary>
            <param name="index"></param>
            <param name="with_wine"></param>
        </member>
        <member name="M:cadencii.EditorConfig.getResamplerAt(System.Int32)">
            <summary>
            第index番目に登録されているUTAU互換合成器のパスを取得します
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.EditorConfig.setResamplerAt(System.Int32,System.String)">
            <summary>
            第index番目のUTAU互換合成器のパスを設定します
            </summary>
            <param name="index"></param>
            <param name="path"></param>
        </member>
        <member name="M:cadencii.EditorConfig.removeResamplerAt(System.Int32)">
            <summary>
            第index番目のUTAU互換合成器を登録解除します
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:cadencii.EditorConfig.addResampler(System.String,System.Boolean)">
            <summary>
            新しいUTAU互換合成器のパスを登録します
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:cadencii.EditorConfig.getLastUsedPathIn(System.String)">
            <summary>
            最後に出力したファイルのパスのうち，拡張子が指定したものと同じであるものを取得します
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.EditorConfig.setLastUsedPathIn(System.String,System.String)">
            <summary>
            最後に出力したファイルのパスを設定します
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:cadencii.EditorConfig.getLastUsedPathOut(System.String)">
            <summary>
            最後に入力したファイルのパスのうち，拡張子が指定したものと同じであるものを取得します．
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.EditorConfig.setLastUsedPathOut(System.String,System.String)">
            <summary>
            最後に入力したファイルのパスを設定します
            </summary>
            <param name="path"></param>
            <param name="ext_with_dot">ピリオド付きの拡張子（ex. ".txt"）</param>
        </member>
        <member name="M:cadencii.EditorConfig.createAutoVibrato(cadencii.vsq.SynthesizerType,System.Int32)">
            <summary>
            自動ビブラートを作成します
            </summary>
            <param name="type"></param>
            <param name="vibrato_clocks"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.EditorConfig.invokeQuantizeModeChangedEvent">
            <summary>
            QuantizeModeChangedイベントを発行します
            </summary>
        </member>
        <member name="M:cadencii.EditorConfig.pushRecentFiles(System.String)">
            <summary>
            「最近使用したファイル」のリストに、アイテムを追加します
            </summary>
            <param name="new_file"></param>
        </member>
        <member name="M:cadencii.EditorConfig.check">
            <summary>
            このインスタンスの整合性をチェックします．
            PathResamplersとPathResamplersWithWineの個数があってるかどうかなどのチェックを行う
            </summary>
        </member>
        <member name="E:cadencii.EditorConfig.QuantizeModeChanged">
            <summary>
            PositionQuantize, PositionQuantizeTriplet, LengthQuantize, LengthQuantizeTripletの描くプロパティのいずれかが
            変更された時発生します
            </summary>
        </member>
        <member name="P:cadencii.EditorConfig.MouseHoverTime">
            <summary>
            ピアノロール上でマウスホバーイベントが発生するまでの時間(millisec)
            </summary>
        </member>
        <member name="T:cadencii.EditTool">
            <summary>
            編集ツールを表す列挙型
            </summary>
        </member>
        <member name="F:cadencii.EditTool.ARROW">
            <summary>
            矢印ツール
            </summary>
        </member>
        <member name="F:cadencii.EditTool.PENCIL">
            <summary>
            鉛筆ツール
            </summary>
        </member>
        <member name="F:cadencii.EditTool.LINE">
            <summary>
            直線ツール
            </summary>
        </member>
        <member name="F:cadencii.EditTool.ERASER">
            <summary>
            消しゴムツール
            </summary>
        </member>
        <member name="F:cadencii.EditTool.PALETTE_TOOL">
            <summary>
            ユーザー定義のパレットツール
            </summary>
        </member>
        <member name="F:cadencii.FormCompileResult.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormCompileResult.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormCompileResult.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormDeleteBar.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormDeleteBar.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormDeleteBar.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormGameControlerConfig.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormGameControlerConfig.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormGameControlerConfig.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:cadencii.FormImportLyric.setMaxNotes(System.Int32)">
            <summary>
            このダイアログに入力できる最大の文字数を設定します．
            </summary>
            <param name="max_notes"></param>
        </member>
        <member name="F:cadencii.FormImportLyric.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormImportLyric.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormImportLyric.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:cadencii.FormInsertBar.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormInsertBar.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormMidiImExport.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormMidiImExport.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormMidiImExport.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:cadencii.FormMixer.getPreviousAlwaysOnTop">
            <summary>
            AlwaysOnTopが強制的にfalseにされる直前の，AlwaysOnTop値を取得します．
            </summary>
        </member>
        <member name="M:cadencii.FormMixer.setPreviousAlwaysOnTop(System.Boolean)">
            <summary>
            AlwaysOnTopが強制的にfalseにされる直前の，AlwaysOnTop値を設定しておきます．
            </summary>
        </member>
        <member name="M:cadencii.FormMixer.getVolumeTrackerMaster">
            <summary>
            マスターボリュームのUIコントロールを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMixer.getVolumeTracker(System.Int32)">
            <summary>
            指定したトラックのボリュームのUIコントロールを取得します
            </summary>
            <param name="track"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMixer.getVolumeTrackerBgm(System.Int32)">
            <summary>
            指定したBGMのボリュームのUIコントロールを取得します
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.FormMixer.updateSoloMute">
            <summary>
            ソロ，ミュートのボタンのチェック状態を更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMixer.updateStatus">
            <summary>
            現在のシーケンスの状態に応じて，ミキサーウィンドウの状態を更新します
            </summary>
        </member>
        <member name="M:cadencii.FormMixer.reregisterEventHandlers">
            <summary>
            ボリューム用のイベントハンドラを再登録します
            </summary>
        </member>
        <member name="F:cadencii.FormMixer.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormMixer.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormMixer.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormTrackProperty.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormTrackProperty.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormTrackProperty.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormRealtimeConfig.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormRealtimeConfig.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormRealtimeConfig.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormSingerStyleConfig.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormSingerStyleConfig.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormSingerStyleConfig.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.FormTempoConfig.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormTempoConfig.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormTempoConfig.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:cadencii.FormVibratoConfig.#ctor(cadencii.vsq.VibratoHandle,System.Int32,cadencii.DefaultVibratoLengthEnum,cadencii.vsq.SynthesizerType,System.Boolean)">
            <summary>
            コンストラクタ．引数vibrato_handleには，Cloneしたものを渡さなくてよい．
            </summary>
            <param name="vibrato_handle"></param>
            <param name="note_length"></param>
            <param name="default_vibrato_length"></param>
            <param name="type"></param>
            <param name="use_original"></param>
        </member>
        <member name="M:cadencii.FormVibratoConfig.getVibratoHandle">
            <summary>
            編集済みのビブラート設定．既にCloneされているので，改めてCloneしなくて良い
            </summary>
        </member>
        <member name="M:cadencii.FormVibratoConfig.updateComboBoxStatus">
            <summary>
            ビブラートの選択肢の状態を更新します
            </summary>
        </member>
        <member name="F:cadencii.FormVibratoConfig.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.FormVibratoConfig.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.FormVibratoConfig.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="F:cadencii.KeySoundPlayer.m_sound_previewer">
            <summary>
            鍵盤を押した時に音を鳴らすためのプレイヤー
            </summary>
        </member>
        <member name="T:cadencii.NumericUpDownEx">
            <summary>
            MouseWheel��Increment���l�𑝌������邱�Ƃ̂ł���NumericUpDown
            </summary>
        </member>
        <member name="T:cadencii.PaletteToolServer">
            <summary>
            パレットツールを一元管理するクラス
            </summary>
        </member>
        <member name="F:cadencii.PaletteToolServer.loadedTools">
            <summary>
            読み込まれたパレットツールのコレクション
            </summary>
        </member>
        <member name="M:cadencii.PaletteToolServer.init">
            <summary>
            パレットツールを読み込みます
            </summary>
        </member>
        <member name="M:cadencii.PaletteToolServer.invokePaletteTool(System.String,System.Int32,System.Int32[],System.Windows.Forms.MouseButtons)">
            <summary>
            パレットツールを実行します
            </summary>
            <param name="id">実行するパレットツールのID</param>
            <param name="track">編集対象のトラック番号</param>
            <param name="vsq_event_intrenal_ids">編集対象のInternalIDのリスト</param>
            <param name="button">パレットツールが押し下げられた時のマウスボタンの種類</param>
            <returns>パレットツールによって編集が加えられた場合true。そうでなければfalse(パレットツールがエラーを起こした場合も含む)。</returns>
        </member>
        <member name="T:cadencii.ScriptInvoker">
            <summary>
            スクリプトの起動とスクリプト設定の保存を行うためのオブジェクトの纏まり．
            FormMain.menuScript.DropDownItems[*].DropDownItems[0]のTagに代入される．
            </summary>
        </member>
        <member name="F:cadencii.ScriptInvoker.scriptDelegate">
            <summary>
            スクリプトを起動するためのデリゲート
            </summary>
        </member>
        <member name="F:cadencii.ScriptInvoker.ScriptType">
            <summary>
            スクリプト本体の型
            </summary>
        </member>
        <member name="F:cadencii.ScriptInvoker.ScriptFile">
            <summary>
            スクリプトが記述されたファイルのパス
            </summary>
        </member>
        <member name="F:cadencii.ScriptInvoker.ErrorMessage">
            <summary>
            スクリプトをコンパイルしたときのエラーメッセージ
            </summary>
        </member>
        <member name="F:cadencii.ScriptInvoker.Serializer">
            <summary>
            スクリプト設定を保存し/読み込むためのXMLシリアライザ
            </summary>
        </member>
        <member name="F:cadencii.ScriptInvoker.fileTimestamp">
            <summary>
            最後にスクリプトをコンパイルしたときの，スクリプトが記述されたファイルのタイムスタンプ
            </summary>
        </member>
        <member name="F:cadencii.ScriptInvoker.getDisplayNameDelegate">
            <summary>
            スクリプトの表示名を取得するためのデリゲート
            </summary>
        </member>
        <member name="T:cadencii.SelectedEventEntry">
            <summary>
            選択されたアイテムを管理します。
            また、プロパティグリッドの登録アイテムとして編集されているオブジェクトと、
            VsqFileExに登録されているオブジェクトとの間を取り持つ処理を担います。
            </summary>
        </member>
        <member name="F:cadencii.SelectedEventEntry.track">
            <summary>
            選択されたアイテムが存在しているトラック番号。
            </summary>
        </member>
        <member name="F:cadencii.SelectedEventEntry.original">
            <summary>
            選択されたアイテム。
            </summary>
        </member>
        <member name="F:cadencii.SelectedEventEntry.editing">
            <summary>
            選択されたアイテムの、編集後の値。
            </summary>
        </member>
        <member name="M:cadencii.SelectedEventEntry.#ctor(System.Int32,cadencii.vsq.VsqEvent,cadencii.vsq.VsqEvent)">
            <summary>
            指定されたパラメータを用いて、選択アイテムを表す新しいインスタンスを初期化します。
            </summary>
            <param name="track_"></param>
            <param name="original_"></param>
            <param name="editing_"></param>
        </member>
        <member name="M:cadencii.SelectedEventEntry.captureValuesFromEditing">
            <summary>
            このオブジェクトのeditingフィールドの値から、プロパティの各値のオブジェクトを構築します
            </summary>
        </member>
        <member name="M:cadencii.SelectedEventEntry.calculateClock(System.Int32,System.Int32,System.Int32)">
            <summary>
            小節数、拍数、ゲート数から、クロック値を計算します
            </summary>
            <param name="measure"></param>
            <param name="beat"></param>
            <param name="gate"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.SelectedEventEntry.getPosition">
            <summary>
            現在のクロック値(m_clock)から、小節数、拍数、ゲート数(?)を計算します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.SelectedEventEntry.evalReceivedString(System.Int32,System.String)">
            <summary>
            プロパティに入力された文字列と、編集前の値を元に、入力された文字列を解釈することによって編集後の値がどうなるかを調べます
            </summary>
            <param name="old_value"></param>
            <param name="received_string"></param>
            <returns></returns>
        </member>
        <member name="T:cadencii.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources._switch">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.Add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.alarm_clock">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.arrow_090">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.arrow_135">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.arrow_180">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.arrow_270">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.arrow_circle_double">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.arrow_return">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.arrow_skip">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.arrow_skip_090">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.arrow_skip_180">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.btn1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.btn2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.btn3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.chevron_small_collapse">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.clipboard_paste">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.control">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.control_double">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.control_double_180">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.control_pause">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.control_skip">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.control_stop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.control_stop_180">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.cresc1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.cresc2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.cresc3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.cresc4">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.cresc5">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.cross_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.dim1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.dim2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.dim3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.dim4">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.dim5">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.disk">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.disk__plus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.documents">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.drive">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.edit_list_order">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.end_marker">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.Erase">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.eraser">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.folder">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.folder__plus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.folder_horizontal_open">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.Icon1">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.layer_shape_curve">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.layer_shape_line">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.MenuClosed">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.minus8x8">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.note001">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.note002">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.note004">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.note008">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.note016">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.note032">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.note064">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.note128">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.notenull">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.pencil">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.piano">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.pin__arrow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.pin__arrow_inv">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.plus8x8">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.ruler_crop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.scissors">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.Select">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.SineWave">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.slash">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.splash">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.start_marker">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.target__pencil">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.toolbarBKG">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:cadencii.Properties.Resources.VSTonWht">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:cadencii.ToolStripLocation">
            <summary>
            toolStrip*の位置を保存します
            </summary>
        </member>
        <member name="T:cadencii.TrackSelector">
            <summary>
            コントロールカーブ，トラックの一覧，歌手変更イベントなどを表示するコンポーネント．
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.VEL_BAR_WIDTH">
            <summary>
            ベロシティを画面に描くときの，棒グラフの幅(pixel)
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.NUM_PCOUNTER">
            <summary>
            パフォーマンスカウンタ用バッファの容量
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.OFFSET_TRACK_TAB">
            <summary>
            コントロールの下辺から、TRACKタブまでのオフセット(px)
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.HEADER">
            <summary>
            コントロールの上端と、グラフのY軸最大値位置との距離
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.SINGER_ITEM_WIDTH">
            <summary>
            歌手変更イベントの表示矩形の幅
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.PX_WIDTH_RENDER">
            <summary>
            RENDERボタンの幅(px)
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.DOT_WID">
            <summary>
            カーブ制御点の幅（実際は_DOT_WID * 2 + 1ピクセルで描画される）
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.UNIT_HEIGHT_PER_CURVE">
            <summary>
            カーブの種類を表す部分の，1個あたりの高さ（ピクセル，余白を含む）
            TrackSelectorの推奨表示高さは，HEIGHT_WITHOUT_CURVE + UNIT_HEIGHT_PER_CURVE * (カーブの個数)となる
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.HEIGHT_WITHOUT_CURVE">
            <summary>
            カーブの種類を除いた部分の高さ（ピクセル）．
            TrackSelectorの推奨表示高さは，HEIGHT_WITHOUT_CURVE + UNIT_HEIGHT_PER_CURVE * (カーブの個数)となる
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.TRACK_SELECTOR_MAX_WIDTH">
            <summary>
            トラックの名前表示部分の最大表示幅（ピクセル）
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.OFFSET_PRE">
            <summary>
            先行発音を表示する旗を描画する位置のy座標
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.OFFSET_OVL">
            <summary>
            オーバーラップを表示する旗を描画する位置のy座標
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.FLAG_SPACE">
            <summary>
            旗の上下に追加するスペース(ピクセル)
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_BEZIER_CURVE">
            <summary>
            ベジエ曲線の色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_BEZIER_AUXILIARY">
            <summary>
            ベジエ曲線の補助線の色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_BEZIER_DOT_NORMAL">
            <summary>
            ベジエ曲線の制御点の色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_BEZIER_DOT_NORMAL_DARK">
            <summary>
            ベジエ曲線の制御点の枠色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_BEZIER_DOT_BASE">
            <summary>
            ベジエ曲線のデータ点の色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_BEZIER_DOT_BASE_DARK">
            <summary>
            ベジエ曲線のデータ点の枠色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_DOT_HILIGHT">
            <summary>
            データ点のハイライト色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_SINGERBOX_BORDER_HILIGHT">
            <summary>
            歌手変更を表すボックスの枠線のハイライト色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_SINGERBOX_BORDER">
            <summary>
            歌手変更を表すボックスの枠線の色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_VIBRATO_SHADOW">
            <summary>
            ビブラートコントロールカーブの、ビブラート以外の部分を塗りつぶす時の色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.COLOR_MOUSE_TRACER">
            <summary>
            マウスの軌跡を描くときの塗りつぶし色
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mSelectedCurve">
            <summary>
            現在最前面に表示されているカーブ
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mLastSelectedCurve">
            <summary>
            現在最前面カーブのすぐ後ろに表示されているカーブ
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mCurveVisible">
            <summary>
            コントロールカーブを表示するモードかどうか
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mMouseValue">
            <summary>
            現在のマウス位置におけるカーブの値
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEditingChainID">
            <summary>
            編集しているBezierChainのID
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEditingPointID">
            <summary>
            編集しているBezierPointのID
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mMouseDowned">
            <summary>
            マウスがカーブ部分に下ろされている最中かどうかを表すフラグ
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mMouseTracer">
            <summary>
            マウスのトレーサ。コントロールカーブ用の仮想スクリーン座標で表す。
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mCMenuSingerPrepared">
            <summary>
            cmenuSingerのメニューアイテムを初期化するのに使用したRenderer。
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mMouseDownMode">
            <summary>
            マウスがDownしてからUpするまでのモード
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mMouseMoved">
            <summary>
            マウスがDownしてからマウスが移動したかどうかを表す。
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mSingerMoveStartedClock">
            <summary>
            マウスドラッグで歌手変更イベントの矩形を移動開始した時の、マウス位置におけるクロック
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mCMenuSingerTooltipWidth">
            <summary>
            cmenuSinger用のツールチップの幅を記録しておく。
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mVelEditLastSelectedID">
            <summary>
            マウス長押しによるVELの編集。選択されている音符のInternalID
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mVelEditShiftY">
            <summary>
            マウス長押しによるVELの編集。棒グラフのてっぺんの座標と、マウスが降りた座標の差分。プラスなら、マウスの方が下になる。
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mVelEditSelected">
            <summary>
            マウス長押しによるVELの編集。編集対象の音符のリスト。
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEditingBezierOriginal">
            <summary>
            現在編集操作が行われているBezierChainの、編集直前のオリジナル
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mModifierKey">
            <summary>
            CTRLキー。MacOSXの場合はMenu
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mSpaceKeyDowned">
            <summary>
            スペースキーが押されているかどうか。
            MouseDown時に範囲選択モードをスキップする必要があるので、FormMainでの処理に加えてこのクラス内部でも処理する必要がある
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mMouseDownLocation">
            <summary>
            マウスがDownした位置の座標．xは仮想スクリーン座標．yは通常のe.Location.Y
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEnvelopeEdigintID">
            <summary>
            エンベロープ点を動かすモードで，選択されているInternalID．
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEnvelopePointKind">
            <summary>
            エンベロープ点を動かすモードで，選択されている点のタイプ
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEnvelopeOriginal">
            <summary>
            エンベロープ点を動かすモードで，編集される前のオリジナルのエンベロープ
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEnvelopeDotBegin">
            <summary>
            エンベロープ点を動かすモードで、点が移動可能な範囲の始点(秒)
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEnvelopeDotEnd">
            <summary>
            エンベロープ点を動かすモードで、点が移動可能な範囲の終点(秒)
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEnvelopeEditing">
            <summary>
            編集中のエンベロープ
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEnvelopeRangeBegin">
            <summary>
            編集中のエンベロープの範囲の始点（秒）
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mEnvelopeRangeEnd">
            <summary>
            編集中のエンベロープの範囲の終点（秒）
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mPreUtteranceEditingID">
            <summary>
            現在PreUtteranceを編集中のVsqEventのID
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mOverlapEditingID">
            <summary>
            現在オーバーラップを編集中のVsqEventのID
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mPreOverlapOriginal">
            <summary>
            オーバーラップを編集する前の音符情報
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mPreOverlapEditing">
            <summary>
            オーバーラップを編集中の音符情報
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mModifierOnMouseDown">
            <summary>
            MouseDown時のControl.Modifiersの状態。
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mMovingPoints">
            <summary>
            移動しているデータ点のリスト
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mLastPreferredMinHeight">
            <summary>
            このコントロールの推奨最少表示高さの前回の値．
            推奨表示高さが変わったかどうかを検出するのに使う
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mStroke2px">
            <summary>
            描画幅が2ピクセルのストローク
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mStrokeDefault">
            <summary>
            デフォルトのストローク
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mGraphDrawer">
            <summary>
            折れ線グラフを効率よく描画するための描画器
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mMainWindow">
            <summary>
            メイン画面への参照
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mTextWidthPerLetter">
            <summary>
            Overlap, Presendを描画するときに使うフォントで，一文字あたり何ピクセルになるか
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mTextHeight">
            <summary>
            Overlap, Presendを描画するときに使うフォントの，文字の描画高さ
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mMenuMap">
            <summary>
            カーブ種類とメニューアイテムを紐付けるマップ
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mTooltipProgram">
            <summary>
            ツールチップに表示されるプログラム
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mTooltipLanguage">
            <summary>
            ツールチップに表示されるLanguage
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.mViewingCurves">
            <summary>
            TrackSelectorで表示させているカーブの一覧
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.#ctor(cadencii.FormMain)">
            <summary>
            コンストラクタ．
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.updateVisibleCurves">
            <summary>
            表示するコントロールのカーブの種類を、AppManager.EditorConfigの設定に応じて更新します
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.getCurveTypeFromMenu(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            メニューアイテムから，そのアイテムが担当しているカーブ種類を取得します
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.getStroke2px">
            <summary>
            描画幅が2ピクセルのストロークを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.TrackSelector.getStrokeDefault">
            <summary>
            デフォルトのストロークを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.TrackSelector.getPreferredMinSize">
            <summary>
            このコントロールの推奨最小表示高さを取得します
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.getMainForm">
            <summary>
            このコントロールの親ウィンドウを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.TrackSelector.executeCommand(cadencii.CadenciiCommand,System.Boolean)">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="register">Undo/Redo用バッファにExecuteの結果を格納するかどうかを指定するフラグ</param>
        </member>
        <member name="M:cadencii.TrackSelector.getSelectedCurve">
            <summary>
            現在最前面に表示され，編集可能となっているカーブの種類を取得または設定します
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.valueFromYCoord(System.Int32)">
            <summary>
            エディタのy方向の位置から，カーブの値を求めます
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.TrackSelector.isCurveVisible">
            <summary>
            カーブエディタを表示するかどうかを取得します
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.setCurveVisible(System.Boolean)">
            <summary>
            カーブエディタを表示するかどうかを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.TrackSelector.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            オーバーライドされます
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:cadencii.TrackSelector.getScaleY">
            <summary>
            x軸方向の表示倍率。pixel/clock
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.getRectFromCurveType(cadencii.CurveType)">
            <summary>
            指定したコントロールカーブの名前を表示するボックスが，どの位置にあるかを計算します．
            </summary>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.TrackSelector.paint(cadencii.java.awt.Graphics2D)">
            <summary>
            コントロール画面を描画します
            </summary>
            <param name="graphics"></param>
        </member>
        <member name="M:cadencii.TrackSelector.drawEnvelope(cadencii.java.awt.Graphics2D,System.Int32,cadencii.java.awt.Color)">
            <summary>
            指定したトラックのエンベロープ，先行発音，オーバーラップを画面に描画します
            </summary>
            <param name="g"></param>
            <param name="track"></param>
            <param name="fill_color"></param>
        </member>
        <member name="M:cadencii.TrackSelector.getFlagTitle(System.Boolean,System.Single)">
            <summary>
            先行発音，またはオーバーラップを表示する旗に描く文字列を取得します
            </summary>
            <param name="flag_is_pre_utterance">先行発音用の文字列を取得する場合にtrue，そうでなければfalseを指定します</param>
            <param name="value">先行発音，またはオーバーラップの値</param>
            <returns>旗に描くための文字列（Overlap: 0.00など）</returns>
        </member>
        <member name="M:cadencii.TrackSelector.getFlagBounds(System.String)">
            <summary>
            指定した文字列を旗に書いたときの，旗のサイズを計算します
            </summary>
            <param name="flag_title"></param>
        </member>
        <member name="M:cadencii.TrackSelector.drawPreutteranceAndOverlap(cadencii.java.awt.Graphics2D,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            先行発音とオーバーラップを表示する旗を描画します
            </summary>
            <param name="g"></param>
            <param name="px_preutterance"></param>
            <param name="px_overlap"></param>
            <param name="preutterance"></param>
            <param name="overlap"></param>
        </member>
        <member name="M:cadencii.TrackSelector.findDataPointAt(System.Int32,System.Int32)">
            <summary>
            画面上の指定した点に、コントロールカーブのデータ点があるかどうかを調べます
            </summary>
            <param name="locx">調べたい点の画面上のx座標</param>
            <param name="locy">調べたい点の画面上のy座標</param>
            <returns>データ点が見つかれば，データ点のid，そうでなければ-1を返します</returns>
        </member>
        <member name="M:cadencii.TrackSelector.findEnvelopePointAt(System.Int32,System.Int32,cadencii.ByRef{System.Int32},cadencii.ByRef{System.Int32})">
            <summary>
            画面上の指定した点に、エンベロープのポイントがあるかどうかを調べます
            </summary>
            <param name="locx">調べたい点の画面上のx座標</param>
            <param name="locy">調べたい点の画面上のy座標</param>
            <param name="internal_id">見つかったエンベロープ・ポイントを保持しているVsqEventのID</param>
            <param name="point_kind">見つかったエンベロープ・ポイントのタイプ。(p1,v1)なら1、(p2,v2)なら2，(p5,v5)なら3，(p3,v3)なら4，(p4,v4)なら5</param>
            <returns>見つかった場合は真を、そうでなければ偽を返します</returns>
        </member>
        <member name="M:cadencii.TrackSelector.findPreUtteranceOrOverlapAt(System.Int32,System.Int32,cadencii.ByRef{System.Int32},cadencii.ByRef{System.Boolean})">
            <summary>
            画面上の指定した位置に，先行発音またはオーバーラップ用の旗が表示されているかどうかを調べます
            </summary>
            <param name="locx">調べたい点の画面上のx座標</param>
            <param name="locy">調べたい点の画面上のy座標</param>
            <param name="internal_id">見つかったイベントを表現するVsqEventのInternalID</param>
            <param name="found_flag_was_overlap">見つかった旗がオーバーラップのものであった場合にtrue，それ以外はfalse</param>
            <returns>旗が見つかった場合にtrue，それ以外はfalseを返します</returns>
        </member>
        <member name="M:cadencii.TrackSelector.findEnvelopeCore(System.Int32,System.Int32,cadencii.ByRef{System.Int32},cadencii.ByRef{System.Int32},cadencii.ByRef{System.Boolean})">
            <summary>
            findPreUtteranceOrOverlapAtとfindEnvelopePointAtから呼ばれるユーティリティ
            </summary>
            <param name="locx"></param>
            <param name="locy"></param>
            <param name="internal_id"></param>
            <param name="point_kind"></param>
            <param name="found_flag_was_overlap"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.TrackSelector.getEnvelopePoints(cadencii.vsq.TempoVector,cadencii.vsq.VsqEvent,cadencii.vsq.VsqEvent,cadencii.vsq.VsqEvent,cadencii.ByRef{System.Int32},cadencii.ByRef{System.Int32})">
            <summary>
            指定したアイテムのエンベロープを画面に描画するための多角形を取得します
            </summary>
            <param name="tempo_table">クロックから秒時を計算するためのテンポテーブル</param>
            <param name="prev_item">直前にある音符イベント，直前が休符(UTAUでのR)の場合はnull</param>
            <param name="item">エンベロープを調べる対象の音符イベント</param>
            <param name="next_item">直後にある音符イベント，直後が休符(UTAUでのR)の場合はnull</param>
            <param name="px_pre_utteramce">先行発音を描画するための旗のx座標</param>
            <param name="px_overlap">オーバーラップを描画するための旗のx座標</param>
            <returns>指定した音符イベントのエンベロープを描画するための多角形．x方向の単位は画面上のピクセル単位，y方向の単位はエンベロープの値と同じ単位</returns>
        </member>
        <member name="M:cadencii.TrackSelector.getEnvelopeRegion(cadencii.vsq.TempoVector,cadencii.vsq.VsqEvent,cadencii.vsq.VsqEvent,cadencii.vsq.VsqEvent,cadencii.ByRef{System.Double},cadencii.ByRef{System.Double})">
            <summary>
            前後の音符の有無や先行発音などにより，音符のエンベロープがどの範囲に及ぶかを調べます
            </summary>
            <param name="tempo_table">クロックを秒時に変換するためのテンポテーブル</param>
            <param name="item_prev">直前の音符．休符であればnullを指定する</param>
            <param name="item">調べる対象の音符</param>
            <param name="item_next">直後の音符．休符であればnullを指定する</param>
            <param name="env_start_sec">エンベロープの開始時刻(秒)</param>
            <param name="env_end_sec">エンベロープの終了時刻(秒)</param>
        </member>
        <member name="M:cadencii.TrackSelector.getSelectorWidth">
            <summary>
            トラック選択部分の、トラック1個分の幅を調べます。pixel
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.doInvalidate">
            <summary>
            コンポーネントを再描画する
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.drawVEL(cadencii.java.awt.Graphics2D,cadencii.vsq.VsqTrack,cadencii.java.awt.Color,System.Boolean,cadencii.CurveType)">
            <summary>
            ベロシティを、与えられたグラフィックgを用いて描画します
            </summary>
            <param name="g"></param>
            <param name="track"></param>
            <param name="color"></param>
            <param name="is_front"></param>
            <param name="type"></param>
        </member>
        <member name="M:cadencii.TrackSelector.drawAttachedCurve(cadencii.java.awt.Graphics2D,cadencii.java.util.Vector{cadencii.BezierChain})">
            <summary>
            ベジエ曲線によるコントロールカーブを描画します
            </summary>
            <param name="g"></param>
            <param name="chains"></param>
        </member>
        <member name="M:cadencii.TrackSelector.isVisibleOnScreen(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            スクリーンの範囲に直線が可視状態となるかを判定する
            </summary>
            <param name="visibleMinX"></param>
            <param name="visibleMaxX"></param>
            <param name="startX"></param>
            <param name="endX"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.TrackSelector.drawVibratoControlCurve(cadencii.java.awt.Graphics2D,cadencii.vsq.VsqTrack,cadencii.CurveType,cadencii.java.awt.Color,System.Boolean)">
            <summary>
            ビブラートのRate, Depthカーブを描画します
            </summary>
            <param name="g">描画に使用するグラフィックス</param>
            <param name="draw_target">描画対象のトラック</param>
            <param name="type">描画するカーブの種類</param>
            <param name="color">塗りつぶしに使う色</param>
            <param name="is_front">最前面に表示するモードかどうか</param>
        </member>
        <member name="M:cadencii.TrackSelector.drawVsqBPList(cadencii.java.awt.Graphics2D,cadencii.vsq.VsqBPList,cadencii.java.awt.Color,System.Boolean)">
            <summary>
            BPList(コントロールカーブ)を指定したグラフィックスを用いて描画します
            </summary>
            <param name="g">描画に使用するグラフィックス</param>
            <param name="list">描画するコントロールカーブ</param>
            <param name="color">X軸とデータ線の間の塗りつぶしに使用する色</param>
            <param name="is_front">最前面に表示するモードかどうか</param>
        </member>
        <member name="M:cadencii.TrackSelector.getGraphHeight">
            <summary>
            カーブエディタのグラフ部分の高さを取得します(pixel)
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.getGraphWidth">
            <summary>
            カーブエディタのグラフ部分の幅を取得します。(pixel)
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.getCounterPoint(cadencii.PointD,cadencii.PointD,cadencii.PointD,System.Double,System.Double)">
            <summary>
            slave_point_original, base_point, moving_pointがこの順で1直線に並んでいる時，
            base_pointを回転軸としてmoving_pointを動かした場合に，
            回転に伴ってslave_point_originalが移動した先の座標を計算します．
            ただし，上記の各点の座標値はscalex，scaleyを乗じた上で計算されます
            </summary>
            <param name="base_point"></param>
            <param name="slave_point_original"></param>
            <param name="moving_point"></param>
            <param name="scalex"></param>
            <param name="scaley"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.TrackSelector.findBezierPointAt(System.Int32,System.Int32,cadencii.java.util.Vector{cadencii.BezierChain},cadencii.ByRef{cadencii.BezierChain},cadencii.ByRef{cadencii.BezierPoint},cadencii.ByRef{cadencii.BezierPickedSide},System.Int32,System.Int32)">
            <summary>
            指定した位置にあるBezierPointを検索します。
            </summary>
            <param name="location"></param>
            <param name="list"></param>
            <param name="found_chain"></param>
            <param name="found_point"></param>
            <param name="found_side"></param>
            <param name="dot_width"></param>
            <param name="px_tolerance"></param>
        </member>
        <member name="M:cadencii.TrackSelector.findItemAt(System.Int32,System.Int32)">
            <summary>
            クリックされた位置にある音符イベントまたは歌手変更イベントを取得します
            </summary>
            <param name="location"></param>
            <param name="position_x"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.TrackSelector.prepareSingerMenu(cadencii.RendererKind)">
            <summary>
            指定した歌声合成システムの歌手のリストを作成し，コンテキストメニューを準備します．
            </summary>
            <param name="renderer"></param>
        </member>
        <member name="F:cadencii.TrackSelector.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.TrackSelector.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.TrackSelector.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="E:cadencii.TrackSelector.SelectedCurveChanged">
            <summary>
            最前面に表示するカーブの種類が変更されたとき発生するイベント．
            </summary>
        </member>
        <member name="E:cadencii.TrackSelector.SelectedTrackChanged">
            <summary>
            表示するトラック番号が変更されたとき発生するイベント．
            </summary>
        </member>
        <member name="E:cadencii.TrackSelector.CommandExecuted">
            <summary>
            VSQの編集コマンドが発行されたとき発生するイベント．
            </summary>
        </member>
        <member name="E:cadencii.TrackSelector.RenderRequired">
            <summary>
            トラックの歌声合成が要求されたとき発生するイベント．
            </summary>
        </member>
        <member name="E:cadencii.TrackSelector.PreferredMinHeightChanged">
            <summary>
            このコントロールの推奨最少表示高さが変わったとき発生するイベント．
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.VEL_WAIT_HOVER">
            <summary>
            マウス長押しによるVELの編集。マウスがDownされ、MouseHoverが発生するのを待っている状態
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.VEL_EDIT">
            <summary>
            マウス長押しによるVELの編集。MouseHoverが発生し、編集している状態
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.BEZIER_MODE">
            <summary>
            ベジエカーブのデータ点または制御点を移動させているモード
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.BEZIER_SELECT">
            <summary>
            ベジエカーブのデータ点の範囲選択をするモード
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.BEZIER_ADD_NEW">
            <summary>
            ベジエカーブのデータ点を新規に追加し、マウスドラッグにより制御点の位置を変えているモード
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.BEZIER_EDIT">
            <summary>
            既存のベジエカーブのデータ点を追加し、マウスドラッグにより制御点の位置を変えているモード
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.ENVELOPE_MOVE">
            <summary>
             エンベロープのデータ点を移動させているモード
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.PRE_UTTERANCE_MOVE">
            <summary>
            先行発音を移動させているモード
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.OVERLAP_MOVE">
            <summary>
            オーバーラップを移動させているモード
            </summary>
        </member>
        <member name="F:cadencii.TrackSelector.MouseDownMode.POINT_MOVE">
            <summary>
            データ点を移動しているモード
            </summary>
        </member>
        <member name="M:cadencii.UtauFreq.FromFrq(System.String)">
            <summary>
            *.frqファイルからのコンストラクタ
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:cadencii.ValuePairOfStringBoolean">
            <summary>
            ValuePair&lt;String,Boolean&gt;をXMLシリアライズするためのクラス
            </summary>
        </member>
        <member name="M:cadencii.ValuePairOfStringBoolean.#ctor">
            <summary>
            デフォルトのコンストラクタ．
            Key="", Value=falseで初期化されます．
            </summary>
        </member>
        <member name="M:cadencii.ValuePairOfStringBoolean.#ctor(System.String,System.Boolean)">
            <summary>
            初期値を指定したコンストラクタ
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.ValuePairOfStringBoolean.getKey">
            <summary>
            キー値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.ValuePairOfStringBoolean.setKey(System.String)">
            <summary>
            キー値を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.ValuePairOfStringBoolean.getValue">
            <summary>
            値を取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.ValuePairOfStringBoolean.setValue(System.Boolean)">
            <summary>
            値を設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.VersionInfo.getVersionColor">
            <summary>
            バージョン番号表示の文字色を取得または設定します
            </summary>
        </member>
        <member name="M:cadencii.VersionInfo.getAppNameColor">
            <summary>
            アプリケーション名表示の文字色を取得または設定します
            </summary>
        </member>
        <member name="F:cadencii.VersionInfo.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.VersionInfo.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.VersionInfo.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:cadencii.VibratoLengthEditingRule">
            <summary>
            音符長さが変更されるとき、ビブラート長さがどのように影響を受けるかを決定する列挙子
            </summary>
        </member>
        <member name="F:cadencii.VibratoLengthEditingRule.DELAY">
            <summary>
            音符頭からビブラート開始位置までのディレイが保存される
            </summary>
        </member>
        <member name="F:cadencii.VibratoLengthEditingRule.LENGTH">
            <summary>
            ビブラートの長さが保存される
            </summary>
        </member>
        <member name="F:cadencii.VibratoLengthEditingRule.PERCENTAGE">
            <summary>
            音符長さに対するビブラート長さの割合が保存される
            </summary>
        </member>
        <member name="T:cadencii.VibratoPointIteratorByClock">
            <summary>
            ビブラート用のデータ点のリストを取得します。返却されるリストは、{クロック, ビブラートの振幅(ノートナンバー単位)}の値ペアとなっています
            </summary>
        </member>
        <member name="T:cadencii.VibratoPointIteratorBySec">
            <summary>
            ビブラート用のデータ点のリストを取得します。返却されるリストは、{秒, ビブラートの振幅(ノートナンバー単位)}の値ペアとなっています
            </summary>
        </member>
        <member name="M:cadencii.VibratoPointIteratorBySec.getPeriodFromRate(System.Int32)">
            <summary>
            VibratoRate値からビブラートの周期を求めます。単位は秒
            </summary>
            <param name="rate"></param>
            <returns></returns>
        </member>
        <member name="F:cadencii.VolumeTracker.components">
            <summary> 
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:cadencii.VolumeTracker.Dispose(System.Boolean)">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:cadencii.VolumeTracker.InitializeComponent">
            <summary> 
            デザイナ サポートに必要なメソッドです。このメソッドの内容を 
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:cadencii.VsqBPListComparisonContext">
            <summary>
            VsqBPListを比較するための，比較用コンテキスト
            </summary>
        </member>
        <member name="F:cadencii.VsqFileEx.TAG_VSQTRACK_RESAMPLER_USED">
            <summary>
            トラックをUTAUモードで合成するとき，何番目の互換合成器で合成するかどうかを指定する
            </summary>
        </member>
        <member name="F:cadencii.VsqFileEx.RENDERER_NULL">
            <summary>
            EmtryRenderingRunnerが使用される
            </summary>
        </member>
        <member name="F:cadencii.VsqFileEx.cacheDir">
            <summary>
            キャッシュ用ディレクトリのパス
            </summary>
        </member>
        <member name="F:cadencii.VsqFileEx.config">
            <summary>
            シーケンスの設定
            <version>3.3+</version>
            </summary>
        </member>
        <member name="M:cadencii.VsqFileEx.getTrackResamplerUsed(cadencii.vsq.VsqTrack)">
            <summary>
            指定したトラックに対して使用する，UTAU互換合成器の番号を取得します
            </summary>
            <param name="vsq_track"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.VsqFileEx.setTrackResamplerUsed(cadencii.vsq.VsqTrack,System.Int32)">
            <summary>
            指定したトラックに対して使用するUTAU互換合成器の番号を設定します
            </summary>
            <param name="vsq_track"></param>
            <param name="index"></param>
        </member>
        <member name="M:cadencii.VsqFileEx.getTrackRendererKind(cadencii.vsq.VsqTrack)">
            <summary>
            指定したトラックの音声合成器の種類を取得します
            </summary>
            <param name="vsq_track"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.VsqFileEx.insertBlank(System.Int32,System.Int32)">
            <summary>
            指定した位置に，指定した量の空白を挿入します
            </summary>
            <param name="clock_start">空白を挿入する位置</param>
            <param name="clock_amount">挿入する空白の量</param>
        </member>
        <member name="M:cadencii.VsqFileEx.insertBlank(System.Int32,System.Int32,System.Int32)">
            <summary>
            指定した位置に，指定した量の空白を挿入します
            </summary>
            <param name="track">挿入を行う対象のトラック</param>
            <param name="clock_start">空白を挿入する位置</param>
            <param name="clock_amount">挿入する空白の量</param>
        </member>
        <member name="M:cadencii.VsqFileEx.removePart(System.Int32,System.Int32)">
            <summary>
            VSQファイルの指定されたクロック範囲のイベント等を削除します
            </summary>
            <param name="clock_start">削除を行う範囲の開始クロック</param>
            <param name="clock_end">削除を行う範囲の終了クロック</param>
        </member>
        <member name="M:cadencii.VsqFileEx.removePart(System.Int32,System.Int32,System.Int32)">
            <summary>
            指定したトラックの，指定した範囲のイベント等を削除します
            </summary>
            <param name="track">削除を行う対象のトラック</param>
            <param name="clock_start">削除を行う範囲の開始クロック</param>
            <param name="clock_end">削除を行う範囲の終了クロック</param>
        </member>
        <member name="M:cadencii.VsqFileEx.getActualMuted(System.Int32)">
            <summary>
            MasterMute, トラックのMute指定、トラックのSolo指定、トラックのPlayModeを考慮し、このVSQシーケンスの指定したトラックがミュートされた状態かどうかを判定します。
            </summary>
            <param name="track"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.VsqFileEx.getMasterMute">
            <summary>
            このVSQシーケンスのマスタートラックをミュートするかどうかを取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.VsqFileEx.setMasterMute(System.Boolean)">
            <summary>
            このVSQシーケンスのマスタートラックをミュートするかどうかを設定します。
            </summary>
        </member>
        <member name="M:cadencii.VsqFileEx.getMute(System.Int32)">
            <summary>
            このVSQシーケンスの指定したトラックをミュートするかどうかを取得します。
            </summary>
            <param name="track"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.VsqFileEx.setMute(System.Int32,System.Boolean)">
            <summary>
            このVSQシーケンスの指定したトラックをミュートするかどうかを設定します。
            </summary>
            <param name="track"></param>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.VsqFileEx.getSolo(System.Int32)">
            <summary>
            このVSQシーケンスの指定したトラックをソロモードとするかどうかを取得します。
            </summary>
            <param name="track"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.VsqFileEx.setSolo(System.Int32,System.Boolean)">
            <summary>
            このVSQシーケンスの指定したトラックをソロモードとするかどうかを設定します。
            </summary>
            <param name="track"></param>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.VsqFileEx.adjustClockToMatchWith(cadencii.vsq.TempoVector)">
            <summary>
            VsqEvent, VsqBPList, BezierCurvesの全てのクロックを、tempoに格納されているテンポテーブルに
            合致するようにシフトします
            </summary>
            <param name="work"></param>
            <param name="tempo"></param>
        </member>
        <member name="M:cadencii.VsqFileEx.shift(cadencii.VsqFileEx,System.Double,System.Int32)">
            <summary>
            指定秒数分，アイテムの時間をずらす．
            </summary>
            <param name="vsq">編集対象</param>
            <param name="sec">ずらす秒数．正の場合アイテムは後ろにずれる</param>
            <param name="first_tempo">ずらす秒数が正の場合に，最初のテンポをいくらにするか</param>
        </member>
        <member name="M:cadencii.VsqFileEx.generateCommandBgmUpdate(cadencii.java.util.Vector{cadencii.BgmFile})">
            <summary>
            BGMリストの内容を更新するコマンドを発行します
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.VsqFileEx.generateCommandDeleteTrack(System.Int32)">
            <summary>
            トラックを削除するコマンドを発行します。VstRendererを取り扱う関係上、VsqCommandを使ってはならない。
            </summary>
            <param name="track"></param>
            <returns></returns>
        </member>
        <member name="M:cadencii.VsqFileEx.generateCommandAddTrack(cadencii.vsq.VsqTrack,cadencii.vsq.VsqMixerEntry,System.Int32,cadencii.BezierCurves)">
            <summary>
            トラックを追加するコマンドを発行します．VstRendererを取り扱う関係上、VsqCommandを使ってはならない。
            </summary>
            <param name="track"></param>
            <returns></returns>
        </member>
        <member name="T:VstSdk.Constants">
            <summary>
            定数値のコンテナクラス
            </summary>
        </member>
        <member name="F:VstSdk.Constants.kVstVersion">
            <summary>
            VST SDKのバージョンを表す定数
            </summary>
        </member>
        <member name="T:VstSdk.VstStringConstants">
            <summary>
            String length limits (in characters excl. 0 byte)
            </summary>
        </member>
        <member name="F:VstSdk.VstStringConstants.kVstMaxProgNameLen">
            <summary>
            used for #effGetProgramName, #effSetProgramName, #effGetProgramNameIndexed
            </summary>
        </member>
        <member name="F:VstSdk.VstStringConstants.kVstMaxParamStrLen">
            <summary>
            used for #effGetParamLabel, #effGetParamDisplay, #effGetParamName
            </summary>
        </member>
        <member name="F:VstSdk.VstStringConstants.kVstMaxVendorStrLen">
            <summary>
            used for #effGetVendorString, #audioMasterGetVendorString
            </summary>
        </member>
        <member name="F:VstSdk.VstStringConstants.kVstMaxProductStrLen">
            <summary>
            used for #effGetProductString, #audioMasterGetProductString
            </summary>
        </member>
        <member name="F:VstSdk.VstStringConstants.kVstMaxEffectNameLen">
            <summary>
            used for #effGetEffectName
            </summary>
        </member>
        <member name="F:VstSdk.AudioMasterOpcodes.audioMasterAutomate">
            <summary>
            [index]: parameter index [opt]: parameter value  @see AudioEffect::setParameterAutomated
            </summary>
        </member>
        <member name="F:VstSdk.AudioMasterOpcodes.audioMasterVersion">
            <summary>
            [return value]: Host VST version (for example 2400 for VST 2.4) @see AudioEffect::getMasterVersion
            </summary>
        </member>
        <member name="F:VstSdk.AudioMasterOpcodes.audioMasterCurrentId">
            <summary>
            [return value]: current unique identifier on shell plug-in  @see AudioEffect::getCurrentUniqueId
            </summary>
        </member>
        <member name="F:VstSdk.AudioMasterOpcodes.audioMasterIdle">
            <summary>
            no arguments  @see AudioEffect::masterIdle
            </summary>
        </member>
        <member name="F:VstSdk.AudioMasterOpcodes.__audioMasterPinConnectedDeprecated">
            <summary>
            deprecated in VST 2.4 r2
            </summary>
        </member>
        <member name="T:VstSdk.AEffectOpcodes">
            <summary>
            Basic dispatcher Opcodes (Host to Plug-in)
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effOpen">
            <summary>
            no arguments  @see AudioEffect::open
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effClose">
            <summary>
            no arguments  @see AudioEffect::close
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effSetProgram">
            <summary>
            [value]: new program number  @see AudioEffect::setProgram
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effGetProgram">
            <summary>
            [return value]: current program number  @see AudioEffect::getProgram
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effSetProgramName">
            <summary>
            [ptr]: char* with new program name, limited to #kVstMaxProgNameLen  @see AudioEffect::setProgramName
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effGetProgramName">
            <summary>
            [ptr]: char buffer for current program name, limited to #kVstMaxProgNameLen  @see AudioEffect::getProgramName
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effGetParamLabel">
            <summary>
            [ptr]: char buffer for parameter label, limited to #kVstMaxParamStrLen  @see AudioEffect::getParameterLabel
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effGetParamDisplay">
            <summary>
            [ptr]: char buffer for parameter display, limited to #kVstMaxParamStrLen  @see AudioEffect::getParameterDisplay
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effGetParamName">
            <summary>
            [ptr]: char buffer for parameter name, limited to #kVstMaxParamStrLen  @see AudioEffect::getParameterName
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.__effGetVuDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effSetSampleRate">
            <summary>
            [opt]: new sample rate for audio processing  @see AudioEffect::setSampleRate
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effSetBlockSize">
            <summary>
            [value]: new maximum block size for audio processing  @see AudioEffect::setBlockSize
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effMainsChanged">
            <summary>
            [value]: 0 means "turn off", 1 means "turn on"  @see AudioEffect::suspend @see AudioEffect::resume
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effEditGetRect">
            <summary>
            [ptr]: #ERect** receiving pointer to editor size  @see ERect @see AEffEditor::getRect
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effEditOpen">
            <summary>
            [ptr]: system dependent Window pointer, e.g. HWND on Windows  @see AEffEditor::open
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effEditClose">
            <summary>
            no arguments @see AEffEditor::close
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.__effEditDrawDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.__effEditMouseDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.__effEditKeyDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effEditIdle">
            <summary>
            no arguments @see AEffEditor::idle
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.__effEditTopDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.__effEditSleepDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.__effIdentifyDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effGetChunk">
            <summary>
            [ptr]: void** for chunk data address [index]: 0 for bank, 1 for program  @see AudioEffect::getChunk
            </summary>
        </member>
        <member name="F:VstSdk.AEffectOpcodes.effSetChunk">
            <summary>
            [ptr]: chunk data [value]: byte size [index]: 0 for bank, 1 for program  @see AudioEffect::setChunk
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effProcessEvents">
            <summary>
            [ptr]: #VstEvents*  @see AudioEffectX::processEvents
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effCanBeAutomated">
            <summary>
            [index]: parameter index [return value]: 1=true, 0=false  @see AudioEffectX::canParameterBeAutomated
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effString2Parameter">
            <summary>
            [index]: parameter index [ptr]: parameter String [return value]: true for success  @see AudioEffectX::string2parameter
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effGetNumProgramCategoriesDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetProgramNameIndexed">
            <summary>
            [index]: program index [ptr]: buffer for program name, limited to #kVstMaxProgNameLen [return value]: true for success  @see AudioEffectX::getProgramNameIndexed
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effCopyProgramDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effConnectInputDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effConnectOutputDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetInputProperties">
            <summary>
            [index]: input index [ptr]: #VstPinProperties* [return value]: 1 if supported  @see AudioEffectX::getInputProperties
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetOutputProperties">
            <summary>
            [index]: output index [ptr]: #VstPinProperties* [return value]: 1 if supported  @see AudioEffectX::getOutputProperties
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetPlugCategory">
            <summary>
            [return value]: category  @see VstPlugCategory @see AudioEffectX::getPlugCategory
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effGetCurrentPositionDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effGetDestinationBufferDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effOfflineNotify">
            <summary>
            [ptr]: #VstAudioFile array [value]: count [index]: start flag  @see AudioEffectX::offlineNotify
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effOfflinePrepare">
            <summary>
            [ptr]: #VstOfflineTask array [value]: count  @see AudioEffectX::offlinePrepare
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effOfflineRun">
            <summary>
            [ptr]: #VstOfflineTask array [value]: count  @see AudioEffectX::offlineRun
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effProcessVarIo">
            <summary>
            [ptr]: #VstVariableIo*  @see AudioEffectX::processVariableIo
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effSetSpeakerArrangement">
            <summary>
            [value]: input #VstSpeakerArrangement* [ptr]: output #VstSpeakerArrangement*  @see AudioEffectX::setSpeakerArrangement
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effSetBlockSizeAndSampleRateDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effSetBypass">
            <summary>
            [value]: 1 = bypass, 0 = no bypass  @see AudioEffectX::setBypass
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetEffectName">
            <summary>
            [ptr]: buffer for effect name, limited to #kVstMaxEffectNameLen  @see AudioEffectX::getEffectName
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effGetErrorTextDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetVendorString">
            <summary>
            [ptr]: buffer for effect vendor String, limited to #kVstMaxVendorStrLen  @see AudioEffectX::getVendorString
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetProductString">
            <summary>
            [ptr]: buffer for effect vendor String, limited to #kVstMaxProductStrLen  @see AudioEffectX::getProductString
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetVendorVersion">
            <summary>
            [return value]: vendor-specific version  @see AudioEffectX::getVendorVersion
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effVendorSpecific">
            <summary>
            no definition, vendor specific handling  @see AudioEffectX::vendorSpecific
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effCanDo">
            <summary>
            [ptr]: "can do" String [return value]: 0: "don't know" -1: "no" 1: "yes"  @see AudioEffectX::canDo
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetTailSize">
            <summary>
            [return value]: tail size (for example the reverb time of a reverb plug-in); 0 is default (return 1 for 'no tail')
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effIdleDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effGetIconDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effSetViewPositionDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetParameterProperties">
            <summary>
            [index]: parameter index [ptr]: #VstParameterProperties* [return value]: 1 if supported  @see AudioEffectX::getParameterProperties
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.__effKeysRequiredDeprecated">
            <summary>
            deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetVstVersion">
            <summary>
            [return value]: VST version  @see AudioEffectX::getVstVersion
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effEditKeyDown">
            <summary>
            [index]: ASCII character [value]: virtual key [opt]: modifiers [return value]: 1 if key used  @see AEffEditor::onKeyDown
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effEditKeyUp">
            <summary>
            [index]: ASCII character [value]: virtual key [opt]: modifiers [return value]: 1 if key used  @see AEffEditor::onKeyUp
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effSetEditKnobMode">
            <summary>
            [value]: knob mode 0: circular, 1: circular relativ, 2: linear (CKnobMode in VSTGUI)  @see AEffEditor::setKnobMode
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetMidiProgramName">
            <summary>
            [index]: MIDI channel [ptr]: #MidiProgramName* [return value]: number of used programs, 0 if unsupported  @see AudioEffectX::getMidiProgramName
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetCurrentMidiProgram">
            <summary>
            [index]: MIDI channel [ptr]: #MidiProgramName* [return value]: index of current program  @see AudioEffectX::getCurrentMidiProgram
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetMidiProgramCategory">
            <summary>
            [index]: MIDI channel [ptr]: #MidiProgramCategory* [return value]: number of used categories, 0 if unsupported  @see AudioEffectX::getMidiProgramCategory
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effHasMidiProgramsChanged">
            <summary>
            [index]: MIDI channel [return value]: 1 if the #MidiProgramName(s) or #MidiKeyName(s) have changed  @see AudioEffectX::hasMidiProgramsChanged
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetMidiKeyName">
            <summary>
            [index]: MIDI channel [ptr]: #MidiKeyName* [return value]: true if supported, false otherwise  @see AudioEffectX::getMidiKeyName
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effBeginSetProgram">
            <summary>
            no arguments  @see AudioEffectX::beginSetProgram
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effEndSetProgram">
            <summary>
            no arguments  @see AudioEffectX::endSetProgram
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetSpeakerArrangement">
            <summary>
            [value]: input #VstSpeakerArrangement* [ptr]: output #VstSpeakerArrangement*  @see AudioEffectX::getSpeakerArrangement
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effShellGetNextPlugin">
            <summary>
            [ptr]: buffer for plug-in name, limited to #kVstMaxProductStrLen [return value]: next plugin's uniqueID  @see AudioEffectX::getNextShellPlugin
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effStartProcess">
            <summary>
            no arguments  @see AudioEffectX::startProcess
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effStopProcess">
            <summary>
            no arguments  @see AudioEffectX::stopProcess
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effSetTotalSampleToProcess">
            <summary>
            [value]: number of samples to process, offline only!  @see AudioEffectX::setTotalSampleToProcess
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effSetPanLaw">
            <summary>
            [value]: pan law [opt]: gain  @see VstPanLawType @see AudioEffectX::setPanLaw
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effBeginLoadBank">
            <summary>
            [ptr]: #VstPatchChunkInfo* [return value]: -1: bank can't be loaded, 1: bank can be loaded, 0: unsupported  @see AudioEffectX::beginLoadBank
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effBeginLoadProgram">
            <summary>
            [ptr]: #VstPatchChunkInfo* [return value]: -1: prog can't be loaded, 1: prog can be loaded, 0: unsupported  @see AudioEffectX::beginLoadProgram
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effSetProcessPrecision">
            <summary>
            [value]: @see VstProcessPrecision  @see AudioEffectX::setProcessPrecision
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetNumMidiInputChannels">
            <summary>
            [return value]: number of used MIDI input channels (1-15)  @see AudioEffectX::getNumMidiInputChannels
            </summary>
        </member>
        <member name="F:VstSdk.AEffectXOpcodes.effGetNumMidiOutputChannels">
            <summary>
            [return value]: number of used MIDI output channels (1-15)  @see AudioEffectX::getNumMidiOutputChannels
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.effFlagsHasEditor">
            <summary>
            set if the plug-in provides a custom editor
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.effFlagsCanReplacing">
            <summary>
            supports replacing process mode (which should the default mode in VST 2.4)
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.effFlagsProgramChunks">
            <summary>
            program data is handled in formatless chunks
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.effFlagsIsSynth">
            <summary>
            plug-in is a synth (VSTi), Host may assign mixer channels for its outputs
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.effFlagsNoSoundInStop">
            <summary>
            plug-in does not produce sound when input is all silence
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.effFlagsCanDoubleReplacing">
            <summary>
            plug-in supports double precision processing
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.__effFlagsHasClipDeprecated">
            <summary>
            \deprecated deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.__effFlagsHasVuDeprecated">
            <summary>
            \deprecated deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.__effFlagsCanMonoDeprecated">
            <summary>
            \deprecated deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.__effFlagsExtIsAsyncDeprecated">
            <summary>
            \deprecated deprecated in VST 2.4
            </summary>
        </member>
        <member name="F:VstSdk.VstAEffectFlags.__effFlagsExtHasBufferDeprecated">
            <summary>
            \deprecated deprecated in VST 2.4
            </summary>
        </member>
        <member name="M:VstSdk.AEffectWrapper.Dispatch(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Single)">
            <summary>
            Host to Plug-in dispatcher @see AudioEffect::dispatcher
            </summary>
        </member>
        <member name="M:VstSdk.AEffectWrapper.__ProcessDeprecated(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            deprecated Accumulating process mode is deprecated in VST 2.4! Use AEffect::processReplacing instead!
            </summary>
        </member>
        <member name="M:VstSdk.AEffectWrapper.SetParameter(System.Int32,System.Single)">
            <summary>
            Set new value of automatable parameter @see AudioEffect::setParameter
            </summary>
        </member>
        <member name="M:VstSdk.AEffectWrapper.GetParameter(System.Int32)">
            <summary>
            Returns current value of automatable parameter @see AudioEffect::getParameter
            </summary>
        </member>
        <member name="M:VstSdk.AEffectWrapper.ProcessReplacing(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Process audio samples in replacing mode @see AudioEffect::processReplacing
            </summary>
        </member>
        <member name="M:VstSdk.AEffectWrapper.ProcessDoubleReplacing(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Process double-precision audio samples in replacing mode @see AudioEffect::processDoubleReplacing
            </summary>
            <param name="inputs"></param>
            <param name="outputs"></param>
            <param name="sampleFrames"></param>
        </member>
        <member name="F:VstSdk.AEffect.magic">
            <summary>
            must be #kEffectMagic ('VstP')
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.numPrograms">
            <summary>
            number of programs
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.numParams">
            <summary>
            all programs are assumed to have numParams parameters
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.numInputs">
            <summary>
            number of audio inputs
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.numOutputs">
            <summary>
            number of audio outputs
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.flags">
            <summary>
            @see VstAEffectFlags
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.resvd1">
            <summary>
            reserved for Host, must be 0
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.resvd2">
            <summary>
            reserved for Host, must be 0
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.initialDelay">
            <summary>
            for algorithms which need input in the first place (Group delay or latency in Samples). This value should be initialized in a resume state.
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.__realQualitiesDeprecated">
            <summary>
            unused member
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.__offQualitiesDeprecated">
            <summary>
            unused member
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.__ioRatioDeprecated">
            <summary>
            unused member
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.obj">
            <summary>
            #AudioEffect class pointer
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.user">
            <summary>
            user-defined pointer
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.uniqueID">
            <summary>
            registered unique identifier (register it at Steinberg 3rd party support Web). This is used to identify a plug-in during save+load of preset and project.
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.version">
            <summary>
            plug-in version (example 1100 for version 1.1.0.0)
            </summary>
        </member>
        <member name="F:VstSdk.AEffect.future01">
            <summary>
            reserved for future use (please zero)
            </summary>
        </member>
        <member name="T:VstSdk.VstEvent">
            <summary>
            A generic timestamped event.
            </summary>
        </member>
        <member name="F:VstSdk.VstEvent.type">
            <summary>
            @see VstEventTypes
            </summary>
        </member>
        <member name="F:VstSdk.VstEvent.byteSize">
            <summary>
            size of this event, excl. type and byteSize
            </summary>
        </member>
        <member name="F:VstSdk.VstEvent.deltaFrames">
            <summary>
            sample frames related to the current block start sample position
            </summary>
        </member>
        <member name="F:VstSdk.VstEvent.flags">
            <summary>
            generic flags, none defined yet
            </summary>
        </member>
        <member name="F:VstSdk.VstEvent.data">
            <summary>
            data size may vary, depending on event type
            </summary>
        </member>
        <member name="F:VstSdk.VstEventTypes.kVstMidiType">
            <summary>
            MIDI event  @see VstMidiEvent
            </summary>
        </member>
        <member name="F:VstSdk.VstEventTypes.__kVstAudioTypeDeprecated">
            <summary>
            unused event type
            </summary>
        </member>
        <member name="F:VstSdk.VstEventTypes.__kVstVideoTypeDeprecated">
            <summary>
            unused event type
            </summary>
        </member>
        <member name="F:VstSdk.VstEventTypes.__kVstParameterTypeDeprecated">
            <summary>
            unused event type
            </summary>
        </member>
        <member name="F:VstSdk.VstEventTypes.__kVstTriggerTypeDeprecated">
            <summary>
            unused event type
            </summary>
        </member>
        <member name="F:VstSdk.VstEventTypes.kVstSysExType">
            <summary>
            MIDI system exclusive  @see VstMidiSysexEvent
            </summary>
        </member>
        <member name="T:VstSdk.VstEvents">
            <summary>
            A block of events for the current processed audio block.
            </summary>
        </member>
        <member name="F:VstSdk.VstEvents.numEvents">
            <summary>
            number of Events in array
            </summary>
        </member>
        <member name="F:VstSdk.VstEvents.reserved">
            <summary>
            zero (Reserved for future use)
            </summary>
        </member>
        <member name="F:VstSdk.VstEvents.events">
            <summary>
            event pointer array, variable size
            </summary>
        </member>
        <member name="T:VstSdk.VstMidiEvent">
            <summary>
            MIDI Event (to be casted from VstEvent).
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.type">
            <summary>
            #kVstMidiType
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.byteSize">
            <summary>
            sizeof (VstMidiEvent)
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.deltaFrames">
            <summary>
            sample frames related to the current block start sample position
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.flags">
            <summary>
            @see VstMidiEventFlags
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.noteLength">
            <summary>
            (in sample frames) of entire note, if available, else 0
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.noteOffset">
            <summary>
            offset (in sample frames) into note from note start if available, else 0
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.midiData">
            <summary>
            1 to 3 MIDI bytes; midiData[3] is reserved (zero)
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.detune">
            <summary>
            -64 to +63 cents; for scales other than 'well-tempered' ('microtuning')
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.noteOffVelocity">
            <summary>
            Note Off Velocity [0, 127]
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.reserved1">
            <summary>
            zero (Reserved for future use)
            </summary>
        </member>
        <member name="F:VstSdk.VstMidiEvent.reserved2">
            <summary>
            zero (Reserved for future use)
            </summary>
        </member>
        <member name="F:VstSdk.ERect.top">
            <summary>
            top coordinate
            </summary>
        </member>
        <member name="F:VstSdk.ERect.left">
            <summary>
            left coordinate
            </summary>
        </member>
        <member name="F:VstSdk.ERect.bottom">
            <summary>
            bottom coordinate
            </summary>
        </member>
        <member name="F:VstSdk.ERect.right">
            <summary>
            right coordinate
            </summary>
        </member>
        <member name="M:cadencii.new_.WaveDrawContext.draw(cadencii.java.awt.Graphics2D,cadencii.java.awt.Color,cadencii.java.awt.Rectangle,System.Int32,System.Int32,cadencii.vsq.TempoVector,System.Single,System.Single)">
            <summary>
            このWAVE描画コンテキストが保持しているWAVEデータを、ゲートタイム基準でグラフィクスに描画します。
            縦軸の拡大率は引数<paramref name="scale_y"/>で指定します。
            </summary>
            <param name="g">描画に使用するグラフィクスオブジェクト</param>
            <param name="pen">描画に使用するペン</param>
            <param name="rect">描画範囲</param>
            <param name="clock_start">描画開始位置のゲートタイム</param>
            <param name="clock_end">描画終了位置のゲートタイム</param>
            <param name="tempo_table">ゲートタイムから秒数を調べる際使用するテンポ・テーブル</param>
            <param name="pixel_per_clock">ゲートタイムあたりの秒数</param>
            <param name="scale_y">Y軸方向の描画スケール。デフォルトは1.0</param>
        </member>
        <member name="M:cadencii.new_.WaveDrawContext.draw(cadencii.java.awt.Graphics2D,cadencii.java.awt.Color,cadencii.java.awt.Rectangle,System.Int32,System.Int32,cadencii.vsq.TempoVector,System.Single)">
            <summary>
            このWAVE描画コンテキストが保持しているWAVEデータを、ゲートタイム基準でグラフィクスに描画します。
            縦軸は最大振幅がちょうど描画範囲に収まるよう調節されます。
            </summary>
            <param name="g">描画に使用するグラフィクスオブジェクト</param>
            <param name="pen">描画に使用するペン</param>
            <param name="rect">描画範囲</param>
            <param name="clock_start">描画開始位置のゲートタイム</param>
            <param name="clock_end">描画終了位置のゲートタイム</param>
            <param name="tempo_table">ゲートタイムから秒数を調べる際使用するテンポ・テーブル</param>
            <param name="pixel_per_clock">ゲートタイムあたりの秒数</param>
        </member>
        <member name="M:cadencii.new_.WaveDrawContext.drawCore(cadencii.java.awt.Graphics2D,cadencii.java.awt.Color,cadencii.java.awt.Rectangle,System.Int32,System.Int32,cadencii.vsq.TempoVector,System.Single,System.Single,System.Boolean)">
            <summary>
            このWAVE描画コンテキストが保持しているWAVEデータを、ゲートタイム基準でグラフィクスに描画します。
            </summary>
            <param name="g">描画に使用するグラフィクスオブジェクト</param>
            <param name="pen">描画に使用するペン</param>
            <param name="rect">描画範囲</param>
            <param name="clock_start">描画開始位置のゲートタイム</param>
            <param name="clock_end">描画終了位置のゲートタイム</param>
            <param name="tempo_table">ゲートタイムから秒数を調べる際使用するテンポ・テーブル</param>
            <param name="pixel_per_clock">ゲートタイムあたりの秒数</param>
            <param name="scale_y">Y軸方向の描画スケール。デフォルトは1.0</param>
            <param name="auto_maximize">自動で最大化するかどうか</param>
        </member>
        <member name="T:cadencii.WaveDrawContext">
            <summary>
            WAVEファイルのデータをグラフィクスに書き込む操作を行うクラス
            </summary>
        </member>
        <member name="M:cadencii.WaveDrawContext.#ctor(System.String)">
            <summary>
            読み込むWAVEファイルを指定したコンストラクタ。初期化と同時にWAVEファイルの読込みを行います。
            </summary>
            <param name="file">読み込むWAVEファイルのパス</param>
        </member>
        <member name="M:cadencii.WaveDrawContext.#ctor">
            <summary>
            デフォルトのコンストラクタ。
            </summary>
        </member>
        <member name="M:cadencii.WaveDrawContext.unload">
            <summary>
            保持しているWAVEデータを破棄します。
            </summary>
        </member>
        <member name="M:cadencii.WaveDrawContext.reloadPartial(System.String,System.Double,System.Double)">
            <summary>
            指定したファイルの指定した区間を追加で読み込みます
            </summary>
            <param name="file"></param>
            <param name="sec_from"></param>
            <param name="sec_to"></param>
        </member>
        <member name="M:cadencii.WaveDrawContext.load(System.String)">
            <summary>
            WAVEファイルを読み込みます。
            </summary>
            <param name="file">読み込むWAVEファイルのパス</param>
        </member>
        <member name="M:cadencii.WaveDrawContext.getName">
            <summary>
            このWAVE描画コンテキストの名前を取得します。
            </summary>
            <returns>この描画コンテキストの名前</returns>
        </member>
        <member name="M:cadencii.WaveDrawContext.setName(System.String)">
            <summary>
            このWAVE描画コンテキストの名前を設定します。
            </summary>
            <param name="value">この描画コンテキストの名前</param>
        </member>
        <member name="M:cadencii.WaveDrawContext.getLength">
            <summary>
            このWAVE描画コンテキストが保持しているWAVEデータの、秒数を取得します。
            </summary>
            <returns>保持しているWAVEデータの長さ(秒)</returns>
        </member>
        <member name="M:cadencii.WaveDrawContext.Finalize">
            <summary>
            デストラクタ。disposeメソッドを呼び出します。
            </summary>
        </member>
        <member name="M:cadencii.WaveDrawContext.Dispose">
            <summary>
            このWAVE描画コンテキストが使用しているリソースを開放します。
            </summary>
        </member>
        <member name="M:cadencii.WaveDrawContext.dispose">
            <summary>
            このWAVE描画コンテキストが使用しているリソースを開放します。
            </summary>
        </member>
        <member name="M:cadencii.WaveDrawContext.draw(cadencii.java.awt.Graphics2D,cadencii.java.awt.Color,cadencii.java.awt.Rectangle,System.Int32,System.Int32,cadencii.vsq.TempoVector,System.Single,System.Single)">
            <summary>
            このWAVE描画コンテキストが保持しているWAVEデータを、ゲートタイム基準でグラフィクスに描画します。
            縦軸の拡大率は引数<paramref name="scale_y"/>で指定します。
            </summary>
            <param name="g">描画に使用するグラフィクスオブジェクト</param>
            <param name="pen">描画に使用するペン</param>
            <param name="rect">描画範囲</param>
            <param name="clock_start">描画開始位置のゲートタイム</param>
            <param name="clock_end">描画終了位置のゲートタイム</param>
            <param name="tempo_table">ゲートタイムから秒数を調べる際使用するテンポ・テーブル</param>
            <param name="pixel_per_clock">ゲートタイムあたりの秒数</param>
            <param name="scale_y">Y軸方向の描画スケール。デフォルトは1.0</param>
        </member>
        <member name="M:cadencii.WaveDrawContext.draw(cadencii.java.awt.Graphics2D,cadencii.java.awt.Color,cadencii.java.awt.Rectangle,System.Int32,System.Int32,cadencii.vsq.TempoVector,System.Single)">
            <summary>
            このWAVE描画コンテキストが保持しているWAVEデータを、ゲートタイム基準でグラフィクスに描画します。
            縦軸は最大振幅がちょうど描画範囲に収まるよう調節されます。
            </summary>
            <param name="g">描画に使用するグラフィクスオブジェクト</param>
            <param name="pen">描画に使用するペン</param>
            <param name="rect">描画範囲</param>
            <param name="clock_start">描画開始位置のゲートタイム</param>
            <param name="clock_end">描画終了位置のゲートタイム</param>
            <param name="tempo_table">ゲートタイムから秒数を調べる際使用するテンポ・テーブル</param>
            <param name="pixel_per_clock">ゲートタイムあたりの秒数</param>
        </member>
        <member name="M:cadencii.WaveDrawContext.drawCore(cadencii.java.awt.Graphics2D,cadencii.java.awt.Color,cadencii.java.awt.Rectangle,System.Int32,System.Int32,cadencii.vsq.TempoVector,System.Single,System.Single,System.Boolean)">
            <summary>
            このWAVE描画コンテキストが保持しているWAVEデータを、ゲートタイム基準でグラフィクスに描画します。
            </summary>
            <param name="g">描画に使用するグラフィクスオブジェクト</param>
            <param name="pen">描画に使用するペン</param>
            <param name="rect">描画範囲</param>
            <param name="clock_start">描画開始位置のゲートタイム</param>
            <param name="clock_end">描画終了位置のゲートタイム</param>
            <param name="tempo_table">ゲートタイムから秒数を調べる際使用するテンポ・テーブル</param>
            <param name="pixel_per_clock">ゲートタイムあたりの秒数</param>
            <param name="scale_y">Y軸方向の描画スケール。デフォルトは1.0</param>
            <param name="auto_maximize">自動で最大化するかどうか</param>
        </member>
        <member name="T:cadencii.WaveUnitConfig">
            <summary>
            WaveUnitの設定と，他のWaveUnitとの接続関係の情報を保持する
            </summary>
        </member>
        <member name="F:cadencii.WaveUnitConfig.Elements">
            <summary>
            WaveUnitの設定値のキーと値の組のリストを保持する
            </summary>
        </member>
        <member name="M:cadencii.WaveUnitConfig.putElement(System.String,System.String)">
            <summary>
            設定値のキーと値の組を追加する
            </summary>
            <param name="key">キー</param>
            <param name="value">値</param>
        </member>
        <member name="M:cadencii.WaveUnitConfig.getElement(System.String)">
            <summary>
            指定したキーに対応する値を取得する
            </summary>
            <param name="key">キー</param>
            <returns>値．存在しないキーを指定した場合空文字を返す</returns>
        </member>
        <member name="T:cadencii.WaveUnitConfigElement">
            <summary>
            WaveUnitの設定項目1個分を表現する
            </summary>
        </member>
        <member name="F:cadencii.WaveUnitConfigElement.SEPARATOR">
            <summary>
            キーと値を区切るのに使用する文字列
            </summary>
        </member>
        <member name="F:cadencii.WaveUnitConfigElement.key">
            <summary>
            設定項目のキー
            </summary>
        </member>
        <member name="F:cadencii.WaveUnitConfigElement.value">
            <summary>
            設定項目の値
            </summary>
        </member>
        <member name="M:cadencii.WaveUnitConfigElement.getKey">
            <summary>
            設定項目のキーを取得する
            </summary>
            <returns>設定項目のキー</returns>
        </member>
        <member name="M:cadencii.WaveUnitConfigElement.setKey(System.String)">
            <summary>
            設定項目のキーを設定する
            </summary>
            <param name="value">設定項目のキー</param>
        </member>
        <member name="M:cadencii.WaveUnitConfigElement.getValue">
            <summary>
            設定項目の値を取得する
            </summary>
            <returns>設定項目の値</returns>
        </member>
        <member name="M:cadencii.WaveUnitConfigElement.setValue(System.String)">
            <summary>
            設定項目の値を設定する
            </summary>
            <param name="value">設定項目の値</param>
        </member>
        <member name="M:cadencii.WaveUnitConfigElement.toString">
            <summary>
            設定項目のキーと値をつなげた文字列を返す
            </summary>
            <returns>"キー:値"という形式の文字列</returns>
        </member>
        <member name="M:cadencii.WaveUnitConfigElement.ToString">
            <summary>
            オーバーライドされる
            設定項目のキーと値をつなげた文字列を返す
            </summary>
            <returns>"キー:値"という形式の文字列</returns>
        </member>
        <member name="T:cadencii.WaveView">
            <summary>
            トラック16個分の波形描画コンテキストを保持し、それらの描画を行うコンポーネントです。
            </summary>
        </member>
        <member name="F:cadencii.WaveView.mDrawer">
            <summary>
            波形描画用のコンテキスト
            </summary>
        </member>
        <member name="F:cadencii.WaveView.mGraphics">
            <summary>
            グラフィクスオブジェクトのキャッシュ
            </summary>
        </member>
        <member name="F:cadencii.WaveView.mScale">
            <summary>
            縦軸方向のスケール
            </summary>
        </member>
        <member name="F:cadencii.WaveView.mBorderColor">
            <summary>
            左側のボタン部との境界線の色
            </summary>
        </member>
        <member name="F:cadencii.WaveView.mAutoMaximize">
            <summary>
            縦軸のスケールを自動最大化するかどうか
            </summary>
        </member>
        <member name="F:cadencii.WaveView.mStroke2px">
            <summary>
            幅2ピクセルのストローク
            </summary>
        </member>
        <member name="F:cadencii.WaveView.mStrokeDefault">
            <summary>
            デフォルトのストローク
            </summary>
        </member>
        <member name="M:cadencii.WaveView.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:cadencii.WaveView.isAutoMaximize">
            <summary>
            縦軸を自動最大化するかどうかを取得します
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveView.setAutoMaximize(System.Boolean)">
            <summary>
            縦軸を自動最大化するかどうかを設定します
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.WaveView.paint(cadencii.java.awt.Graphics)">
            <summary>
            コンポーネントの描画関数です
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:cadencii.WaveView.scale">
            <summary>
            縦方向の描画倍率を取得します。
            </summary>
            <seealso cref="M:cadencii.WaveView.getScale"/>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveView.getScale">
            <summary>
            縦方向の描画倍率を取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:cadencii.WaveView.setScale(System.Single)">
            <summary>
            縦方向の描画倍率を設定します。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:cadencii.WaveView.unloadAll">
            <summary>
            全ての波形描画コンテキストが保持しているデータをクリアします
            </summary>
        </member>
        <member name="M:cadencii.WaveView.reloadPartial(System.Int32,System.String,System.Double,System.Double)">
            <summary>
            波形描画コンテキストに、指定したWAVEファイルの指定区間を再度読み込みます。
            </summary>
            <param name="index">読込を行わせる波形描画コンテキストのインデックス</param>
            <param name="file">読み込むWAVEファイルのパス</param>
            <param name="sec_from">読み込み区間の開始秒時</param>
            <param name="sec_to">読み込み区間の終了秒時</param>
        </member>
        <member name="M:cadencii.WaveView.load(System.Int32,System.String)">
            <summary>
            波形描画コンテキストに、指定したWAVEファイルを読み込みます。
            </summary>
            <param name="index">読込を行わせる波形描画コンテキストのインデックス</param>
            <param name="wave_path">読み込むWAVEファイルのパス</param>
        </member>
        <member name="M:cadencii.WaveView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            オーバーライドされます。
            <seealso cref="M:System.Windows.Forms.Control.OnPaint"/>
            </summary>
            <param name="e"></param>
        </member>
    </members>
</doc>
